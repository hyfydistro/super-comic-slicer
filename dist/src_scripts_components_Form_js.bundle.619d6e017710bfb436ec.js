/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunksuper_comic_slicer"] = self["webpackChunksuper_comic_slicer"] || []).push([["src_scripts_components_Form_js"],{

/***/ "SYLB":
/*!****************************************!*\
  !*** ./src/scripts/components/Form.js ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Form)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"q1tI\");\n/* harmony import */ var _libs_createId__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../libs/createId */ \"OJ97\");\n/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react/jsx-runtime */ \"nKUr\");\n // import FormUpload from \"./FormUpload\";\n\nconst FormUpload = /*#__PURE__*/(0,react__WEBPACK_IMPORTED_MODULE_0__.lazy)(() => Promise.all(/*! import() */[__webpack_require__.e(\"reactreactBeautifulDnd\"), __webpack_require__.e(\"vendors-node_modules_babel_runtime_helpers_esm_inheritsLoose_js-node_modules_css-box-model_di-45dfde\"), __webpack_require__.e(\"src_scripts_components_FormUpload_js\")]).then(__webpack_require__.bind(__webpack_require__, /*! ./FormUpload.js */ \"cIB+\"))); // import FormSelect from \"./FormSelect\";\n\nconst FormSelect = /*#__PURE__*/(0,react__WEBPACK_IMPORTED_MODULE_0__.lazy)(() => __webpack_require__.e(/*! import() */ \"src_scripts_components_FormSelect_js\").then(__webpack_require__.bind(__webpack_require__, /*! ./FormSelect.js */ \"NJ2e\"))); // import FormOptions from \"./FormOptions\";\n\nconst FormOptions = /*#__PURE__*/(0,react__WEBPACK_IMPORTED_MODULE_0__.lazy)(() => __webpack_require__.e(/*! import() */ \"src_scripts_components_FormOptions_js\").then(__webpack_require__.bind(__webpack_require__, /*! ./FormOptions.js */ \"cx83\"))); // import FormResults from \"./FormResults\";\n\nconst FormResults = /*#__PURE__*/(0,react__WEBPACK_IMPORTED_MODULE_0__.lazy)(() => __webpack_require__.e(/*! import() */ \"src_scripts_components_FormResults_js\").then(__webpack_require__.bind(__webpack_require__, /*! ./FormResults */ \"e3DQ\"))); // Modules\n// Dynamic imports\n// import { saveAs } from \"file-saver\";\n// import JSZip from \"jszip\";\n\nasync function saveAndDownloadFiles(selectedFileExtension, processImages, Selectedwebcomics, webcomicIndex) {\n  const JSZip = await __webpack_require__.e(/*! import() */ \"vendors-node_modules_jszip_dist_jszip_js\").then(__webpack_require__.t.bind(__webpack_require__, /*! jszip/dist/jszip.js */ \"g1Xn\", 23));\n  const fileSaver = await __webpack_require__.e(/*! import() */ \"node_modules_file-saver_dist_FileSaver_min_js\").then(__webpack_require__.t.bind(__webpack_require__, /*! file-saver */ \"Iab2\", 23));\n  const JSZipConstructor = JSZip.default;\n  const saveAs = fileSaver.default;\n  const zip = new JSZipConstructor();\n  const selectedFileExt = selectedFileExtension; // NOTE: Naming is padded with zero of tens\n  // Over tens are unavailable\n\n  for (let i = 0; i < processImages.length; i++) {\n    let fileName;\n\n    if (i > 10) {\n      fileName = `${i}.${selectedFileExt}`;\n    } else {\n      fileName = `${i.toString().padStart(2, \"0\")}.${selectedFileExt}`;\n    }\n\n    zip.file(fileName, processImages[i].substr(processImages[i].indexOf(',') + 1), {\n      base64: true\n    });\n  }\n\n  zip.generateAsync({\n    type: \"blob\",\n    mimeType: \"image/jpeg\"\n  }).then(function (blob) {\n    saveAs(blob, `${Selectedwebcomics[webcomicIndex]}.zip`);\n  });\n} // libs\n\n\n // TODO: FEATURE (NEXT UPDATE)\n// \"Rotate\" button in Preview thumb\n// Also see in 'FormUpload.js'\n\n\n\nconst alertMessages = {\n  onSuccess: {\n    filesRemoved: \"Files were cleared.\",\n    completedProcess: \"Process completed!\"\n  },\n  onError: {\n    unacceptableFileType: \"File extensions not supported! Only PNG and JPEG (or JPG) allowed.\",\n    overMaxFileSize: \"Total file size is over maximum. Remove some files to continue.\",\n    noFilesFound: \"No images found to process. Upload some images to 'Begin Slice'!\",\n    selectFormMandatory: \"Please check at least one webcomic platform under '2. Select'.\",\n    selectFormMandatoryTarget: \"Check at least one in order to continue.\"\n  },\n  onWarning: {\n    nearMaxFileSize: \"Total file size is near maximum!\"\n  }\n};\nconst webcomicsModel = [{\n  htmlLabel: \"webtoon\",\n  imageSource: \"images/webtoon-icon.svg\",\n  htmlAlt: \"webtoon icon\",\n  text: \"Webtoon\",\n  disabled: false\n}, {\n  htmlLabel: \"tapas\",\n  imageSource: \"images/tapas-icon.png\",\n  htmlAlt: \"tapas icon\",\n  text: \"Tapas\",\n  disabled: true\n}]; // RADIO OPTIONS\n// Default CHECKED: filExtensionsModel[0]\n\nconst filExtensionsModel = [{\n  htmlLabel: \"jpeg\",\n  text: \"JPEG\"\n}, {\n  htmlLabel: \"png\",\n  text: \"PNG\"\n}]; // RADIO OPTIONS\n// Default CHECKED: squashLevelModel[0]\n\nconst squashLevelModel = [{\n  htmlLabel: \"none\",\n  pixelValue: 0,\n  text: \"none\"\n}, {\n  htmlLabel: \"400\",\n  pixelValue: 400,\n  text: \"400 width pixels\"\n}, {\n  htmlLabel: \"500\",\n  pixelValue: 500,\n  text: \"500 width pixels\"\n}, {\n  htmlLabel: \"600\",\n  pixelValue: 600,\n  text: \"600 width pixels\"\n}, {\n  htmlLabel: \"700\",\n  pixelValue: 700,\n  text: \"700 width pixels\"\n}]; // Accepted file types\n\nconst fileTypes = ['image/jpeg', 'image/jpg', 'image/png'];\n\nfunction validFileType(file) {\n  return fileTypes.includes(file);\n}\n\nclass Form extends react__WEBPACK_IMPORTED_MODULE_0__.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      // # STYLES EVENT\n      // EVENT: onDragOver\n      isDragOver: false,\n      dropzoneBordersClass: {\n        highlight: \"dropzone dropzone--over\",\n        default: \"dropzone\"\n      },\n      inputDataAvailable: false,\n      // EVENT: onClick\n      // \"Begin Slice!\" button\n      sliceText: \"slice-btn\",\n      // EVENT: conditional\n      // div class \"preview-wrapper\"\n      previewWrapperClass: {\n        visible: \"preview-wrapper\",\n        invisible: \"preview-wrapper hidden\"\n      },\n      // # ALERT MESSAGES AND STATE\n      // Success\n      isAlertMessageSuccess: false,\n      alertMessageSuccess: \"\",\n      // Error\n      isAlertMessageError: false,\n      alertMessageError: \"\",\n      // Warning\n      isAlertMessageWarning: false,\n      alertMessageWarning: \"\",\n      // Error on \"Begin Slice!\"\n      isAlertMessageErrorOnBeginSliceBtn: false,\n      alertMessageErrorOnBeginSliceBtn: \"\",\n      // Success on \"Begin Slice!\"\n      isAlertMessageSuccessOnBeginSliceBtn: false,\n      alertMessageSuccessOnBeginSliceBtn: \"\",\n      // Error on none webcomic platform selected\n      isAlertMessageErrorOnSelectForm: false,\n      alertMessageErrorOnSelectForm: \"\",\n      // # DATA\n      processedFileData: [],\n      inputField: [],\n      // inputField: [\n      //     {\n      //         fileRead: [<obj>],\n      //         id: <number>\n      //         fileSize: <number>\n      //     }\n      // ]\n      totalFileSize: 0,\n      // Byte measurement\n      selectedWebcomics: [],\n      selectedFileExtension: \"jpeg\",\n      // default value\n      selectedSquashLevel: \"none\"\n    }; // # METHODS\n\n    this.handleDrag = this.handleDrag.bind(this);\n    this.handleDragLeave = this.handleDragLeave.bind(this);\n    this.handleFileDrop = this.handleFileDrop.bind(this);\n    this.processResults = this.processResults.bind(this);\n    this.handleBeginSlicBtn = this.handleBeginSlicBtn.bind(this); // TOGGLE CLASS\n\n    this.toggleBeginSliceText = this.toggleBeginSliceText.bind(this);\n    this.handleDragEnd = this.handleDragEnd.bind(this); // DATA MANAGEMENT\n    // DELETE Data\n\n    this.handleRemoveSelf = this.handleRemoveSelf.bind(this);\n    this.handleClickToRemoveAll = this.handleClickToRemoveAll.bind(this); // SET file data\n\n    this.setFilesData = this.setFilesData.bind(this); // GET total file size\n\n    this.checkTotalFileSize = this.checkTotalFileSize.bind(this); // UPLOAD on file browse\n\n    this.handleInputChange = this.handleInputChange.bind(this);\n    this.handleSelectedWebcomic = this.handleSelectedWebcomic.bind(this);\n    this.handleOptionsFileExtenions = this.handleOptionsFileExtenions.bind(this);\n    this.handleOptionsSquashLevel = this.handleOptionsSquashLevel.bind(this);\n  } // ===============\n  // # REACT METHODS\n  // ===============\n  // componentWillUnmount() {\n  //     console.log(\"UNMOUNTING...\");\n  // }\n  // componentDidMount() {\n  //     console.log(\"MOUNTING...\");\n  // }\n  // componentDidUpdate() {\n  //     console.log(\"COMPONENT UPDATING...\");\n  // }\n  // ========\n  // # EVENTS\n  // ========\n  // event: drag\n\n\n  handleDrag(e) {\n    e.preventDefault();\n    e.stopPropagation();\n    this.setState({\n      isDragOver: true\n    });\n  } // event: drag\n\n\n  handleDragLeave(e) {\n    e.preventDefault(e);\n    e.stopPropagation();\n    this.setState({\n      isDragOver: false\n    });\n  } // event: drag\n  // Reorder files\n\n\n  handleDragEnd(result) {\n    // CREATE shallow copy\n    const items = Array.from(this.state.inputField); // EXTRACT targeted item\n\n    const [reorderedItem] = items.splice(result.source.index, 1); // PUSH targeted item into new order\n\n    items.splice(result.destination.index, 0, reorderedItem);\n    this.setState({\n      inputField: items\n    });\n  } // event: click\n  // Open browser for files\n\n\n  handleClickToUpload() {\n    const dropzoneInput = document.querySelector(\".dropzone__input\"); // EMULATE HTML input CLICK event\n\n    dropzoneInput.click();\n  } // event: click\n  // UPDATE state 'selectedFileExtension'\n\n\n  handleOptionsFileExtenions(e) {\n    const newSelectedFileExtension = e.target.value;\n    this.setState({\n      selectedFileExtension: newSelectedFileExtension\n    });\n  } // event: click\n  // UPDATE state 'selectedSquashLevel'\n\n\n  handleOptionsSquashLevel(e) {\n    const newSelectedSquashLevel = parseInt(e.target.value, 10);\n\n    if (newSelectedSquashLevel == 0) {\n      this.setState({\n        selectedSquashLevel: \"none\"\n      });\n    } else {\n      this.setState({\n        selectedSquashLevel: newSelectedSquashLevel\n      });\n    }\n  } // event: click\n  // \"Begin Slice!\" button\n\n\n  handleBeginSlicBtn(e) {\n    e.preventDefault();\n\n    if (this.state.inputField.length === 0) {\n      // ALERT MESSAGE\n      // No data (or image file) found\n      this.setState({\n        isAlertMessageErrorOnBeginSliceBtn: true,\n        alertMessageErrorOnBeginSliceBtn: alertMessages.onError.noFilesFound\n      });\n      setTimeout(() => {\n        this.setState({\n          isAlertMessageErrorOnBeginSliceBtn: false,\n          alertMessageErrorOnBeginSliceBtn: \"\"\n        });\n      }, 8000);\n    } else {\n      if (this.state.selectedWebcomics.length === 0) {\n        // ALERT MESSAGE (PERSIST)\n        // No webcomic platform selected\n        this.setState({\n          isAlertMessageErrorOnBeginSliceBtn: true,\n          alertMessageErrorOnBeginSliceBtn: alertMessages.onError.selectFormMandatory,\n          isAlertMessageErrorOnSelectForm: true,\n          alertMessageErrorOnSelectForm: alertMessages.onError.selectFormMandatoryTarget\n        });\n      } else {\n        // ALERT MESSAGE (PERSIST -> REMOVED)\n        this.setState({\n          isAlertMessageErrorOnBeginSliceBtn: false,\n          alertMessageErrorOnBeginSliceBtn: \"\",\n          isAlertMessageErrorOnSelectForm: false,\n          alertMessageErrorOnSelectForm: \"\"\n        });\n        this.processResults(); // ANIMATION\n\n        this.toggleBeginSliceText();\n        setTimeout(() => {\n          this.toggleBeginSliceText();\n        }, 1500);\n      }\n    }\n  } // event: click\n  // \"X\" button\n  // REMOVE current thumb UI\n  // REMOVE current thumb data\n\n\n  handleRemoveSelf(e) {\n    e.preventDefault(); // GRAB all list\n\n    const sourceThumbnails = document.querySelectorAll(\".preview__thumbnail-container\"); // TRANSFORM node into JavaScript objects (array)\n\n    const arrThumbnails = Array.from(sourceThumbnails); // CREATE shallow copy\n\n    const items = Array.from(this.state.inputField); // GET index of targeted item\n\n    const removeItemIndex = arrThumbnails.indexOf(e.target.parentElement); // UPDATE state totalFileSize\n\n    this.setState(currentState => {\n      // GET data\n      const sourceInputField = Array.from(currentState.inputField); // GET data 'fileSize'\n\n      const fileSizesArr = sourceInputField.map(file => {\n        return file.fileSize;\n      }); // SUM all data 'fileSize'\n\n      const totalFileByte = fileSizesArr.reduce((accumulator, currentValue) => accumulator + currentValue); // EXTRACT targeted item 'fileSize'\n\n      const removedItemFileSize = sourceInputField[removeItemIndex][\"fileSize\"]; // SUBTRACT 'totalFileSize' - targeted item 'fileSize'\n\n      const newTotalFileSize = totalFileByte - removedItemFileSize;\n      return {\n        totalFileSize: newTotalFileSize\n      }; // UPDATE UI\n    }, this.checkTotalFileSize()); // REMOVE targeted item\n\n    items.splice(removeItemIndex, 1); // UPDATE data\n\n    this.setState({\n      inputField: items\n    });\n  } // event: click\n  // EMPTY state \"inputField\"\n  // \"Clear Files\" button\n\n\n  handleClickToRemoveAll() {\n    // ALERT MESSAGE\n    // UPDATE data\n    this.setState({\n      inputField: [],\n      inputDataAvailable: false,\n      isAlertMessageSuccess: true,\n      alertMessageSuccess: alertMessages.onSuccess.filesRemoved\n    });\n    setTimeout(() => {\n      this.setState({\n        isAlertMessageSuccess: false,\n        alertMessageSuccess: \"\"\n      });\n    }, 8000);\n  } // event: change\n  // LIStEN to user on CLICK to upload file\n  // if user selects file(s), proceed to process image files methods\n\n\n  handleInputChange(e) {\n    const files = e.target.files;\n    this.setFilesData(files); // UPDATE UI on CONDITION\n\n    if (this.state.inputField) {\n      this.setState({\n        inputDataAvailable: true\n      });\n    }\n  } // event: click\n  // UPDATE state 'selectedWebcomics'\n\n\n  handleSelectedWebcomic(e) {\n    const selectedWebcomicValue = e.target.value;\n    const currentSelectedWebcomics = this.state.selectedWebcomics;\n\n    if (currentSelectedWebcomics.includes(selectedWebcomicValue)) {\n      // UNCHECK\n      const removeItemIndex = currentSelectedWebcomics.indexOf(selectedWebcomicValue);\n      currentSelectedWebcomics.splice(removeItemIndex, 1);\n      this.setState({\n        selectedWebcomics: currentSelectedWebcomics\n      });\n    } else {\n      // CHECK\n      this.setState(currentState => ({\n        selectedWebcomics: [...currentState.selectedWebcomics, selectedWebcomicValue]\n      }));\n    }\n  } // =========\n  // # METHODS\n  // =========\n  // TOGGLE\n  // \"Begin Slice\" Text\n\n\n  toggleBeginSliceText() {\n    if (this.state.sliceText === \"slice-btn\") {\n      this.setState({\n        sliceText: \"icon-spinner8 animate-spin\"\n      });\n    } else if (this.state.sliceText === \"icon-spinner8 animate-spin\") {\n      this.setState({\n        sliceText: \"slice-btn\"\n      });\n    }\n  } // FETCHING FILE READ\n  // - VALIDATE file on upload\n  // - UPDATE state \"inputField\"\n  // - TOGGLE class\n\n\n  handleFileDrop(e) {\n    e.preventDefault();\n    e.stopPropagation();\n    const files = e.dataTransfer.files;\n    this.setFilesData(files); // UPDATE data boolean (for other chain reactions)\n\n    if (this.state.inputField) {\n      this.setState({\n        inputDataAvailable: true\n      });\n    }\n\n    this.setState({\n      isDragOver: false\n    });\n  }\n\n  setFilesData(files) {\n    Object.values(files).forEach(obj => {\n      // VALIDATE\n      if (!validFileType(obj.type)) {\n        // ALERT MESSAGE\n        // User attempted to upload unacceptable files\n        this.setState({\n          alertMessageError: alertMessages.onError.unacceptableFileType,\n          isAlertMessageError: true\n        });\n        setTimeout(() => {\n          this.setState({\n            alertMessageError: \"\",\n            isAlertMessageError: false\n          });\n        }, 8000);\n      } else {\n        // CREATE image file data preview container\n        this.setState(currentState => ({\n          inputField: [...currentState.inputField, {\n            fileRead: obj,\n            id: (0,_libs_createId__WEBPACK_IMPORTED_MODULE_2__.default)(),\n            fileSize: obj.size\n          }]\n        })); // UPDATE state 'totalFileSize'\n\n        this.setState(currentState => {\n          // GET main data\n          const sourceInputField = currentState.inputField; // GET main data 'fileSize'\n\n          const fileSizesArr = sourceInputField.map(file => {\n            return file.fileSize;\n          }); // TOTAL main data 'fileSize'\n\n          const totalFileByte = fileSizesArr.reduce((accumulator, currentValue) => accumulator + currentValue);\n          return {\n            totalFileSize: totalFileByte\n          }; // CHECK CONDITION\n        }, this.checkTotalFileSize());\n      }\n    });\n  } // CHECK CONDITION\n  // UPDATE UI if CONDITION are met\n\n\n  checkTotalFileSize() {\n    // ALERT MESSAGE\n    // CONDITION\n    // near max, pass 18MB\n    if (this.state.totalFileSize >= 18874368) {\n      this.setState({\n        isAlertMessageWarning: true,\n        alertMessageWarning: alertMessages.onWarning.nearMaxFileSize\n      });\n    } // ALERT MESSAGE\n    // CONDITION\n    // over max, pass 20MB\n\n\n    if (this.state.totalFileSize >= 20971520) {\n      this.setState({\n        isAlertMessageError: true,\n        alertMessageError: alertMessages.onError.overMaxFileSize\n      });\n    }\n  } // PROCESS IMAGE FILES\n\n\n  processResults() {\n    // GET all image file elements\n    const sourceImagesRaw = document.querySelectorAll(\".preview__thumbnail img\"); // REFERENCE the canvas\n\n    const canvas = document.querySelector(\"#canvas\");\n    const context = canvas.getContext(\"2d\"); // TRANSFORM node into JavaScript objects (array)\n\n    const sourceImages = Array.from(sourceImagesRaw); // GET user selected webcomic platform(s) from SELECT form component\n\n    const Selectedwebcomics = this.state.selectedWebcomics; // # (1) SELECT form\n    // PROCESS files for all selected webcomic platform applied\n\n    for (let i = 0; i < Selectedwebcomics.length; i++) {\n      let processImages = []; // PROCESS image file\n\n      sourceImages.forEach(img => {\n        const imgWidth = img.naturalWidth;\n        const imgHeight = img.naturalHeight; // * CONDITION: image width > image height\n        // ROTATE image\n\n        if (imgWidth > imgHeight) {\n          // NOTE:\n          // Bottom surface would be pointed left, and\n          // Top surface would be pointed right\n          canvas.width = imgHeight;\n          canvas.height = imgWidth;\n          context.rotate(Math.PI / 2);\n          context.drawImage(img, 0, -imgHeight);\n        }\n\n        const maxHeight = imgHeight;\n        const width = imgWidth;\n        let scaleWidth; // # (2) OPTIONS form - \"SQUASH\"\n\n        switch (this.state.selectedSquashLevel) {\n          case \"none\":\n            scaleWidth = width;\n            break;\n\n          case 400:\n            scaleWidth = 400;\n            break;\n\n          case 500:\n            scaleWidth = 500;\n            break;\n\n          case 600:\n            scaleWidth = 600;\n            break;\n\n          case 700:\n            scaleWidth = 700;\n            break;\n        }\n\n        let webcomicMaxWidth;\n        let webcomicMaxHeight; // TODO: FEATURE (NEXT UPDATE)\n        // Find out normal tapas ratio\n        // Current Webcomic Platform Available...\n        // ! tapas in the works... (WIP)\n\n        switch (Selectedwebcomics[i]) {\n          case \"webtoon\":\n            webcomicMaxWidth = 800;\n            webcomicMaxHeight = 1280;\n            break;\n\n          case \"tapas\":\n            webcomicMaxWidth = 960;\n            webcomicMaxHeight = 1440;\n            break;\n        }\n\n        const aspectRatio = webcomicMaxWidth / webcomicMaxHeight; // based on aspect ratio, what the height should be...\n\n        const determinedeHeight = width / aspectRatio;\n        let scaleDeterminedeHeight = determinedeHeight;\n\n        if (scaleWidth !== width) {\n          scaleDeterminedeHeight = scaleWidth / aspectRatio;\n        } // * CONDITION:\n        // If file image naturalHeight is shorter than determinedHeight,\n        // return as is... unless Options scale applied\n\n\n        if (determinedeHeight > maxHeight) {\n          const scaleMaxHeight = scaleWidth / (width / maxHeight);\n          canvas.width = scaleWidth;\n          canvas.height = scaleMaxHeight;\n          context.drawImage(img, 0, 0, scaleWidth, scaleMaxHeight);\n          const result = canvas.toDataURL();\n          processImages.push(result);\n        } else {\n          let timesToSlice = Math.floor(maxHeight / determinedeHeight);\n          let currentSlice = 0;\n          let newYPosition = 0;\n          let slicedImages = []; // * CONDITION: Longer length (height) images\n\n          while (timesToSlice > currentSlice) {\n            newYPosition = determinedeHeight * currentSlice;\n            canvas.width = scaleWidth;\n            canvas.height = scaleDeterminedeHeight;\n            context.drawImage(img, 0, newYPosition, width, determinedeHeight, 0, 0, scaleWidth, scaleDeterminedeHeight);\n            slicedImages.push(canvas.toDataURL());\n            currentSlice++;\n          } // * CONDTION: Odd number remaining\n          // GET last coordinate\n          // GET remaining height\n\n\n          const remainCoordinateY = timesToSlice * determinedeHeight;\n          const remainHeight = maxHeight - remainCoordinateY; // OPTIONS Squash - if available\n\n          let scaleRemaineHeight = remainHeight;\n\n          if (scaleWidth !== width) {\n            scaleRemaineHeight = scaleWidth / (width / remainHeight);\n          }\n\n          if (remainHeight !== 0) {\n            newYPosition = remainCoordinateY; // ? Refactor to a function\n\n            canvas.width = scaleWidth;\n            canvas.height = scaleRemaineHeight;\n            context.drawImage(img, 0, newYPosition, width, remainHeight, 0, 0, scaleWidth, scaleRemaineHeight);\n            slicedImages.push(canvas.toDataURL());\n          }\n\n          processImages.push(...slicedImages);\n        }\n      }); // CREATE Zip folder\n      // NAME images with padded zero if under 10s\n      // GET user file extension prefernce from Options form - File Extensions\n      // PUSH images to Zip folder\n      // DOWNLOAD to user's PC\n\n      saveAndDownloadFiles(this.state.selectedFileExtension, processImages, Selectedwebcomics, i).then(() => {\n        if (Selectedwebcomics.indexOf(Selectedwebcomics[i]) == Selectedwebcomics.indexOf(Selectedwebcomics[Selectedwebcomics.length - 1])) {\n          // ALERT MESSAGE\n          // Process completed\n          this.setState({\n            isAlertMessageSuccessOnBeginSliceBtn: true,\n            alertMessageSuccessOnBeginSliceBtn: alertMessages.onSuccess.completedProcess\n          });\n          setTimeout(() => {\n            this.setState({\n              isAlertMessageSuccessOnBeginSliceBtn: false,\n              alertMessageSuccessOnBeginSliceBtn: \"\"\n            });\n          }, 8000);\n        }\n      }); // ADD image 'data:' url arr of processed image files\n      // RESPONDS to display in Result form\n\n      this.setState({\n        processedFileData: processImages\n      });\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(\"main\", {\n      children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"h2\", {\n        children: \"Start Here\"\n      }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(react__WEBPACK_IMPORTED_MODULE_0__.Suspense, {\n        fallback: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"div\", {\n          children: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"p\", {\n            children: \"LOADING...\"\n          })\n        }),\n        children: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(FormUpload // EVENTS\n        , {\n          onHandleDrag: this.handleDrag,\n          onHandleDragLeave: this.handleDragLeave,\n          onHandleFileDrop: this.handleFileDrop,\n          onRemoveSelf: this.handleRemoveSelf,\n          onhandleDragEnd: this.handleDragEnd,\n          onHandleClickToUpload: this.handleClickToUpload,\n          onHandleInputChange: this.handleInputChange,\n          onHandleClickToRemoveAll: this.handleClickToRemoveAll // STYLED EVENTS\n          ,\n          toggleDropzoneBordersClass: this.state.isDragOver ? this.state.dropzoneBordersClass.highlight : this.state.dropzoneBordersClass.default,\n          togglePreviewWrapperClass: this.state.inputDataAvailable ? this.state.previewWrapperClass.visible : this.state.previewWrapperClass.invisible // ALERT MESSAGES\n          ,\n          getAlertErrorText: this.state.alertMessageError,\n          isAlertMessageError: this.state.isAlertMessageError,\n          getAlertSuccessText: this.state.alertMessageSuccess,\n          isAlertMessageSuccess: this.state.isAlertMessageSuccess,\n          isAlertMessageWarning: this.state.isAlertMessageWarning,\n          getAlertWarningText: this.state.alertMessageWarning // DATAS\n          ,\n          inputField: this.state.inputField,\n          getTotalFileSize: this.state.totalFileSize\n        })\n      }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(react__WEBPACK_IMPORTED_MODULE_0__.Suspense, {\n        fallback: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"div\", {\n          children: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"p\", {\n            children: \"LOADING...\"\n          })\n        }),\n        children: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(FormSelect, {\n          getWebcomicsModel: webcomicsModel,\n          onHandleSelectedWebcomic: this.handleSelectedWebcomic,\n          isAlertMessageSelectFormError: this.state.isAlertMessageErrorOnSelectForm,\n          getAlertMessageSelectFormText: this.state.alertMessageErrorOnSelectForm\n        })\n      }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(react__WEBPACK_IMPORTED_MODULE_0__.Suspense, {\n        fallback: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"div\", {\n          children: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"p\", {\n            children: \"LOADING...\"\n          })\n        }),\n        children: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(FormOptions, {\n          getFilExtensionsModel: filExtensionsModel,\n          onHandleOptionsFileExtenions: this.handleOptionsFileExtenions,\n          getSquashLevelModel: squashLevelModel,\n          onHandleOptionsSquashLevel: this.handleOptionsSquashLevel\n        })\n      }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"div\", {\n        className: \"slice-btn-container\",\n        children: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"a\", {\n          className: \"slice-btn\",\n          onClick: this.handleBeginSlicBtn,\n          children: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"h3\", {\n            children: this.state.sliceText === \"slice-btn\" ? \"Begin Slice!\" : /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"i\", {\n              className: \"icon-spinner8 animate-spin\"\n            })\n          })\n        })\n      }), this.state.isAlertMessageErrorOnBeginSliceBtn === true ? /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(\"div\", {\n        className: \"alert-message--error\",\n        children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"i\", {\n          className: \"alert-icon alert-icon--error icon-warning\"\n        }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"span\", {\n          className: \"alert-message-text--error\",\n          children: this.state.alertMessageErrorOnBeginSliceBtn\n        })]\n      }) : null, this.state.isAlertMessageSuccessOnBeginSliceBtn === true ? /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(\"div\", {\n        className: \"alert-message--success\",\n        children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"i\", {\n          className: \"alert-icon alert-icon--success icon-check\"\n        }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"span\", {\n          className: \"alert-message-text--success\",\n          children: this.state.alertMessageSuccessOnBeginSliceBtn\n        })]\n      }) : null, /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(react__WEBPACK_IMPORTED_MODULE_0__.Suspense, {\n        fallback: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"div\", {\n          children: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"p\", {\n            children: \"LOADING...\"\n          })\n        }),\n        children: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(FormResults, {\n          getImageData: this.state.processedFileData\n        })\n      })]\n    });\n  }\n\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zdXBlci1jb21pYy1zbGljZXIvLi9zcmMvc2NyaXB0cy9jb21wb25lbnRzL0Zvcm0uanM/NDMzMCJdLCJuYW1lcyI6WyJGb3JtVXBsb2FkIiwibGF6eSIsIkZvcm1TZWxlY3QiLCJGb3JtT3B0aW9ucyIsIkZvcm1SZXN1bHRzIiwic2F2ZUFuZERvd25sb2FkRmlsZXMiLCJzZWxlY3RlZEZpbGVFeHRlbnNpb24iLCJwcm9jZXNzSW1hZ2VzIiwiU2VsZWN0ZWR3ZWJjb21pY3MiLCJ3ZWJjb21pY0luZGV4IiwiSlNaaXAiLCJmaWxlU2F2ZXIiLCJKU1ppcENvbnN0cnVjdG9yIiwiZGVmYXVsdCIsInNhdmVBcyIsInppcCIsInNlbGVjdGVkRmlsZUV4dCIsImkiLCJsZW5ndGgiLCJmaWxlTmFtZSIsInRvU3RyaW5nIiwicGFkU3RhcnQiLCJmaWxlIiwic3Vic3RyIiwiaW5kZXhPZiIsImJhc2U2NCIsImdlbmVyYXRlQXN5bmMiLCJ0eXBlIiwibWltZVR5cGUiLCJ0aGVuIiwiYmxvYiIsImFsZXJ0TWVzc2FnZXMiLCJvblN1Y2Nlc3MiLCJmaWxlc1JlbW92ZWQiLCJjb21wbGV0ZWRQcm9jZXNzIiwib25FcnJvciIsInVuYWNjZXB0YWJsZUZpbGVUeXBlIiwib3Zlck1heEZpbGVTaXplIiwibm9GaWxlc0ZvdW5kIiwic2VsZWN0Rm9ybU1hbmRhdG9yeSIsInNlbGVjdEZvcm1NYW5kYXRvcnlUYXJnZXQiLCJvbldhcm5pbmciLCJuZWFyTWF4RmlsZVNpemUiLCJ3ZWJjb21pY3NNb2RlbCIsImh0bWxMYWJlbCIsImltYWdlU291cmNlIiwiaHRtbEFsdCIsInRleHQiLCJkaXNhYmxlZCIsImZpbEV4dGVuc2lvbnNNb2RlbCIsInNxdWFzaExldmVsTW9kZWwiLCJwaXhlbFZhbHVlIiwiZmlsZVR5cGVzIiwidmFsaWRGaWxlVHlwZSIsImluY2x1ZGVzIiwiRm9ybSIsIlJlYWN0IiwiY29uc3RydWN0b3IiLCJwcm9wcyIsInN0YXRlIiwiaXNEcmFnT3ZlciIsImRyb3B6b25lQm9yZGVyc0NsYXNzIiwiaGlnaGxpZ2h0IiwiaW5wdXREYXRhQXZhaWxhYmxlIiwic2xpY2VUZXh0IiwicHJldmlld1dyYXBwZXJDbGFzcyIsInZpc2libGUiLCJpbnZpc2libGUiLCJpc0FsZXJ0TWVzc2FnZVN1Y2Nlc3MiLCJhbGVydE1lc3NhZ2VTdWNjZXNzIiwiaXNBbGVydE1lc3NhZ2VFcnJvciIsImFsZXJ0TWVzc2FnZUVycm9yIiwiaXNBbGVydE1lc3NhZ2VXYXJuaW5nIiwiYWxlcnRNZXNzYWdlV2FybmluZyIsImlzQWxlcnRNZXNzYWdlRXJyb3JPbkJlZ2luU2xpY2VCdG4iLCJhbGVydE1lc3NhZ2VFcnJvck9uQmVnaW5TbGljZUJ0biIsImlzQWxlcnRNZXNzYWdlU3VjY2Vzc09uQmVnaW5TbGljZUJ0biIsImFsZXJ0TWVzc2FnZVN1Y2Nlc3NPbkJlZ2luU2xpY2VCdG4iLCJpc0FsZXJ0TWVzc2FnZUVycm9yT25TZWxlY3RGb3JtIiwiYWxlcnRNZXNzYWdlRXJyb3JPblNlbGVjdEZvcm0iLCJwcm9jZXNzZWRGaWxlRGF0YSIsImlucHV0RmllbGQiLCJ0b3RhbEZpbGVTaXplIiwic2VsZWN0ZWRXZWJjb21pY3MiLCJzZWxlY3RlZFNxdWFzaExldmVsIiwiaGFuZGxlRHJhZyIsImJpbmQiLCJoYW5kbGVEcmFnTGVhdmUiLCJoYW5kbGVGaWxlRHJvcCIsInByb2Nlc3NSZXN1bHRzIiwiaGFuZGxlQmVnaW5TbGljQnRuIiwidG9nZ2xlQmVnaW5TbGljZVRleHQiLCJoYW5kbGVEcmFnRW5kIiwiaGFuZGxlUmVtb3ZlU2VsZiIsImhhbmRsZUNsaWNrVG9SZW1vdmVBbGwiLCJzZXRGaWxlc0RhdGEiLCJjaGVja1RvdGFsRmlsZVNpemUiLCJoYW5kbGVJbnB1dENoYW5nZSIsImhhbmRsZVNlbGVjdGVkV2ViY29taWMiLCJoYW5kbGVPcHRpb25zRmlsZUV4dGVuaW9ucyIsImhhbmRsZU9wdGlvbnNTcXVhc2hMZXZlbCIsImUiLCJwcmV2ZW50RGVmYXVsdCIsInN0b3BQcm9wYWdhdGlvbiIsInNldFN0YXRlIiwicmVzdWx0IiwiaXRlbXMiLCJBcnJheSIsImZyb20iLCJyZW9yZGVyZWRJdGVtIiwic3BsaWNlIiwic291cmNlIiwiaW5kZXgiLCJkZXN0aW5hdGlvbiIsImhhbmRsZUNsaWNrVG9VcGxvYWQiLCJkcm9wem9uZUlucHV0IiwiZG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yIiwiY2xpY2siLCJuZXdTZWxlY3RlZEZpbGVFeHRlbnNpb24iLCJ0YXJnZXQiLCJ2YWx1ZSIsIm5ld1NlbGVjdGVkU3F1YXNoTGV2ZWwiLCJwYXJzZUludCIsInNldFRpbWVvdXQiLCJzb3VyY2VUaHVtYm5haWxzIiwicXVlcnlTZWxlY3RvckFsbCIsImFyclRodW1ibmFpbHMiLCJyZW1vdmVJdGVtSW5kZXgiLCJwYXJlbnRFbGVtZW50IiwiY3VycmVudFN0YXRlIiwic291cmNlSW5wdXRGaWVsZCIsImZpbGVTaXplc0FyciIsIm1hcCIsImZpbGVTaXplIiwidG90YWxGaWxlQnl0ZSIsInJlZHVjZSIsImFjY3VtdWxhdG9yIiwiY3VycmVudFZhbHVlIiwicmVtb3ZlZEl0ZW1GaWxlU2l6ZSIsIm5ld1RvdGFsRmlsZVNpemUiLCJmaWxlcyIsInNlbGVjdGVkV2ViY29taWNWYWx1ZSIsImN1cnJlbnRTZWxlY3RlZFdlYmNvbWljcyIsImRhdGFUcmFuc2ZlciIsIk9iamVjdCIsInZhbHVlcyIsImZvckVhY2giLCJvYmoiLCJmaWxlUmVhZCIsImlkIiwiY3JlYXRlSWQiLCJzaXplIiwic291cmNlSW1hZ2VzUmF3IiwiY2FudmFzIiwiY29udGV4dCIsImdldENvbnRleHQiLCJzb3VyY2VJbWFnZXMiLCJpbWciLCJpbWdXaWR0aCIsIm5hdHVyYWxXaWR0aCIsImltZ0hlaWdodCIsIm5hdHVyYWxIZWlnaHQiLCJ3aWR0aCIsImhlaWdodCIsInJvdGF0ZSIsIk1hdGgiLCJQSSIsImRyYXdJbWFnZSIsIm1heEhlaWdodCIsInNjYWxlV2lkdGgiLCJ3ZWJjb21pY01heFdpZHRoIiwid2ViY29taWNNYXhIZWlnaHQiLCJhc3BlY3RSYXRpbyIsImRldGVybWluZWRlSGVpZ2h0Iiwic2NhbGVEZXRlcm1pbmVkZUhlaWdodCIsInNjYWxlTWF4SGVpZ2h0IiwidG9EYXRhVVJMIiwicHVzaCIsInRpbWVzVG9TbGljZSIsImZsb29yIiwiY3VycmVudFNsaWNlIiwibmV3WVBvc2l0aW9uIiwic2xpY2VkSW1hZ2VzIiwicmVtYWluQ29vcmRpbmF0ZVkiLCJyZW1haW5IZWlnaHQiLCJzY2FsZVJlbWFpbmVIZWlnaHQiLCJyZW5kZXIiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Q0FDQTs7QUFDQSxNQUFNQSxVQUFVLGdCQUFHQywyQ0FBSSxDQUFDLE1BQU0sOFZBQVAsQ0FBdkIsQyxDQUNBOztBQUNBLE1BQU1DLFVBQVUsZ0JBQUdELDJDQUFJLENBQUMsTUFBTSxnS0FBUCxDQUF2QixDLENBQ0E7O0FBQ0EsTUFBTUUsV0FBVyxnQkFBR0YsMkNBQUksQ0FBQyxNQUFNLGtLQUFQLENBQXhCLEMsQ0FFQTs7QUFDQSxNQUFNRyxXQUFXLGdCQUFHSCwyQ0FBSSxDQUFDLE1BQU0sK0pBQVAsQ0FBeEIsQyxDQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUNBLGVBQWVJLG9CQUFmLENBQW9DQyxxQkFBcEMsRUFBMkRDLGFBQTNELEVBQTBFQyxpQkFBMUUsRUFBNkZDLGFBQTdGLEVBQTRHO0FBQ3hHLFFBQU1DLEtBQUssR0FBRyxNQUFNLDhLQUFwQjtBQUNBLFFBQU1DLFNBQVMsR0FBRyxNQUFNLDBLQUF4QjtBQUVBLFFBQU1DLGdCQUFnQixHQUFHRixLQUFLLENBQUNHLE9BQS9CO0FBQ0EsUUFBTUMsTUFBTSxHQUFHSCxTQUFTLENBQUNFLE9BQXpCO0FBRUEsUUFBTUUsR0FBRyxHQUFHLElBQUlILGdCQUFKLEVBQVo7QUFDQSxRQUFNSSxlQUFlLEdBQUdWLHFCQUF4QixDQVJ3RyxDQVV4RztBQUNBOztBQUVBLE9BQUssSUFBSVcsQ0FBQyxHQUFHLENBQWIsRUFBZ0JBLENBQUMsR0FBR1YsYUFBYSxDQUFDVyxNQUFsQyxFQUEwQ0QsQ0FBQyxFQUEzQyxF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dUVLLEtBQUtoQixLQUFMLENBQVdpQixvQ0FBWCxLQUFvRCxJQUFwRCxnQkFDSztBQUFLLGlCQUFTLEVBQUMsd0JBQWY7QUFBQSxnQ0FDRTtBQUFHLG1CQUFTLEVBQUM7QUFBYixVQURGLGVBRUU7QUFBTSxtQkFBUyxFQUFDLDZCQUFoQjtBQUFBLG9CQUNLLEtBQUtqQixLQUFMLENBQVdrQjtBQURoQixVQUZGO0FBQUEsUUFETCxHQU9LLElBOUVWLGVBK0VJLHVEQUFDLDJDQUFEO0FBQVUsZ0JBQVEsZUFBRTtBQUFBLGlDQUFLO0FBQUE7QUFBQTtBQUFMLFVBQXBCO0FBQUEsK0JBQ0ksdURBQUMsV0FBRDtBQUNJLHNCQUFZLEVBQUUsS0FBS2xCLEtBQUwsQ0FBV3FCO0FBRDdCO0FBREosUUEvRUo7QUFBQSxNQURKO0FBdUZIOztBQTl1QjZDIiwiZmlsZSI6IlNZTEIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QsIHsgU3VzcGVuc2UsIGxhenkgfSBmcm9tIFwicmVhY3RcIjtcclxuLy8gaW1wb3J0IEZvcm1VcGxvYWQgZnJvbSBcIi4vRm9ybVVwbG9hZFwiO1xyXG5jb25zdCBGb3JtVXBsb2FkID0gbGF6eSgoKSA9PiBpbXBvcnQoXCIuL0Zvcm1VcGxvYWQuanNcIikpO1xyXG4vLyBpbXBvcnQgRm9ybVNlbGVjdCBmcm9tIFwiLi9Gb3JtU2VsZWN0XCI7XHJcbmNvbnN0IEZvcm1TZWxlY3QgPSBsYXp5KCgpID0+IGltcG9ydChcIi4vRm9ybVNlbGVjdC5qc1wiKSk7XHJcbi8vIGltcG9ydCBGb3JtT3B0aW9ucyBmcm9tIFwiLi9Gb3JtT3B0aW9uc1wiO1xyXG5jb25zdCBGb3JtT3B0aW9ucyA9IGxhenkoKCkgPT4gaW1wb3J0KFwiLi9Gb3JtT3B0aW9ucy5qc1wiKSk7XHJcblxyXG4vLyBpbXBvcnQgRm9ybVJlc3VsdHMgZnJvbSBcIi4vRm9ybVJlc3VsdHNcIjtcclxuY29uc3QgRm9ybVJlc3VsdHMgPSBsYXp5KCgpID0+IGltcG9ydChcIi4vRm9ybVJlc3VsdHNcIikpO1xyXG5cclxuLy8gTW9kdWxlc1xyXG4vLyBEeW5hbWljIGltcG9ydHNcclxuLy8gaW1wb3J0IHsgc2F2ZUFzIH0gZnJvbSBcImZpbGUtc2F2ZXJcIjtcclxuLy8gaW1wb3J0IEpTWmlwIGZyb20gXCJqc3ppcFwiO1xyXG5hc3luYyBmdW5jdGlvbiBzYXZlQW5kRG93bmxvYWRGaWxlcyhzZWxlY3RlZEZpbGVFeHRlbnNpb24sIHByb2Nlc3NJbWFnZXMsIFNlbGVjdGVkd2ViY29taWNzLCB3ZWJjb21pY0luZGV4KSB7XHJcbiAgICBjb25zdCBKU1ppcCA9IGF3YWl0IGltcG9ydChcImpzemlwL2Rpc3QvanN6aXAuanNcIik7XHJcbiAgICBjb25zdCBmaWxlU2F2ZXIgPSBhd2FpdCBpbXBvcnQoXCJmaWxlLXNhdmVyXCIpO1xyXG5cclxuICAgIGNvbnN0IEpTWmlwQ29uc3RydWN0b3IgPSBKU1ppcC5kZWZhdWx0O1xyXG4gICAgY29uc3Qgc2F2ZUFzID0gZmlsZVNhdmVyLmRlZmF1bHQ7XHJcblxyXG4gICAgY29uc3QgemlwID0gbmV3IEpTWmlwQ29uc3RydWN0b3IoKTtcclxuICAgIGNvbnN0IHNlbGVjdGVkRmlsZUV4dCA9IHNlbGVjdGVkRmlsZUV4dGVuc2lvbjtcclxuXHJcbiAgICAvLyBOT1RFOiBOYW1pbmcgaXMgcGFkZGVkIHdpdGggemVybyBvZiB0ZW5zXHJcbiAgICAvLyBPdmVyIHRlbnMgYXJlIHVuYXZhaWxhYmxlXHJcblxyXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwcm9jZXNzSW1hZ2VzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgbGV0IGZpbGVOYW1lO1xyXG4gICAgICAgIGlmIChpID4gMTApIHtcclxuICAgICAgICAgICAgZmlsZU5hbWUgPSBgJHtpfS4ke3NlbGVjdGVkRmlsZUV4dH1gO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGZpbGVOYW1lID0gYCR7aS50b1N0cmluZygpLnBhZFN0YXJ0KDIsIFwiMFwiKX0uJHtzZWxlY3RlZEZpbGVFeHR9YDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHppcC5maWxlKGZpbGVOYW1lLCBwcm9jZXNzSW1hZ2VzW2ldLnN1YnN0cihwcm9jZXNzSW1hZ2VzW2ldLmluZGV4T2YoJywnKSArIDEpLCB7IGJhc2U2NDogdHJ1ZSB9KTtcclxuICAgIH1cclxuXHJcbiAgICB6aXAuZ2VuZXJhdGVBc3luYyh7IHR5cGU6IFwiYmxvYlwiLCBtaW1lVHlwZTogXCJpbWFnZS9qcGVnXCIgfSlcclxuICAgICAgICAudGhlbihmdW5jdGlvbiAoYmxvYikge1xyXG5cclxuICAgICAgICAgICAgc2F2ZUFzKGJsb2IsIGAke1NlbGVjdGVkd2ViY29taWNzW3dlYmNvbWljSW5kZXhdfS56aXBgKTtcclxuICAgICAgICB9KVxyXG59XHJcblxyXG4vLyBsaWJzXHJcbmltcG9ydCBjcmVhdGVJZCBmcm9tIFwiLi4vbGlicy9jcmVhdGVJZFwiO1xyXG5cclxuXHJcbi8vIFRPRE86IEZFQVRVUkUgKE5FWFQgVVBEQVRFKVxyXG4vLyBcIlJvdGF0ZVwiIGJ1dHRvbiBpbiBQcmV2aWV3IHRodW1iXHJcbi8vIEFsc28gc2VlIGluICdGb3JtVXBsb2FkLmpzJ1xyXG5cclxuY29uc3QgYWxlcnRNZXNzYWdlcyA9IHtcclxuICAgIG9uU3VjY2Vzczoge1xyXG4gICAgICAgIGZpbGVzUmVtb3ZlZDogXCJGaWxlcyB3ZXJlIGNsZWFyZWQuXCIsXHJcbiAgICAgICAgY29tcGxldGVkUHJvY2VzczogXCJQcm9jZXNzIGNvbXBsZXRlZCFcIlxyXG4gICAgfSxcclxuICAgIG9uRXJyb3I6IHtcclxuICAgICAgICB1bmFjY2VwdGFibGVGaWxlVHlwZTogXCJGaWxlIGV4dGVuc2lvbnMgbm90IHN1cHBvcnRlZCEgT25seSBQTkcgYW5kIEpQRUcgKG9yIEpQRykgYWxsb3dlZC5cIixcclxuICAgICAgICBvdmVyTWF4RmlsZVNpemU6IFwiVG90YWwgZmlsZSBzaXplIGlzIG92ZXIgbWF4aW11bS4gUmVtb3ZlIHNvbWUgZmlsZXMgdG8gY29udGludWUuXCIsXHJcbiAgICAgICAgbm9GaWxlc0ZvdW5kOiBcIk5vIGltYWdlcyBmb3VuZCB0byBwcm9jZXNzLiBVcGxvYWQgc29tZSBpbWFnZXMgdG8gJ0JlZ2luIFNsaWNlJyFcIixcclxuICAgICAgICBzZWxlY3RGb3JtTWFuZGF0b3J5OiBcIlBsZWFzZSBjaGVjayBhdCBsZWFzdCBvbmUgd2ViY29taWMgcGxhdGZvcm0gdW5kZXIgJzIuIFNlbGVjdCcuXCIsXHJcbiAgICAgICAgc2VsZWN0Rm9ybU1hbmRhdG9yeVRhcmdldDogXCJDaGVjayBhdCBsZWFzdCBvbmUgaW4gb3JkZXIgdG8gY29udGludWUuXCJcclxuXHJcbiAgICB9LFxyXG4gICAgb25XYXJuaW5nOiB7XHJcbiAgICAgICAgbmVhck1heEZpbGVTaXplOiBcIlRvdGFsIGZpbGUgc2l6ZSBpcyBuZWFyIG1heGltdW0hXCIsXHJcbiAgICB9XHJcbn1cclxuXHJcbmNvbnN0IHdlYmNvbWljc01vZGVsID0gW1xyXG4gICAge1xyXG4gICAgICAgIGh0bWxMYWJlbDogXCJ3ZWJ0b29uXCIsXHJcbiAgICAgICAgaW1hZ2VTb3VyY2U6IFwiaW1hZ2VzL3dlYnRvb24taWNvbi5zdmdcIixcclxuICAgICAgICBodG1sQWx0OiBcIndlYnRvb24gaWNvblwiLFxyXG4gICAgICAgIHRleHQ6IFwiV2VidG9vblwiLFxyXG4gICAgICAgIGRpc2FibGVkOiBmYWxzZVxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgICBodG1sTGFiZWw6IFwidGFwYXNcIixcclxuICAgICAgICBpbWFnZVNvdXJjZTogXCJpbWFnZXMvdGFwYXMtaWNvbi5wbmdcIixcclxuICAgICAgICBodG1sQWx0OiBcInRhcGFzIGljb25cIixcclxuICAgICAgICB0ZXh0OiBcIlRhcGFzXCIsXHJcbiAgICAgICAgZGlzYWJsZWQ6IHRydWVcclxuICAgIH0sXHJcbl07XHJcblxyXG4vLyBSQURJTyBPUFRJT05TXHJcbi8vIERlZmF1bHQgQ0hFQ0tFRDogZmlsRXh0ZW5zaW9uc01vZGVsWzBdXHJcbmNvbnN0IGZpbEV4dGVuc2lvbnNNb2RlbCA9IFtcclxuICAgIHtcclxuICAgICAgICBodG1sTGFiZWw6IFwianBlZ1wiLFxyXG4gICAgICAgIHRleHQ6IFwiSlBFR1wiXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICAgIGh0bWxMYWJlbDogXCJwbmdcIixcclxuICAgICAgICB0ZXh0OiBcIlBOR1wiXHJcbiAgICB9XHJcbl07XHJcblxyXG4vLyBSQURJTyBPUFRJT05TXHJcbi8vIERlZmF1bHQgQ0hFQ0tFRDogc3F1YXNoTGV2ZWxNb2RlbFswXVxyXG5jb25zdCBzcXVhc2hMZXZlbE1vZGVsID0gW1xyXG4gICAge1xyXG4gICAgICAgIGh0bWxMYWJlbDogXCJub25lXCIsXHJcbiAgICAgICAgcGl4ZWxWYWx1ZTogMCxcclxuICAgICAgICB0ZXh0OiBcIm5vbmVcIlxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgICBodG1sTGFiZWw6IFwiNDAwXCIsXHJcbiAgICAgICAgcGl4ZWxWYWx1ZTogNDAwLFxyXG4gICAgICAgIHRleHQ6IFwiNDAwIHdpZHRoIHBpeGVsc1wiXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICAgIGh0bWxMYWJlbDogXCI1MDBcIixcclxuICAgICAgICBwaXhlbFZhbHVlOiA1MDAsXHJcbiAgICAgICAgdGV4dDogXCI1MDAgd2lkdGggcGl4ZWxzXCJcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgICAgaHRtbExhYmVsOiBcIjYwMFwiLFxyXG4gICAgICAgIHBpeGVsVmFsdWU6IDYwMCxcclxuICAgICAgICB0ZXh0OiBcIjYwMCB3aWR0aCBwaXhlbHNcIlxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgICBodG1sTGFiZWw6IFwiNzAwXCIsXHJcbiAgICAgICAgcGl4ZWxWYWx1ZTogNzAwLFxyXG4gICAgICAgIHRleHQ6IFwiNzAwIHdpZHRoIHBpeGVsc1wiXHJcbiAgICB9XHJcbl1cclxuXHJcbi8vIEFjY2VwdGVkIGZpbGUgdHlwZXNcclxuY29uc3QgZmlsZVR5cGVzID0gW1xyXG4gICAgJ2ltYWdlL2pwZWcnLFxyXG4gICAgJ2ltYWdlL2pwZycsXHJcbiAgICAnaW1hZ2UvcG5nJyxcclxuXTtcclxuXHJcbmZ1bmN0aW9uIHZhbGlkRmlsZVR5cGUoZmlsZSkge1xyXG4gICAgcmV0dXJuIGZpbGVUeXBlcy5pbmNsdWRlcyhmaWxlKTtcclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRm9ybSBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XHJcbiAgICBjb25zdHJ1Y3Rvcihwcm9wcykge1xyXG4gICAgICAgIHN1cGVyKHByb3BzKTtcclxuXHJcbiAgICAgICAgdGhpcy5zdGF0ZSA9IHtcclxuICAgICAgICAgICAgLy8gIyBTVFlMRVMgRVZFTlRcclxuICAgICAgICAgICAgLy8gRVZFTlQ6IG9uRHJhZ092ZXJcclxuICAgICAgICAgICAgaXNEcmFnT3ZlcjogZmFsc2UsXHJcbiAgICAgICAgICAgIGRyb3B6b25lQm9yZGVyc0NsYXNzOiB7XHJcbiAgICAgICAgICAgICAgICBoaWdobGlnaHQ6IFwiZHJvcHpvbmUgZHJvcHpvbmUtLW92ZXJcIixcclxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6IFwiZHJvcHpvbmVcIlxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBpbnB1dERhdGFBdmFpbGFibGU6IGZhbHNlLFxyXG4gICAgICAgICAgICAvLyBFVkVOVDogb25DbGlja1xyXG4gICAgICAgICAgICAvLyBcIkJlZ2luIFNsaWNlIVwiIGJ1dHRvblxyXG4gICAgICAgICAgICBzbGljZVRleHQ6IFwic2xpY2UtYnRuXCIsXHJcbiAgICAgICAgICAgIC8vIEVWRU5UOiBjb25kaXRpb25hbFxyXG4gICAgICAgICAgICAvLyBkaXYgY2xhc3MgXCJwcmV2aWV3LXdyYXBwZXJcIlxyXG4gICAgICAgICAgICBwcmV2aWV3V3JhcHBlckNsYXNzOiB7XHJcbiAgICAgICAgICAgICAgICB2aXNpYmxlOiBcInByZXZpZXctd3JhcHBlclwiLFxyXG4gICAgICAgICAgICAgICAgaW52aXNpYmxlOiBcInByZXZpZXctd3JhcHBlciBoaWRkZW5cIlxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAvLyAjIEFMRVJUIE1FU1NBR0VTIEFORCBTVEFURVxyXG4gICAgICAgICAgICAvLyBTdWNjZXNzXHJcbiAgICAgICAgICAgIGlzQWxlcnRNZXNzYWdlU3VjY2VzczogZmFsc2UsXHJcbiAgICAgICAgICAgIGFsZXJ0TWVzc2FnZVN1Y2Nlc3M6IFwiXCIsXHJcbiAgICAgICAgICAgIC8vIEVycm9yXHJcbiAgICAgICAgICAgIGlzQWxlcnRNZXNzYWdlRXJyb3I6IGZhbHNlLFxyXG4gICAgICAgICAgICBhbGVydE1lc3NhZ2VFcnJvcjogXCJcIixcclxuICAgICAgICAgICAgLy8gV2FybmluZ1xyXG4gICAgICAgICAgICBpc0FsZXJ0TWVzc2FnZVdhcm5pbmc6IGZhbHNlLFxyXG4gICAgICAgICAgICBhbGVydE1lc3NhZ2VXYXJuaW5nOiBcIlwiLFxyXG4gICAgICAgICAgICAvLyBFcnJvciBvbiBcIkJlZ2luIFNsaWNlIVwiXHJcbiAgICAgICAgICAgIGlzQWxlcnRNZXNzYWdlRXJyb3JPbkJlZ2luU2xpY2VCdG46IGZhbHNlLFxyXG4gICAgICAgICAgICBhbGVydE1lc3NhZ2VFcnJvck9uQmVnaW5TbGljZUJ0bjogXCJcIixcclxuICAgICAgICAgICAgLy8gU3VjY2VzcyBvbiBcIkJlZ2luIFNsaWNlIVwiXHJcbiAgICAgICAgICAgIGlzQWxlcnRNZXNzYWdlU3VjY2Vzc09uQmVnaW5TbGljZUJ0bjogZmFsc2UsXHJcbiAgICAgICAgICAgIGFsZXJ0TWVzc2FnZVN1Y2Nlc3NPbkJlZ2luU2xpY2VCdG46IFwiXCIsXHJcbiAgICAgICAgICAgIC8vIEVycm9yIG9uIG5vbmUgd2ViY29taWMgcGxhdGZvcm0gc2VsZWN0ZWRcclxuICAgICAgICAgICAgaXNBbGVydE1lc3NhZ2VFcnJvck9uU2VsZWN0Rm9ybTogZmFsc2UsXHJcbiAgICAgICAgICAgIGFsZXJ0TWVzc2FnZUVycm9yT25TZWxlY3RGb3JtOiBcIlwiLFxyXG5cclxuICAgICAgICAgICAgLy8gIyBEQVRBXHJcbiAgICAgICAgICAgIHByb2Nlc3NlZEZpbGVEYXRhOiBbXSxcclxuICAgICAgICAgICAgaW5wdXRGaWVsZDogW10sXHJcbiAgICAgICAgICAgIC8vIGlucHV0RmllbGQ6IFtcclxuICAgICAgICAgICAgLy8gICAgIHtcclxuICAgICAgICAgICAgLy8gICAgICAgICBmaWxlUmVhZDogWzxvYmo+XSxcclxuICAgICAgICAgICAgLy8gICAgICAgICBpZDogPG51bWJlcj5cclxuICAgICAgICAgICAgLy8gICAgICAgICBmaWxlU2l6ZTogPG51bWJlcj5cclxuICAgICAgICAgICAgLy8gICAgIH1cclxuICAgICAgICAgICAgLy8gXVxyXG4gICAgICAgICAgICB0b3RhbEZpbGVTaXplOiAwLCAvLyBCeXRlIG1lYXN1cmVtZW50XHJcbiAgICAgICAgICAgIHNlbGVjdGVkV2ViY29taWNzOiBbXSxcclxuICAgICAgICAgICAgc2VsZWN0ZWRGaWxlRXh0ZW5zaW9uOiBcImpwZWdcIiwgLy8gZGVmYXVsdCB2YWx1ZVxyXG4gICAgICAgICAgICBzZWxlY3RlZFNxdWFzaExldmVsOiBcIm5vbmVcIlxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIC8vICMgTUVUSE9EU1xyXG4gICAgICAgIHRoaXMuaGFuZGxlRHJhZyA9IHRoaXMuaGFuZGxlRHJhZy5iaW5kKHRoaXMpO1xyXG4gICAgICAgIHRoaXMuaGFuZGxlRHJhZ0xlYXZlID0gdGhpcy5oYW5kbGVEcmFnTGVhdmUuYmluZCh0aGlzKTtcclxuICAgICAgICB0aGlzLmhhbmRsZUZpbGVEcm9wID0gdGhpcy5oYW5kbGVGaWxlRHJvcC5iaW5kKHRoaXMpO1xyXG4gICAgICAgIHRoaXMucHJvY2Vzc1Jlc3VsdHMgPSB0aGlzLnByb2Nlc3NSZXN1bHRzLmJpbmQodGhpcyk7XHJcbiAgICAgICAgdGhpcy5oYW5kbGVCZWdpblNsaWNCdG4gPSB0aGlzLmhhbmRsZUJlZ2luU2xpY0J0bi5iaW5kKHRoaXMpO1xyXG4gICAgICAgIC8vIFRPR0dMRSBDTEFTU1xyXG4gICAgICAgIHRoaXMudG9nZ2xlQmVnaW5TbGljZVRleHQgPSB0aGlzLnRvZ2dsZUJlZ2luU2xpY2VUZXh0LmJpbmQodGhpcyk7XHJcbiAgICAgICAgdGhpcy5oYW5kbGVEcmFnRW5kID0gdGhpcy5oYW5kbGVEcmFnRW5kLmJpbmQodGhpcyk7XHJcbiAgICAgICAgLy8gREFUQSBNQU5BR0VNRU5UXHJcbiAgICAgICAgLy8gREVMRVRFIERhdGFcclxuICAgICAgICB0aGlzLmhhbmRsZVJlbW92ZVNlbGYgPSB0aGlzLmhhbmRsZVJlbW92ZVNlbGYuYmluZCh0aGlzKTtcclxuICAgICAgICB0aGlzLmhhbmRsZUNsaWNrVG9SZW1vdmVBbGwgPSB0aGlzLmhhbmRsZUNsaWNrVG9SZW1vdmVBbGwuYmluZCh0aGlzKTtcclxuICAgICAgICAvLyBTRVQgZmlsZSBkYXRhXHJcbiAgICAgICAgdGhpcy5zZXRGaWxlc0RhdGEgPSB0aGlzLnNldEZpbGVzRGF0YS5iaW5kKHRoaXMpO1xyXG4gICAgICAgIC8vIEdFVCB0b3RhbCBmaWxlIHNpemVcclxuICAgICAgICB0aGlzLmNoZWNrVG90YWxGaWxlU2l6ZSA9IHRoaXMuY2hlY2tUb3RhbEZpbGVTaXplLmJpbmQodGhpcyk7XHJcbiAgICAgICAgLy8gVVBMT0FEIG9uIGZpbGUgYnJvd3NlXHJcbiAgICAgICAgdGhpcy5oYW5kbGVJbnB1dENoYW5nZSA9IHRoaXMuaGFuZGxlSW5wdXRDaGFuZ2UuYmluZCh0aGlzKTtcclxuICAgICAgICB0aGlzLmhhbmRsZVNlbGVjdGVkV2ViY29taWMgPSB0aGlzLmhhbmRsZVNlbGVjdGVkV2ViY29taWMuYmluZCh0aGlzKTtcclxuICAgICAgICB0aGlzLmhhbmRsZU9wdGlvbnNGaWxlRXh0ZW5pb25zID0gdGhpcy5oYW5kbGVPcHRpb25zRmlsZUV4dGVuaW9ucy5iaW5kKHRoaXMpO1xyXG4gICAgICAgIHRoaXMuaGFuZGxlT3B0aW9uc1NxdWFzaExldmVsID0gdGhpcy5oYW5kbGVPcHRpb25zU3F1YXNoTGV2ZWwuYmluZCh0aGlzKTtcclxuICAgIH1cclxuXHJcblxyXG4gICAgLy8gPT09PT09PT09PT09PT09XHJcbiAgICAvLyAjIFJFQUNUIE1FVEhPRFNcclxuICAgIC8vID09PT09PT09PT09PT09PVxyXG4gICAgLy8gY29tcG9uZW50V2lsbFVubW91bnQoKSB7XHJcbiAgICAvLyAgICAgY29uc29sZS5sb2coXCJVTk1PVU5USU5HLi4uXCIpO1xyXG4gICAgLy8gfVxyXG5cclxuICAgIC8vIGNvbXBvbmVudERpZE1vdW50KCkge1xyXG4gICAgLy8gICAgIGNvbnNvbGUubG9nKFwiTU9VTlRJTkcuLi5cIik7XHJcbiAgICAvLyB9XHJcblxyXG4gICAgLy8gY29tcG9uZW50RGlkVXBkYXRlKCkge1xyXG4gICAgLy8gICAgIGNvbnNvbGUubG9nKFwiQ09NUE9ORU5UIFVQREFUSU5HLi4uXCIpO1xyXG4gICAgLy8gfVxyXG5cclxuXHJcbiAgICAvLyA9PT09PT09PVxyXG4gICAgLy8gIyBFVkVOVFNcclxuICAgIC8vID09PT09PT09XHJcblxyXG4gICAgLy8gZXZlbnQ6IGRyYWdcclxuICAgIGhhbmRsZURyYWcoZSkge1xyXG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xyXG5cclxuICAgICAgICB0aGlzLnNldFN0YXRlKHtcclxuICAgICAgICAgICAgaXNEcmFnT3ZlcjogdHJ1ZVxyXG4gICAgICAgIH0pXHJcbiAgICB9XHJcblxyXG4gICAgLy8gZXZlbnQ6IGRyYWdcclxuICAgIGhhbmRsZURyYWdMZWF2ZShlKSB7XHJcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdChlKTtcclxuICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xyXG5cclxuICAgICAgICB0aGlzLnNldFN0YXRlKHtcclxuICAgICAgICAgICAgaXNEcmFnT3ZlcjogZmFsc2VcclxuICAgICAgICB9KVxyXG4gICAgfVxyXG5cclxuICAgIC8vIGV2ZW50OiBkcmFnXHJcbiAgICAvLyBSZW9yZGVyIGZpbGVzXHJcbiAgICBoYW5kbGVEcmFnRW5kKHJlc3VsdCkge1xyXG4gICAgICAgIC8vIENSRUFURSBzaGFsbG93IGNvcHlcclxuICAgICAgICBjb25zdCBpdGVtcyA9IEFycmF5LmZyb20odGhpcy5zdGF0ZS5pbnB1dEZpZWxkKTtcclxuXHJcbiAgICAgICAgLy8gRVhUUkFDVCB0YXJnZXRlZCBpdGVtXHJcbiAgICAgICAgY29uc3QgW3Jlb3JkZXJlZEl0ZW1dID0gaXRlbXMuc3BsaWNlKHJlc3VsdC5zb3VyY2UuaW5kZXgsIDEpO1xyXG5cclxuICAgICAgICAvLyBQVVNIIHRhcmdldGVkIGl0ZW0gaW50byBuZXcgb3JkZXJcclxuICAgICAgICBpdGVtcy5zcGxpY2UocmVzdWx0LmRlc3RpbmF0aW9uLmluZGV4LCAwLCByZW9yZGVyZWRJdGVtKTtcclxuXHJcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XHJcbiAgICAgICAgICAgIGlucHV0RmllbGQ6IGl0ZW1zXHJcbiAgICAgICAgfSlcclxuICAgIH1cclxuXHJcbiAgICAvLyBldmVudDogY2xpY2tcclxuICAgIC8vIE9wZW4gYnJvd3NlciBmb3IgZmlsZXNcclxuICAgIGhhbmRsZUNsaWNrVG9VcGxvYWQoKSB7XHJcbiAgICAgICAgY29uc3QgZHJvcHpvbmVJbnB1dCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuZHJvcHpvbmVfX2lucHV0XCIpO1xyXG5cclxuICAgICAgICAvLyBFTVVMQVRFIEhUTUwgaW5wdXQgQ0xJQ0sgZXZlbnRcclxuICAgICAgICBkcm9wem9uZUlucHV0LmNsaWNrKCk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gZXZlbnQ6IGNsaWNrXHJcbiAgICAvLyBVUERBVEUgc3RhdGUgJ3NlbGVjdGVkRmlsZUV4dGVuc2lvbidcclxuICAgIGhhbmRsZU9wdGlvbnNGaWxlRXh0ZW5pb25zKGUpIHtcclxuICAgICAgICBjb25zdCBuZXdTZWxlY3RlZEZpbGVFeHRlbnNpb24gPSBlLnRhcmdldC52YWx1ZTtcclxuXHJcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XHJcbiAgICAgICAgICAgIHNlbGVjdGVkRmlsZUV4dGVuc2lvbjogbmV3U2VsZWN0ZWRGaWxlRXh0ZW5zaW9uXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gZXZlbnQ6IGNsaWNrXHJcbiAgICAvLyBVUERBVEUgc3RhdGUgJ3NlbGVjdGVkU3F1YXNoTGV2ZWwnXHJcbiAgICBoYW5kbGVPcHRpb25zU3F1YXNoTGV2ZWwoZSkge1xyXG4gICAgICAgIGNvbnN0IG5ld1NlbGVjdGVkU3F1YXNoTGV2ZWwgPSBwYXJzZUludChlLnRhcmdldC52YWx1ZSwgMTApO1xyXG5cclxuICAgICAgICBpZiAobmV3U2VsZWN0ZWRTcXVhc2hMZXZlbCA9PSAwKSB7XHJcbiAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoe1xyXG4gICAgICAgICAgICAgICAgc2VsZWN0ZWRTcXVhc2hMZXZlbDogXCJub25lXCJcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XHJcbiAgICAgICAgICAgICAgICBzZWxlY3RlZFNxdWFzaExldmVsOiBuZXdTZWxlY3RlZFNxdWFzaExldmVsXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvLyBldmVudDogY2xpY2tcclxuICAgIC8vIFwiQmVnaW4gU2xpY2UhXCIgYnV0dG9uXHJcbiAgICBoYW5kbGVCZWdpblNsaWNCdG4oZSkge1xyXG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuXHJcbiAgICAgICAgaWYgKHRoaXMuc3RhdGUuaW5wdXRGaWVsZC5sZW5ndGggPT09IDApIHtcclxuICAgICAgICAgICAgLy8gQUxFUlQgTUVTU0FHRVxyXG4gICAgICAgICAgICAvLyBObyBkYXRhIChvciBpbWFnZSBmaWxlKSBmb3VuZFxyXG4gICAgICAgICAgICB0aGlzLnNldFN0YXRlKHtcclxuICAgICAgICAgICAgICAgIGlzQWxlcnRNZXNzYWdlRXJyb3JPbkJlZ2luU2xpY2VCdG46IHRydWUsXHJcbiAgICAgICAgICAgICAgICBhbGVydE1lc3NhZ2VFcnJvck9uQmVnaW5TbGljZUJ0bjogYWxlcnRNZXNzYWdlcy5vbkVycm9yLm5vRmlsZXNGb3VuZFxyXG4gICAgICAgICAgICB9KVxyXG5cclxuICAgICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNldFN0YXRlKHtcclxuICAgICAgICAgICAgICAgICAgICBpc0FsZXJ0TWVzc2FnZUVycm9yT25CZWdpblNsaWNlQnRuOiBmYWxzZSxcclxuICAgICAgICAgICAgICAgICAgICBhbGVydE1lc3NhZ2VFcnJvck9uQmVnaW5TbGljZUJ0bjogXCJcIixcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9LCA4MDAwKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5zdGF0ZS5zZWxlY3RlZFdlYmNvbWljcy5sZW5ndGggPT09IDApIHtcclxuICAgICAgICAgICAgICAgIC8vIEFMRVJUIE1FU1NBR0UgKFBFUlNJU1QpXHJcbiAgICAgICAgICAgICAgICAvLyBObyB3ZWJjb21pYyBwbGF0Zm9ybSBzZWxlY3RlZFxyXG4gICAgICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XHJcbiAgICAgICAgICAgICAgICAgICAgaXNBbGVydE1lc3NhZ2VFcnJvck9uQmVnaW5TbGljZUJ0bjogdHJ1ZSxcclxuICAgICAgICAgICAgICAgICAgICBhbGVydE1lc3NhZ2VFcnJvck9uQmVnaW5TbGljZUJ0bjogYWxlcnRNZXNzYWdlcy5vbkVycm9yLnNlbGVjdEZvcm1NYW5kYXRvcnksXHJcbiAgICAgICAgICAgICAgICAgICAgaXNBbGVydE1lc3NhZ2VFcnJvck9uU2VsZWN0Rm9ybTogdHJ1ZSxcclxuICAgICAgICAgICAgICAgICAgICBhbGVydE1lc3NhZ2VFcnJvck9uU2VsZWN0Rm9ybTogYWxlcnRNZXNzYWdlcy5vbkVycm9yLnNlbGVjdEZvcm1NYW5kYXRvcnlUYXJnZXRcclxuICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAvLyBBTEVSVCBNRVNTQUdFIChQRVJTSVNUIC0+IFJFTU9WRUQpXHJcbiAgICAgICAgICAgICAgICB0aGlzLnNldFN0YXRlKHtcclxuICAgICAgICAgICAgICAgICAgICBpc0FsZXJ0TWVzc2FnZUVycm9yT25CZWdpblNsaWNlQnRuOiBmYWxzZSxcclxuICAgICAgICAgICAgICAgICAgICBhbGVydE1lc3NhZ2VFcnJvck9uQmVnaW5TbGljZUJ0bjogXCJcIixcclxuICAgICAgICAgICAgICAgICAgICBpc0FsZXJ0TWVzc2FnZUVycm9yT25TZWxlY3RGb3JtOiBmYWxzZSxcclxuICAgICAgICAgICAgICAgICAgICBhbGVydE1lc3NhZ2VFcnJvck9uU2VsZWN0Rm9ybTogXCJcIixcclxuICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgICAgIHRoaXMucHJvY2Vzc1Jlc3VsdHMoKTtcclxuXHJcbiAgICAgICAgICAgICAgICAvLyBBTklNQVRJT05cclxuICAgICAgICAgICAgICAgIHRoaXMudG9nZ2xlQmVnaW5TbGljZVRleHQoKTtcclxuXHJcbiAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnRvZ2dsZUJlZ2luU2xpY2VUZXh0KCk7XHJcbiAgICAgICAgICAgICAgICB9LCAxNTAwKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvLyBldmVudDogY2xpY2tcclxuICAgIC8vIFwiWFwiIGJ1dHRvblxyXG4gICAgLy8gUkVNT1ZFIGN1cnJlbnQgdGh1bWIgVUlcclxuICAgIC8vIFJFTU9WRSBjdXJyZW50IHRodW1iIGRhdGFcclxuICAgIGhhbmRsZVJlbW92ZVNlbGYoZSkge1xyXG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuXHJcbiAgICAgICAgLy8gR1JBQiBhbGwgbGlzdFxyXG4gICAgICAgIGNvbnN0IHNvdXJjZVRodW1ibmFpbHMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiLnByZXZpZXdfX3RodW1ibmFpbC1jb250YWluZXJcIik7XHJcblxyXG4gICAgICAgIC8vIFRSQU5TRk9STSBub2RlIGludG8gSmF2YVNjcmlwdCBvYmplY3RzIChhcnJheSlcclxuICAgICAgICBjb25zdCBhcnJUaHVtYm5haWxzID0gQXJyYXkuZnJvbShzb3VyY2VUaHVtYm5haWxzKTtcclxuXHJcbiAgICAgICAgLy8gQ1JFQVRFIHNoYWxsb3cgY29weVxyXG4gICAgICAgIGNvbnN0IGl0ZW1zID0gQXJyYXkuZnJvbSh0aGlzLnN0YXRlLmlucHV0RmllbGQpO1xyXG5cclxuICAgICAgICAvLyBHRVQgaW5kZXggb2YgdGFyZ2V0ZWQgaXRlbVxyXG4gICAgICAgIGNvbnN0IHJlbW92ZUl0ZW1JbmRleCA9IGFyclRodW1ibmFpbHMuaW5kZXhPZihlLnRhcmdldC5wYXJlbnRFbGVtZW50KTtcclxuXHJcbiAgICAgICAgLy8gVVBEQVRFIHN0YXRlIHRvdGFsRmlsZVNpemVcclxuICAgICAgICB0aGlzLnNldFN0YXRlKChjdXJyZW50U3RhdGUpID0+IHtcclxuXHJcbiAgICAgICAgICAgIC8vIEdFVCBkYXRhXHJcbiAgICAgICAgICAgIGNvbnN0IHNvdXJjZUlucHV0RmllbGQgPSBBcnJheS5mcm9tKGN1cnJlbnRTdGF0ZS5pbnB1dEZpZWxkKTtcclxuXHJcbiAgICAgICAgICAgIC8vIEdFVCBkYXRhICdmaWxlU2l6ZSdcclxuICAgICAgICAgICAgY29uc3QgZmlsZVNpemVzQXJyID0gc291cmNlSW5wdXRGaWVsZC5tYXAoKGZpbGUpID0+IHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBmaWxlLmZpbGVTaXplO1xyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIC8vIFNVTSBhbGwgZGF0YSAnZmlsZVNpemUnXHJcbiAgICAgICAgICAgIGNvbnN0IHRvdGFsRmlsZUJ5dGUgPSBmaWxlU2l6ZXNBcnIucmVkdWNlKChhY2N1bXVsYXRvciwgY3VycmVudFZhbHVlKSA9PiBhY2N1bXVsYXRvciArIGN1cnJlbnRWYWx1ZSk7XHJcblxyXG4gICAgICAgICAgICAvLyBFWFRSQUNUIHRhcmdldGVkIGl0ZW0gJ2ZpbGVTaXplJ1xyXG4gICAgICAgICAgICBjb25zdCByZW1vdmVkSXRlbUZpbGVTaXplID0gc291cmNlSW5wdXRGaWVsZFtyZW1vdmVJdGVtSW5kZXhdW1wiZmlsZVNpemVcIl07XHJcblxyXG4gICAgICAgICAgICAvLyBTVUJUUkFDVCAndG90YWxGaWxlU2l6ZScgLSB0YXJnZXRlZCBpdGVtICdmaWxlU2l6ZSdcclxuICAgICAgICAgICAgY29uc3QgbmV3VG90YWxGaWxlU2l6ZSA9IHRvdGFsRmlsZUJ5dGUgLSByZW1vdmVkSXRlbUZpbGVTaXplO1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuICh7XHJcbiAgICAgICAgICAgICAgICB0b3RhbEZpbGVTaXplOiBuZXdUb3RhbEZpbGVTaXplXHJcbiAgICAgICAgICAgIH0pXHJcblxyXG4gICAgICAgICAgICAvLyBVUERBVEUgVUlcclxuICAgICAgICB9LCB0aGlzLmNoZWNrVG90YWxGaWxlU2l6ZSgpKTtcclxuXHJcbiAgICAgICAgLy8gUkVNT1ZFIHRhcmdldGVkIGl0ZW1cclxuICAgICAgICBpdGVtcy5zcGxpY2UocmVtb3ZlSXRlbUluZGV4LCAxKTtcclxuXHJcblxyXG4gICAgICAgIC8vIFVQREFURSBkYXRhXHJcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XHJcbiAgICAgICAgICAgIGlucHV0RmllbGQ6IGl0ZW1zXHJcbiAgICAgICAgfSlcclxuICAgIH1cclxuXHJcblxyXG4gICAgLy8gZXZlbnQ6IGNsaWNrXHJcbiAgICAvLyBFTVBUWSBzdGF0ZSBcImlucHV0RmllbGRcIlxyXG4gICAgLy8gXCJDbGVhciBGaWxlc1wiIGJ1dHRvblxyXG4gICAgaGFuZGxlQ2xpY2tUb1JlbW92ZUFsbCgpIHtcclxuICAgICAgICAvLyBBTEVSVCBNRVNTQUdFXHJcbiAgICAgICAgLy8gVVBEQVRFIGRhdGFcclxuICAgICAgICB0aGlzLnNldFN0YXRlKHtcclxuICAgICAgICAgICAgaW5wdXRGaWVsZDogW10sXHJcbiAgICAgICAgICAgIGlucHV0RGF0YUF2YWlsYWJsZTogZmFsc2UsXHJcbiAgICAgICAgICAgIGlzQWxlcnRNZXNzYWdlU3VjY2VzczogdHJ1ZSxcclxuICAgICAgICAgICAgYWxlcnRNZXNzYWdlU3VjY2VzczogYWxlcnRNZXNzYWdlcy5vblN1Y2Nlc3MuZmlsZXNSZW1vdmVkXHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLnNldFN0YXRlKHtcclxuICAgICAgICAgICAgICAgIGlzQWxlcnRNZXNzYWdlU3VjY2VzczogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICBhbGVydE1lc3NhZ2VTdWNjZXNzOiBcIlwiXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0sIDgwMDApO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIGV2ZW50OiBjaGFuZ2VcclxuICAgIC8vIExJU3RFTiB0byB1c2VyIG9uIENMSUNLIHRvIHVwbG9hZCBmaWxlXHJcbiAgICAvLyBpZiB1c2VyIHNlbGVjdHMgZmlsZShzKSwgcHJvY2VlZCB0byBwcm9jZXNzIGltYWdlIGZpbGVzIG1ldGhvZHNcclxuICAgIGhhbmRsZUlucHV0Q2hhbmdlKGUpIHtcclxuICAgICAgICBjb25zdCBmaWxlcyA9IGUudGFyZ2V0LmZpbGVzO1xyXG4gICAgICAgIHRoaXMuc2V0RmlsZXNEYXRhKGZpbGVzKTtcclxuXHJcbiAgICAgICAgLy8gVVBEQVRFIFVJIG9uIENPTkRJVElPTlxyXG4gICAgICAgIGlmICh0aGlzLnN0YXRlLmlucHV0RmllbGQpIHtcclxuICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XHJcbiAgICAgICAgICAgICAgICBpbnB1dERhdGFBdmFpbGFibGU6IHRydWVcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLy8gZXZlbnQ6IGNsaWNrXHJcbiAgICAvLyBVUERBVEUgc3RhdGUgJ3NlbGVjdGVkV2ViY29taWNzJ1xyXG4gICAgaGFuZGxlU2VsZWN0ZWRXZWJjb21pYyhlKSB7XHJcbiAgICAgICAgY29uc3Qgc2VsZWN0ZWRXZWJjb21pY1ZhbHVlID0gZS50YXJnZXQudmFsdWU7XHJcblxyXG4gICAgICAgIGNvbnN0IGN1cnJlbnRTZWxlY3RlZFdlYmNvbWljcyA9IHRoaXMuc3RhdGUuc2VsZWN0ZWRXZWJjb21pY3M7XHJcblxyXG4gICAgICAgIGlmIChjdXJyZW50U2VsZWN0ZWRXZWJjb21pY3MuaW5jbHVkZXMoc2VsZWN0ZWRXZWJjb21pY1ZhbHVlKSkge1xyXG4gICAgICAgICAgICAvLyBVTkNIRUNLXHJcbiAgICAgICAgICAgIGNvbnN0IHJlbW92ZUl0ZW1JbmRleCA9IGN1cnJlbnRTZWxlY3RlZFdlYmNvbWljcy5pbmRleE9mKHNlbGVjdGVkV2ViY29taWNWYWx1ZSk7XHJcbiAgICAgICAgICAgIGN1cnJlbnRTZWxlY3RlZFdlYmNvbWljcy5zcGxpY2UocmVtb3ZlSXRlbUluZGV4LCAxKTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoe1xyXG4gICAgICAgICAgICAgICAgc2VsZWN0ZWRXZWJjb21pY3M6IGN1cnJlbnRTZWxlY3RlZFdlYmNvbWljc1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAvLyBDSEVDS1xyXG4gICAgICAgICAgICB0aGlzLnNldFN0YXRlKChjdXJyZW50U3RhdGUpID0+ICh7XHJcbiAgICAgICAgICAgICAgICBzZWxlY3RlZFdlYmNvbWljczogWy4uLmN1cnJlbnRTdGF0ZS5zZWxlY3RlZFdlYmNvbWljcywgc2VsZWN0ZWRXZWJjb21pY1ZhbHVlXVxyXG5cclxuICAgICAgICAgICAgfSkpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcblxyXG4gICAgLy8gPT09PT09PT09XHJcbiAgICAvLyAjIE1FVEhPRFNcclxuICAgIC8vID09PT09PT09PVxyXG5cclxuICAgIC8vIFRPR0dMRVxyXG4gICAgLy8gXCJCZWdpbiBTbGljZVwiIFRleHRcclxuICAgIHRvZ2dsZUJlZ2luU2xpY2VUZXh0KCkge1xyXG4gICAgICAgIGlmICh0aGlzLnN0YXRlLnNsaWNlVGV4dCA9PT0gXCJzbGljZS1idG5cIikge1xyXG5cclxuICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XHJcbiAgICAgICAgICAgICAgICBzbGljZVRleHQ6IFwiaWNvbi1zcGlubmVyOCBhbmltYXRlLXNwaW5cIlxyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5zdGF0ZS5zbGljZVRleHQgPT09IFwiaWNvbi1zcGlubmVyOCBhbmltYXRlLXNwaW5cIikge1xyXG5cclxuICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XHJcbiAgICAgICAgICAgICAgICBzbGljZVRleHQ6IFwic2xpY2UtYnRuXCJcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLy8gRkVUQ0hJTkcgRklMRSBSRUFEXHJcbiAgICAvLyAtIFZBTElEQVRFIGZpbGUgb24gdXBsb2FkXHJcbiAgICAvLyAtIFVQREFURSBzdGF0ZSBcImlucHV0RmllbGRcIlxyXG4gICAgLy8gLSBUT0dHTEUgY2xhc3NcclxuICAgIGhhbmRsZUZpbGVEcm9wKGUpIHtcclxuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcclxuXHJcbiAgICAgICAgY29uc3QgZmlsZXMgPSBlLmRhdGFUcmFuc2Zlci5maWxlcztcclxuXHJcbiAgICAgICAgdGhpcy5zZXRGaWxlc0RhdGEoZmlsZXMpO1xyXG5cclxuICAgICAgICAvLyBVUERBVEUgZGF0YSBib29sZWFuIChmb3Igb3RoZXIgY2hhaW4gcmVhY3Rpb25zKVxyXG4gICAgICAgIGlmICh0aGlzLnN0YXRlLmlucHV0RmllbGQpIHtcclxuICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XHJcbiAgICAgICAgICAgICAgICBpbnB1dERhdGFBdmFpbGFibGU6IHRydWVcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuc2V0U3RhdGUoe1xyXG4gICAgICAgICAgICBpc0RyYWdPdmVyOiBmYWxzZVxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIHNldEZpbGVzRGF0YShmaWxlcykge1xyXG4gICAgICAgIE9iamVjdC52YWx1ZXMoZmlsZXMpLmZvckVhY2goKG9iaikgPT4ge1xyXG5cclxuICAgICAgICAgICAgLy8gVkFMSURBVEVcclxuICAgICAgICAgICAgaWYgKCF2YWxpZEZpbGVUeXBlKG9iai50eXBlKSkge1xyXG5cclxuICAgICAgICAgICAgICAgIC8vIEFMRVJUIE1FU1NBR0VcclxuICAgICAgICAgICAgICAgIC8vIFVzZXIgYXR0ZW1wdGVkIHRvIHVwbG9hZCB1bmFjY2VwdGFibGUgZmlsZXNcclxuICAgICAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoe1xyXG4gICAgICAgICAgICAgICAgICAgIGFsZXJ0TWVzc2FnZUVycm9yOiBhbGVydE1lc3NhZ2VzLm9uRXJyb3IudW5hY2NlcHRhYmxlRmlsZVR5cGUsXHJcbiAgICAgICAgICAgICAgICAgICAgaXNBbGVydE1lc3NhZ2VFcnJvcjogdHJ1ZVxyXG4gICAgICAgICAgICAgICAgfSlcclxuXHJcbiAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnNldFN0YXRlKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYWxlcnRNZXNzYWdlRXJyb3I6IFwiXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlzQWxlcnRNZXNzYWdlRXJyb3I6IGZhbHNlXHJcbiAgICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgIH0sIDgwMDApO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG5cclxuICAgICAgICAgICAgICAgIC8vIENSRUFURSBpbWFnZSBmaWxlIGRhdGEgcHJldmlldyBjb250YWluZXJcclxuICAgICAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoKGN1cnJlbnRTdGF0ZSkgPT4gKHtcclxuICAgICAgICAgICAgICAgICAgICBpbnB1dEZpZWxkOiBbXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC4uLmN1cnJlbnRTdGF0ZS5pbnB1dEZpZWxkLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWxlUmVhZDogb2JqLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWQ6IGNyZWF0ZUlkKCksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWxlU2l6ZTogb2JqLnNpemVcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIF1cclxuICAgICAgICAgICAgICAgIH0pKVxyXG5cclxuICAgICAgICAgICAgICAgIC8vIFVQREFURSBzdGF0ZSAndG90YWxGaWxlU2l6ZSdcclxuICAgICAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoKGN1cnJlbnRTdGF0ZSkgPT4ge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAvLyBHRVQgbWFpbiBkYXRhXHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgc291cmNlSW5wdXRGaWVsZCA9IGN1cnJlbnRTdGF0ZS5pbnB1dEZpZWxkO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAvLyBHRVQgbWFpbiBkYXRhICdmaWxlU2l6ZSdcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBmaWxlU2l6ZXNBcnIgPSBzb3VyY2VJbnB1dEZpZWxkLm1hcCgoZmlsZSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmlsZS5maWxlU2l6ZTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gVE9UQUwgbWFpbiBkYXRhICdmaWxlU2l6ZSdcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCB0b3RhbEZpbGVCeXRlID0gZmlsZVNpemVzQXJyLnJlZHVjZSgoYWNjdW11bGF0b3IsIGN1cnJlbnRWYWx1ZSkgPT4gYWNjdW11bGF0b3IgKyBjdXJyZW50VmFsdWUpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdG90YWxGaWxlU2l6ZTogdG90YWxGaWxlQnl0ZVxyXG4gICAgICAgICAgICAgICAgICAgIH0pXHJcblxyXG4gICAgICAgICAgICAgICAgICAgIC8vIENIRUNLIENPTkRJVElPTlxyXG4gICAgICAgICAgICAgICAgfSwgdGhpcy5jaGVja1RvdGFsRmlsZVNpemUoKSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KVxyXG4gICAgfVxyXG5cclxuICAgIC8vIENIRUNLIENPTkRJVElPTlxyXG4gICAgLy8gVVBEQVRFIFVJIGlmIENPTkRJVElPTiBhcmUgbWV0XHJcbiAgICBjaGVja1RvdGFsRmlsZVNpemUoKSB7XHJcblxyXG4gICAgICAgIC8vIEFMRVJUIE1FU1NBR0VcclxuICAgICAgICAvLyBDT05ESVRJT05cclxuICAgICAgICAvLyBuZWFyIG1heCwgcGFzcyAxOE1CXHJcbiAgICAgICAgaWYgKHRoaXMuc3RhdGUudG90YWxGaWxlU2l6ZSA+PSAxODg3NDM2OCkge1xyXG4gICAgICAgICAgICB0aGlzLnNldFN0YXRlKHtcclxuICAgICAgICAgICAgICAgIGlzQWxlcnRNZXNzYWdlV2FybmluZzogdHJ1ZSxcclxuICAgICAgICAgICAgICAgIGFsZXJ0TWVzc2FnZVdhcm5pbmc6IGFsZXJ0TWVzc2FnZXMub25XYXJuaW5nLm5lYXJNYXhGaWxlU2l6ZVxyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gQUxFUlQgTUVTU0FHRVxyXG4gICAgICAgIC8vIENPTkRJVElPTlxyXG4gICAgICAgIC8vIG92ZXIgbWF4LCBwYXNzIDIwTUJcclxuICAgICAgICBpZiAodGhpcy5zdGF0ZS50b3RhbEZpbGVTaXplID49IDIwOTcxNTIwKSB7XHJcbiAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoe1xyXG4gICAgICAgICAgICAgICAgaXNBbGVydE1lc3NhZ2VFcnJvcjogdHJ1ZSxcclxuICAgICAgICAgICAgICAgIGFsZXJ0TWVzc2FnZUVycm9yOiBhbGVydE1lc3NhZ2VzLm9uRXJyb3Iub3Zlck1heEZpbGVTaXplXHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8vIFBST0NFU1MgSU1BR0UgRklMRVNcclxuICAgIHByb2Nlc3NSZXN1bHRzKCkge1xyXG4gICAgICAgIC8vIEdFVCBhbGwgaW1hZ2UgZmlsZSBlbGVtZW50c1xyXG4gICAgICAgIGNvbnN0IHNvdXJjZUltYWdlc1JhdyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCIucHJldmlld19fdGh1bWJuYWlsIGltZ1wiKTtcclxuICAgICAgICAvLyBSRUZFUkVOQ0UgdGhlIGNhbnZhc1xyXG4gICAgICAgIGNvbnN0IGNhbnZhcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjY2FudmFzXCIpO1xyXG4gICAgICAgIGNvbnN0IGNvbnRleHQgPSBjYW52YXMuZ2V0Q29udGV4dChcIjJkXCIpO1xyXG5cclxuICAgICAgICAvLyBUUkFOU0ZPUk0gbm9kZSBpbnRvIEphdmFTY3JpcHQgb2JqZWN0cyAoYXJyYXkpXHJcbiAgICAgICAgY29uc3Qgc291cmNlSW1hZ2VzID0gQXJyYXkuZnJvbShzb3VyY2VJbWFnZXNSYXcpO1xyXG5cclxuICAgICAgICAvLyBHRVQgdXNlciBzZWxlY3RlZCB3ZWJjb21pYyBwbGF0Zm9ybShzKSBmcm9tIFNFTEVDVCBmb3JtIGNvbXBvbmVudFxyXG4gICAgICAgIGNvbnN0IFNlbGVjdGVkd2ViY29taWNzID0gdGhpcy5zdGF0ZS5zZWxlY3RlZFdlYmNvbWljcztcclxuXHJcbiAgICAgICAgLy8gIyAoMSkgU0VMRUNUIGZvcm1cclxuICAgICAgICAvLyBQUk9DRVNTIGZpbGVzIGZvciBhbGwgc2VsZWN0ZWQgd2ViY29taWMgcGxhdGZvcm0gYXBwbGllZFxyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgU2VsZWN0ZWR3ZWJjb21pY3MubGVuZ3RoOyBpKyspIHtcclxuXHJcbiAgICAgICAgICAgIGxldCBwcm9jZXNzSW1hZ2VzID0gW107XHJcblxyXG4gICAgICAgICAgICAvLyBQUk9DRVNTIGltYWdlIGZpbGVcclxuICAgICAgICAgICAgc291cmNlSW1hZ2VzLmZvckVhY2goKGltZykgPT4ge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgaW1nV2lkdGggPSBpbWcubmF0dXJhbFdpZHRoO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgaW1nSGVpZ2h0ID0gaW1nLm5hdHVyYWxIZWlnaHQ7XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gKiBDT05ESVRJT046IGltYWdlIHdpZHRoID4gaW1hZ2UgaGVpZ2h0XHJcbiAgICAgICAgICAgICAgICAvLyBST1RBVEUgaW1hZ2VcclxuICAgICAgICAgICAgICAgIGlmIChpbWdXaWR0aCA+IGltZ0hlaWdodCkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIE5PVEU6XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gQm90dG9tIHN1cmZhY2Ugd291bGQgYmUgcG9pbnRlZCBsZWZ0LCBhbmRcclxuICAgICAgICAgICAgICAgICAgICAvLyBUb3Agc3VyZmFjZSB3b3VsZCBiZSBwb2ludGVkIHJpZ2h0XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGNhbnZhcy53aWR0aCA9IGltZ0hlaWdodDtcclxuICAgICAgICAgICAgICAgICAgICBjYW52YXMuaGVpZ2h0ID0gaW1nV2lkdGg7XHJcbiAgICAgICAgICAgICAgICAgICAgY29udGV4dC5yb3RhdGUoTWF0aC5QSSAvIDIpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBjb250ZXh0LmRyYXdJbWFnZShcclxuICAgICAgICAgICAgICAgICAgICAgICAgaW1nLCAwLCAtKGltZ0hlaWdodClcclxuICAgICAgICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGNvbnN0IG1heEhlaWdodCA9IGltZ0hlaWdodDtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHdpZHRoID0gaW1nV2lkdGg7XHJcblxyXG4gICAgICAgICAgICAgICAgbGV0IHNjYWxlV2lkdGg7XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gIyAoMikgT1BUSU9OUyBmb3JtIC0gXCJTUVVBU0hcIlxyXG4gICAgICAgICAgICAgICAgc3dpdGNoICh0aGlzLnN0YXRlLnNlbGVjdGVkU3F1YXNoTGV2ZWwpIHtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIFwibm9uZVwiOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzY2FsZVdpZHRoID0gd2lkdGg7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNDAwOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzY2FsZVdpZHRoID0gNDAwO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDUwMDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2NhbGVXaWR0aCA9IDUwMDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA2MDA6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNjYWxlV2lkdGggPSA2MDA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNzAwOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzY2FsZVdpZHRoID0gNzAwO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBsZXQgd2ViY29taWNNYXhXaWR0aDtcclxuICAgICAgICAgICAgICAgIGxldCB3ZWJjb21pY01heEhlaWdodDtcclxuXHJcbiAgICAgICAgICAgICAgICAvLyBUT0RPOiBGRUFUVVJFIChORVhUIFVQREFURSlcclxuICAgICAgICAgICAgICAgIC8vIEZpbmQgb3V0IG5vcm1hbCB0YXBhcyByYXRpb1xyXG4gICAgICAgICAgICAgICAgLy8gQ3VycmVudCBXZWJjb21pYyBQbGF0Zm9ybSBBdmFpbGFibGUuLi5cclxuICAgICAgICAgICAgICAgIC8vICEgdGFwYXMgaW4gdGhlIHdvcmtzLi4uIChXSVApXHJcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKFNlbGVjdGVkd2ViY29taWNzW2ldKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBcIndlYnRvb25cIjpcclxuICAgICAgICAgICAgICAgICAgICAgICAgd2ViY29taWNNYXhXaWR0aCA9IDgwMDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgd2ViY29taWNNYXhIZWlnaHQgPSAxMjgwO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIFwidGFwYXNcIjpcclxuICAgICAgICAgICAgICAgICAgICAgICAgd2ViY29taWNNYXhXaWR0aCA9IDk2MDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgd2ViY29taWNNYXhIZWlnaHQgPSAxNDQwO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBjb25zdCBhc3BlY3RSYXRpbyA9IHdlYmNvbWljTWF4V2lkdGggLyB3ZWJjb21pY01heEhlaWdodDtcclxuXHJcbiAgICAgICAgICAgICAgICAvLyBiYXNlZCBvbiBhc3BlY3QgcmF0aW8sIHdoYXQgdGhlIGhlaWdodCBzaG91bGQgYmUuLi5cclxuICAgICAgICAgICAgICAgIGNvbnN0IGRldGVybWluZWRlSGVpZ2h0ID0gd2lkdGggLyBhc3BlY3RSYXRpbztcclxuXHJcbiAgICAgICAgICAgICAgICBsZXQgc2NhbGVEZXRlcm1pbmVkZUhlaWdodCA9IGRldGVybWluZWRlSGVpZ2h0O1xyXG4gICAgICAgICAgICAgICAgaWYgKHNjYWxlV2lkdGggIT09IHdpZHRoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc2NhbGVEZXRlcm1pbmVkZUhlaWdodCA9IHNjYWxlV2lkdGggLyBhc3BlY3RSYXRpbztcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAvLyAqIENPTkRJVElPTjpcclxuICAgICAgICAgICAgICAgIC8vIElmIGZpbGUgaW1hZ2UgbmF0dXJhbEhlaWdodCBpcyBzaG9ydGVyIHRoYW4gZGV0ZXJtaW5lZEhlaWdodCxcclxuICAgICAgICAgICAgICAgIC8vIHJldHVybiBhcyBpcy4uLiB1bmxlc3MgT3B0aW9ucyBzY2FsZSBhcHBsaWVkXHJcbiAgICAgICAgICAgICAgICBpZiAoZGV0ZXJtaW5lZGVIZWlnaHQgPiBtYXhIZWlnaHQpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBzY2FsZU1heEhlaWdodCA9IHNjYWxlV2lkdGggLyAod2lkdGggLyBtYXhIZWlnaHQpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBjYW52YXMud2lkdGggPSBzY2FsZVdpZHRoO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhbnZhcy5oZWlnaHQgPSBzY2FsZU1heEhlaWdodDtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgY29udGV4dC5kcmF3SW1hZ2UoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGltZywgMCwgMCwgc2NhbGVXaWR0aCwgc2NhbGVNYXhIZWlnaHRcclxuICAgICAgICAgICAgICAgICAgICApO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBjb25zdCByZXN1bHQgPSBjYW52YXMudG9EYXRhVVJMKCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHByb2Nlc3NJbWFnZXMucHVzaChyZXN1bHQpO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgdGltZXNUb1NsaWNlID0gTWF0aC5mbG9vcihtYXhIZWlnaHQgLyBkZXRlcm1pbmVkZUhlaWdodCk7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IGN1cnJlbnRTbGljZSA9IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IG5ld1lQb3NpdGlvbiA9IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHNsaWNlZEltYWdlcyA9IFtdO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAvLyAqIENPTkRJVElPTjogTG9uZ2VyIGxlbmd0aCAoaGVpZ2h0KSBpbWFnZXNcclxuICAgICAgICAgICAgICAgICAgICB3aGlsZSAodGltZXNUb1NsaWNlID4gY3VycmVudFNsaWNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ld1lQb3NpdGlvbiA9IGRldGVybWluZWRlSGVpZ2h0ICogY3VycmVudFNsaWNlO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgY2FudmFzLndpZHRoID0gc2NhbGVXaWR0aDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2FudmFzLmhlaWdodCA9IHNjYWxlRGV0ZXJtaW5lZGVIZWlnaHQ7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250ZXh0LmRyYXdJbWFnZShcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGltZywgMCwgbmV3WVBvc2l0aW9uLCB3aWR0aCwgZGV0ZXJtaW5lZGVIZWlnaHQsIDAsIDAsIHNjYWxlV2lkdGgsIHNjYWxlRGV0ZXJtaW5lZGVIZWlnaHRcclxuICAgICAgICAgICAgICAgICAgICAgICAgKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNsaWNlZEltYWdlcy5wdXNoKGNhbnZhcy50b0RhdGFVUkwoKSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50U2xpY2UrKztcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIC8vICogQ09ORFRJT046IE9kZCBudW1iZXIgcmVtYWluaW5nXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gR0VUIGxhc3QgY29vcmRpbmF0ZVxyXG4gICAgICAgICAgICAgICAgICAgIC8vIEdFVCByZW1haW5pbmcgaGVpZ2h0XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcmVtYWluQ29vcmRpbmF0ZVkgPSB0aW1lc1RvU2xpY2UgKiBkZXRlcm1pbmVkZUhlaWdodDtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCByZW1haW5IZWlnaHQgPSBtYXhIZWlnaHQgLSByZW1haW5Db29yZGluYXRlWTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gT1BUSU9OUyBTcXVhc2ggLSBpZiBhdmFpbGFibGVcclxuICAgICAgICAgICAgICAgICAgICBsZXQgc2NhbGVSZW1haW5lSGVpZ2h0ID0gcmVtYWluSGVpZ2h0O1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChzY2FsZVdpZHRoICE9PSB3aWR0aCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzY2FsZVJlbWFpbmVIZWlnaHQgPSBzY2FsZVdpZHRoIC8gKHdpZHRoIC8gcmVtYWluSGVpZ2h0KTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChyZW1haW5IZWlnaHQgIT09IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbmV3WVBvc2l0aW9uID0gcmVtYWluQ29vcmRpbmF0ZVk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyA/IFJlZmFjdG9yIHRvIGEgZnVuY3Rpb25cclxuICAgICAgICAgICAgICAgICAgICAgICAgY2FudmFzLndpZHRoID0gc2NhbGVXaWR0aDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2FudmFzLmhlaWdodCA9IHNjYWxlUmVtYWluZUhlaWdodDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29udGV4dC5kcmF3SW1hZ2UoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbWcsIDAsIG5ld1lQb3NpdGlvbiwgd2lkdGgsIHJlbWFpbkhlaWdodCwgMCwgMCwgc2NhbGVXaWR0aCwgc2NhbGVSZW1haW5lSGVpZ2h0XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzbGljZWRJbWFnZXMucHVzaChjYW52YXMudG9EYXRhVVJMKCkpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgcHJvY2Vzc0ltYWdlcy5wdXNoKC4uLnNsaWNlZEltYWdlcyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIC8vIENSRUFURSBaaXAgZm9sZGVyXHJcbiAgICAgICAgICAgIC8vIE5BTUUgaW1hZ2VzIHdpdGggcGFkZGVkIHplcm8gaWYgdW5kZXIgMTBzXHJcbiAgICAgICAgICAgIC8vIEdFVCB1c2VyIGZpbGUgZXh0ZW5zaW9uIHByZWZlcm5jZSBmcm9tIE9wdGlvbnMgZm9ybSAtIEZpbGUgRXh0ZW5zaW9uc1xyXG4gICAgICAgICAgICAvLyBQVVNIIGltYWdlcyB0byBaaXAgZm9sZGVyXHJcbiAgICAgICAgICAgIC8vIERPV05MT0FEIHRvIHVzZXIncyBQQ1xyXG4gICAgICAgICAgICBzYXZlQW5kRG93bmxvYWRGaWxlcyh0aGlzLnN0YXRlLnNlbGVjdGVkRmlsZUV4dGVuc2lvbiwgcHJvY2Vzc0ltYWdlcywgU2VsZWN0ZWR3ZWJjb21pY3MsIGkpLnRoZW4oKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgaWYgKFNlbGVjdGVkd2ViY29taWNzLmluZGV4T2YoU2VsZWN0ZWR3ZWJjb21pY3NbaV0pID09IFNlbGVjdGVkd2ViY29taWNzLmluZGV4T2YoU2VsZWN0ZWR3ZWJjb21pY3NbU2VsZWN0ZWR3ZWJjb21pY3MubGVuZ3RoIC0gMV0pKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gQUxFUlQgTUVTU0FHRVxyXG4gICAgICAgICAgICAgICAgICAgIC8vIFByb2Nlc3MgY29tcGxldGVkXHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlzQWxlcnRNZXNzYWdlU3VjY2Vzc09uQmVnaW5TbGljZUJ0bjogdHJ1ZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgYWxlcnRNZXNzYWdlU3VjY2Vzc09uQmVnaW5TbGljZUJ0bjogYWxlcnRNZXNzYWdlcy5vblN1Y2Nlc3MuY29tcGxldGVkUHJvY2Vzc1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpc0FsZXJ0TWVzc2FnZVN1Y2Nlc3NPbkJlZ2luU2xpY2VCdG46IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYWxlcnRNZXNzYWdlU3VjY2Vzc09uQmVnaW5TbGljZUJ0bjogXCJcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSwgODAwMCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuXHJcbiAgICAgICAgICAgIC8vIEFERCBpbWFnZSAnZGF0YTonIHVybCBhcnIgb2YgcHJvY2Vzc2VkIGltYWdlIGZpbGVzXHJcbiAgICAgICAgICAgIC8vIFJFU1BPTkRTIHRvIGRpc3BsYXkgaW4gUmVzdWx0IGZvcm1cclxuICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XHJcbiAgICAgICAgICAgICAgICBwcm9jZXNzZWRGaWxlRGF0YTogcHJvY2Vzc0ltYWdlc1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcmVuZGVyKCkge1xyXG4gICAgICAgIHJldHVybiAoXHJcbiAgICAgICAgICAgIDxtYWluPlxyXG4gICAgICAgICAgICAgICAgPGgyPlN0YXJ0IEhlcmU8L2gyPlxyXG5cclxuICAgICAgICAgICAgICAgIDxTdXNwZW5zZSBmYWxsYmFjaz17PGRpdj48cD5MT0FESU5HLi4uPC9wPjwvZGl2Pn0+XHJcbiAgICAgICAgICAgICAgICAgICAgPEZvcm1VcGxvYWRcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gRVZFTlRTXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG9uSGFuZGxlRHJhZz17dGhpcy5oYW5kbGVEcmFnfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBvbkhhbmRsZURyYWdMZWF2ZT17dGhpcy5oYW5kbGVEcmFnTGVhdmV9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG9uSGFuZGxlRmlsZURyb3A9e3RoaXMuaGFuZGxlRmlsZURyb3B9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG9uUmVtb3ZlU2VsZj17dGhpcy5oYW5kbGVSZW1vdmVTZWxmfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBvbmhhbmRsZURyYWdFbmQ9e3RoaXMuaGFuZGxlRHJhZ0VuZH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgb25IYW5kbGVDbGlja1RvVXBsb2FkPXt0aGlzLmhhbmRsZUNsaWNrVG9VcGxvYWR9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG9uSGFuZGxlSW5wdXRDaGFuZ2U9e3RoaXMuaGFuZGxlSW5wdXRDaGFuZ2V9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG9uSGFuZGxlQ2xpY2tUb1JlbW92ZUFsbD17dGhpcy5oYW5kbGVDbGlja1RvUmVtb3ZlQWxsfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBTVFlMRUQgRVZFTlRTXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvZ2dsZURyb3B6b25lQm9yZGVyc0NsYXNzPXt0aGlzLnN0YXRlLmlzRHJhZ092ZXIgPyB0aGlzLnN0YXRlLmRyb3B6b25lQm9yZGVyc0NsYXNzLmhpZ2hsaWdodCA6IHRoaXMuc3RhdGUuZHJvcHpvbmVCb3JkZXJzQ2xhc3MuZGVmYXVsdH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgdG9nZ2xlUHJldmlld1dyYXBwZXJDbGFzcz17dGhpcy5zdGF0ZS5pbnB1dERhdGFBdmFpbGFibGUgPyB0aGlzLnN0YXRlLnByZXZpZXdXcmFwcGVyQ2xhc3MudmlzaWJsZSA6IHRoaXMuc3RhdGUucHJldmlld1dyYXBwZXJDbGFzcy5pbnZpc2libGV9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIEFMRVJUIE1FU1NBR0VTXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGdldEFsZXJ0RXJyb3JUZXh0PXt0aGlzLnN0YXRlLmFsZXJ0TWVzc2FnZUVycm9yfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpc0FsZXJ0TWVzc2FnZUVycm9yPXt0aGlzLnN0YXRlLmlzQWxlcnRNZXNzYWdlRXJyb3J9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGdldEFsZXJ0U3VjY2Vzc1RleHQ9e3RoaXMuc3RhdGUuYWxlcnRNZXNzYWdlU3VjY2Vzc31cclxuICAgICAgICAgICAgICAgICAgICAgICAgaXNBbGVydE1lc3NhZ2VTdWNjZXNzPXt0aGlzLnN0YXRlLmlzQWxlcnRNZXNzYWdlU3VjY2Vzc31cclxuICAgICAgICAgICAgICAgICAgICAgICAgaXNBbGVydE1lc3NhZ2VXYXJuaW5nPXt0aGlzLnN0YXRlLmlzQWxlcnRNZXNzYWdlV2FybmluZ31cclxuICAgICAgICAgICAgICAgICAgICAgICAgZ2V0QWxlcnRXYXJuaW5nVGV4dD17dGhpcy5zdGF0ZS5hbGVydE1lc3NhZ2VXYXJuaW5nfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBEQVRBU1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpbnB1dEZpZWxkPXt0aGlzLnN0YXRlLmlucHV0RmllbGR9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGdldFRvdGFsRmlsZVNpemU9e3RoaXMuc3RhdGUudG90YWxGaWxlU2l6ZX1cclxuICAgICAgICAgICAgICAgICAgICAvPlxyXG4gICAgICAgICAgICAgICAgPC9TdXNwZW5zZT5cclxuXHJcblxyXG4gICAgICAgICAgICAgICAgPFN1c3BlbnNlIGZhbGxiYWNrPXs8ZGl2PjxwPkxPQURJTkcuLi48L3A+PC9kaXY+fT5cclxuICAgICAgICAgICAgICAgICAgICA8Rm9ybVNlbGVjdFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBnZXRXZWJjb21pY3NNb2RlbD17d2ViY29taWNzTW9kZWx9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG9uSGFuZGxlU2VsZWN0ZWRXZWJjb21pYz17dGhpcy5oYW5kbGVTZWxlY3RlZFdlYmNvbWljfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpc0FsZXJ0TWVzc2FnZVNlbGVjdEZvcm1FcnJvcj17dGhpcy5zdGF0ZS5pc0FsZXJ0TWVzc2FnZUVycm9yT25TZWxlY3RGb3JtfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBnZXRBbGVydE1lc3NhZ2VTZWxlY3RGb3JtVGV4dD17dGhpcy5zdGF0ZS5hbGVydE1lc3NhZ2VFcnJvck9uU2VsZWN0Rm9ybX1cclxuICAgICAgICAgICAgICAgICAgICAvPlxyXG4gICAgICAgICAgICAgICAgPC9TdXNwZW5zZT5cclxuXHJcblxyXG4gICAgICAgICAgICAgICAgPFN1c3BlbnNlIGZhbGxiYWNrPXs8ZGl2PjxwPkxPQURJTkcuLi48L3A+PC9kaXY+fT5cclxuICAgICAgICAgICAgICAgICAgICA8Rm9ybU9wdGlvbnNcclxuICAgICAgICAgICAgICAgICAgICAgICAgZ2V0RmlsRXh0ZW5zaW9uc01vZGVsPXtmaWxFeHRlbnNpb25zTW9kZWx9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG9uSGFuZGxlT3B0aW9uc0ZpbGVFeHRlbmlvbnM9e3RoaXMuaGFuZGxlT3B0aW9uc0ZpbGVFeHRlbmlvbnN9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGdldFNxdWFzaExldmVsTW9kZWw9e3NxdWFzaExldmVsTW9kZWx9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG9uSGFuZGxlT3B0aW9uc1NxdWFzaExldmVsPXt0aGlzLmhhbmRsZU9wdGlvbnNTcXVhc2hMZXZlbH1cclxuICAgICAgICAgICAgICAgICAgICAvPlxyXG4gICAgICAgICAgICAgICAgPC9TdXNwZW5zZT5cclxuXHJcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInNsaWNlLWJ0bi1jb250YWluZXJcIj5cclxuICAgICAgICAgICAgICAgICAgICA8YVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJzbGljZS1idG5cIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBvbkNsaWNrPXt0aGlzLmhhbmRsZUJlZ2luU2xpY0J0bn0+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxoMz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHt0aGlzLnN0YXRlLnNsaWNlVGV4dCA9PT0gXCJzbGljZS1idG5cIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gXCJCZWdpbiBTbGljZSFcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogPGkgY2xhc3NOYW1lPVwiaWNvbi1zcGlubmVyOCBhbmltYXRlLXNwaW5cIj48L2k+fVxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L2gzPlxyXG4gICAgICAgICAgICAgICAgICAgIDwvYT5cclxuICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgey8qIENPTkRJVElPTiAqL31cclxuICAgICAgICAgICAgICAgIHt0aGlzLnN0YXRlLmlzQWxlcnRNZXNzYWdlRXJyb3JPbkJlZ2luU2xpY2VCdG4gPT09IHRydWVcclxuICAgICAgICAgICAgICAgICAgICA/IDxkaXYgY2xhc3NOYW1lPVwiYWxlcnQtbWVzc2FnZS0tZXJyb3JcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3NOYW1lPVwiYWxlcnQtaWNvbiBhbGVydC1pY29uLS1lcnJvciBpY29uLXdhcm5pbmdcIj48L2k+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT1cImFsZXJ0LW1lc3NhZ2UtdGV4dC0tZXJyb3JcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHt0aGlzLnN0YXRlLmFsZXJ0TWVzc2FnZUVycm9yT25CZWdpblNsaWNlQnRufVxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+XHJcbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgOiBudWxsfVxyXG4gICAgICAgICAgICAgICAgey8qIENPTkRJVElPTiAqL31cclxuICAgICAgICAgICAgICAgIHt0aGlzLnN0YXRlLmlzQWxlcnRNZXNzYWdlU3VjY2Vzc09uQmVnaW5TbGljZUJ0biA9PT0gdHJ1ZVxyXG4gICAgICAgICAgICAgICAgICAgID8gPGRpdiBjbGFzc05hbWU9XCJhbGVydC1tZXNzYWdlLS1zdWNjZXNzXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzTmFtZT1cImFsZXJ0LWljb24gYWxlcnQtaWNvbi0tc3VjY2VzcyBpY29uLWNoZWNrXCI+PC9pPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJhbGVydC1tZXNzYWdlLXRleHQtLXN1Y2Nlc3NcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHt0aGlzLnN0YXRlLmFsZXJ0TWVzc2FnZVN1Y2Nlc3NPbkJlZ2luU2xpY2VCdG59XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj5cclxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICA6IG51bGx9XHJcbiAgICAgICAgICAgICAgICA8U3VzcGVuc2UgZmFsbGJhY2s9ezxkaXY+PHA+TE9BRElORy4uLjwvcD48L2Rpdj59PlxyXG4gICAgICAgICAgICAgICAgICAgIDxGb3JtUmVzdWx0c1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBnZXRJbWFnZURhdGE9e3RoaXMuc3RhdGUucHJvY2Vzc2VkRmlsZURhdGF9XHJcbiAgICAgICAgICAgICAgICAgICAgLz5cclxuICAgICAgICAgICAgICAgIDwvU3VzcGVuc2U+XHJcbiAgICAgICAgICAgIDwvbWFpbj5cclxuICAgICAgICApXHJcbiAgICB9XHJcbn0iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///SYLB\n");

/***/ }),

/***/ "OJ97":
/*!**************************************!*\
  !*** ./src/scripts/libs/createId.js ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ generateUniqueId)\n/* harmony export */ });\nfunction generateUniqueId() {\n  if (window.crypto && window.crypto.getRandomValues) {\n    return window.crypto.getRandomValues(new Uint32Array(1))[0];\n  } else {\n    return Math.random();\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zdXBlci1jb21pYy1zbGljZXIvLi9zcmMvc2NyaXB0cy9saWJzL2NyZWF0ZUlkLmpzPzM3ZGQiXSwibmFtZXMiOlsiZ2VuZXJhdGVVbmlxdWVJZCIsIndpbmRvdyIsImNyeXB0byIsImdldFJhbmRvbVZhbHVlcyIsIlVpbnQzMkFycmF5IiwiTWF0aCIsInJhbmRvbSJdLCJtYXBwaW5ncyI6Ijs7OztBQUFlLFNBQVNBLGdCQUFULEdBQTRCO0FBQ3ZDLE1BQUlDLE1BQU0sQ0FBQ0MsTUFBUCxJQUFpQkQsTUFBTSxDQUFDQyxNQUFQLENBQWNDLGVBQW5DLEVBQW9EO0FBQ2hELFdBQU9GLE1BQU0sQ0FBQ0MsTUFBUCxDQUFjQyxlQUFkLENBQThCLElBQUlDLFdBQUosQ0FBZ0IsQ0FBaEIsQ0FBOUIsRUFBa0QsQ0FBbEQsQ0FBUDtBQUNILEdBRkQsTUFFTztBQUNILFdBQU9DLElBQUksQ0FBQ0MsTUFBTCxFQUFQO0FBQ0g7QUFDSiIsImZpbGUiOiJPSjk3LmpzIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2VuZXJhdGVVbmlxdWVJZCgpIHtcclxuICAgIGlmICh3aW5kb3cuY3J5cHRvICYmIHdpbmRvdy5jcnlwdG8uZ2V0UmFuZG9tVmFsdWVzKSB7XHJcbiAgICAgICAgcmV0dXJuIHdpbmRvdy5jcnlwdG8uZ2V0UmFuZG9tVmFsdWVzKG5ldyBVaW50MzJBcnJheSgxKSlbMF07XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAgIHJldHVybiBNYXRoLnJhbmRvbSgpXHJcbiAgICB9XHJcbn0iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///OJ97\n");

/***/ })

}]);