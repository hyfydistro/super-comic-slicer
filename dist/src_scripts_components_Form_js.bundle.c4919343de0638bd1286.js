/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunksuper_comic_slicer"] = self["webpackChunksuper_comic_slicer"] || []).push([["src_scripts_components_Form_js"],{

/***/ "SYLB":
/*!****************************************!*\
  !*** ./src/scripts/components/Form.js ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Form)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"q1tI\");\n/* harmony import */ var _FormSelect__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./FormSelect */ \"NJ2e\");\n/* harmony import */ var _FormOptions__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./FormOptions */ \"cx83\");\n/* harmony import */ var _FormResults__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./FormResults */ \"e3DQ\");\n/* harmony import */ var _libs_createId__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../libs/createId */ \"OJ97\");\n/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react/jsx-runtime */ \"nKUr\");\n // import FormUpload from \"./FormUpload\";\n\nconst FormUpload = /*#__PURE__*/(0,react__WEBPACK_IMPORTED_MODULE_0__.lazy)(() => Promise.all(/*! import() */[__webpack_require__.e(\"reactreactBeautifulDnd\"), __webpack_require__.e(\"vendors-node_modules_babel_runtime_helpers_esm_inheritsLoose_js-node_modules_css-box-model_di-45dfde\"), __webpack_require__.e(\"src_scripts_components_FormUpload_js\")]).then(__webpack_require__.bind(__webpack_require__, /*! ./FormUpload.js */ \"cIB+\")));\n // const FormSelect = lazy(() => import(\"./FormSelect.js\"));\n\n // const FormOptions = lazy(() => import(\"./FormOptions.js\"));\n\n // const FormResults = lazy(() => import(\"./FormResults\"));\n// Modules\n// Dynamic imports\n// import { saveAs } from \"file-saver\";\n// import JSZip from \"jszip\";\n\nasync function saveAndDownloadFiles(selectedFileExtension, processImages, Selectedwebcomics, webcomicIndex) {\n  const JSZip = await __webpack_require__.e(/*! import() */ \"vendors-node_modules_jszip_dist_jszip_min_js\").then(__webpack_require__.t.bind(__webpack_require__, /*! jszip */ \"xOOu\", 23));\n  const fileSaver = await __webpack_require__.e(/*! import() */ \"node_modules_file-saver_dist_FileSaver_min_js\").then(__webpack_require__.t.bind(__webpack_require__, /*! file-saver */ \"Iab2\", 23));\n  const JSZipConstructor = JSZip.default;\n  const saveAs = fileSaver.default;\n  const zip = new JSZipConstructor();\n  const selectedFileExt = selectedFileExtension; // NOTE: Naming is padded with zero of tens\n  // Over tens are unavailable\n\n  for (let i = 0; i < processImages.length; i++) {\n    let fileName;\n\n    if (i > 10) {\n      fileName = `${i}.${selectedFileExt}`;\n    } else {\n      fileName = `${i.toString().padStart(2, \"0\")}.${selectedFileExt}`;\n    }\n\n    zip.file(fileName, processImages[i].substr(processImages[i].indexOf(',') + 1), {\n      base64: true\n    });\n  }\n\n  zip.generateAsync({\n    type: \"blob\",\n    mimeType: \"image/jpeg\"\n  }).then(function (blob) {\n    saveAs(blob, `${Selectedwebcomics[webcomicIndex]}.zip`);\n  });\n} // libs\n\n\n // TODO: FEATURE (NEXT UPDATE)\n// \"Rotate\" button in Preview thumb\n// Also see in 'FormUpload.js'\n\n\n\nconst alertMessages = {\n  onSuccess: {\n    filesRemoved: \"Files were cleared.\",\n    completedProcess: \"Process completed!\"\n  },\n  onError: {\n    unacceptableFileType: \"File extensions not supported! Only PNG and JPEG (or JPG) allowed.\",\n    overMaxFileSize: \"Total file size is over maximum. Remove some files to continue.\",\n    noFilesFound: \"No images found to process. Upload some images to 'Begin Slice'!\",\n    selectFormMandatory: \"Please check at least one webcomic platform under '2. Select'.\",\n    selectFormMandatoryTarget: \"Check at least one in order to continue.\"\n  },\n  onWarning: {\n    nearMaxFileSize: \"Total file size is near maximum!\"\n  }\n}; // Accepted file types\n\nconst fileTypes = ['image/jpeg', 'image/jpg', 'image/png'];\n\nfunction validFileType(file) {\n  return fileTypes.includes(file);\n}\n\nclass Form extends react__WEBPACK_IMPORTED_MODULE_0__.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      // # STYLES EVENT\n      // EVENT: onDragOver\n      isDragOver: false,\n      dropzoneBordersClass: {\n        highlight: \"dropzone dropzone--over\",\n        default: \"dropzone\"\n      },\n      inputDataAvailable: false,\n      // EVENT: onClick\n      // \"Begin Slice!\" button\n      sliceText: \"slice-btn\",\n      // EVENT: conditional\n      // div class \"preview-wrapper\"\n      previewWrapperClass: {\n        visible: \"preview-wrapper\",\n        invisible: \"preview-wrapper hidden\"\n      },\n      // # ALERT MESSAGES AND STATE\n      // Success\n      isAlertMessageSuccess: false,\n      alertMessageSuccess: \"\",\n      // Error\n      isAlertMessageError: false,\n      alertMessageError: \"\",\n      // Warning\n      isAlertMessageWarning: false,\n      alertMessageWarning: \"\",\n      // Error on \"Begin Slice!\"\n      isAlertMessageErrorOnBeginSliceBtn: false,\n      alertMessageErrorOnBeginSliceBtn: \"\",\n      // Success on \"Begin Slice!\"\n      isAlertMessageSuccessOnBeginSliceBtn: false,\n      alertMessageSuccessOnBeginSliceBtn: \"\",\n      // Error on none webcomic platform selected\n      isAlertMessageErrorOnSelectForm: false,\n      alertMessageErrorOnSelectForm: \"\",\n      // # DATA\n      processedFileData: [],\n      inputField: [],\n      // inputField: [\n      //     {\n      //         fileRead: [<obj>],\n      //         id: <number>\n      //         fileSize: <number>\n      //     }\n      // ]\n      totalFileSize: 0,\n      // Byte measurement\n      selectedWebcomics: [],\n      selectedFileExtension: \"jpeg\",\n      // default value\n      selectedSquashLevel: \"none\"\n    }; // # METHODS\n\n    this.handleDrag = this.handleDrag.bind(this);\n    this.handleDragLeave = this.handleDragLeave.bind(this);\n    this.handleFileDrop = this.handleFileDrop.bind(this);\n    this.processResults = this.processResults.bind(this);\n    this.handleBeginSlicBtn = this.handleBeginSlicBtn.bind(this); // TOGGLE CLASS\n\n    this.toggleBeginSliceText = this.toggleBeginSliceText.bind(this);\n    this.handleDragEnd = this.handleDragEnd.bind(this); // DATA MANAGEMENT\n    // DELETE Data\n\n    this.handleRemoveSelf = this.handleRemoveSelf.bind(this);\n    this.handleClickToRemoveAll = this.handleClickToRemoveAll.bind(this); // SET file data\n\n    this.setFilesData = this.setFilesData.bind(this); // GET total file size\n\n    this.checkTotalFileSize = this.checkTotalFileSize.bind(this); // UPLOAD on file browse\n\n    this.handleInputChange = this.handleInputChange.bind(this);\n    this.handleSelectedWebcomic = this.handleSelectedWebcomic.bind(this);\n    this.handleOptionsFileExtenions = this.handleOptionsFileExtenions.bind(this);\n    this.handleOptionsSquashLevel = this.handleOptionsSquashLevel.bind(this);\n  } // ===============\n  // # REACT METHODS\n  // ===============\n  // componentWillUnmount() {\n  //     console.log(\"UNMOUNTING...\");\n  // }\n  // componentDidMount() {\n  //     console.log(\"MOUNTING...\");\n  // }\n  // componentDidUpdate() {\n  //     console.log(\"COMPONENT UPDATING...\");\n  // }\n  // ========\n  // # EVENTS\n  // ========\n  // event: drag\n\n\n  handleDrag(e) {\n    e.preventDefault();\n    e.stopPropagation();\n    this.setState({\n      isDragOver: true\n    });\n  } // event: drag\n\n\n  handleDragLeave(e) {\n    e.preventDefault(e);\n    e.stopPropagation();\n    this.setState({\n      isDragOver: false\n    });\n  } // event: drag\n  // Reorder files\n\n\n  handleDragEnd(result) {\n    // CREATE shallow copy\n    const items = Array.from(this.state.inputField); // EXTRACT targeted item\n\n    const [reorderedItem] = items.splice(result.source.index, 1); // PUSH targeted item into new order\n\n    items.splice(result.destination.index, 0, reorderedItem);\n    this.setState({\n      inputField: items\n    });\n  } // event: click\n  // Open browser for files\n\n\n  handleClickToUpload() {\n    const dropzoneInput = document.querySelector(\".dropzone__input\"); // EMULATE HTML input CLICK event\n\n    dropzoneInput.click();\n  } // event: click\n  // UPDATE state 'selectedFileExtension'\n\n\n  handleOptionsFileExtenions(e) {\n    const newSelectedFileExtension = e.target.value;\n    this.setState({\n      selectedFileExtension: newSelectedFileExtension\n    });\n  } // event: click\n  // UPDATE state 'selectedSquashLevel'\n\n\n  handleOptionsSquashLevel(e) {\n    const newSelectedSquashLevel = parseInt(e.target.value, 10);\n\n    if (newSelectedSquashLevel == 0) {\n      this.setState({\n        selectedSquashLevel: \"none\"\n      });\n    } else {\n      this.setState({\n        selectedSquashLevel: newSelectedSquashLevel\n      });\n    }\n  } // event: click\n  // \"Begin Slice!\" button\n\n\n  handleBeginSlicBtn(e) {\n    e.preventDefault();\n\n    if (this.state.inputField.length === 0) {\n      // ALERT MESSAGE\n      // No data (or image file) found\n      this.setState({\n        isAlertMessageErrorOnBeginSliceBtn: true,\n        alertMessageErrorOnBeginSliceBtn: alertMessages.onError.noFilesFound\n      });\n      setTimeout(() => {\n        this.setState({\n          isAlertMessageErrorOnBeginSliceBtn: false,\n          alertMessageErrorOnBeginSliceBtn: \"\"\n        });\n      }, 8000);\n    } else {\n      if (this.state.selectedWebcomics.length === 0) {\n        // ALERT MESSAGE (PERSIST)\n        // No webcomic platform selected\n        this.setState({\n          isAlertMessageErrorOnBeginSliceBtn: true,\n          alertMessageErrorOnBeginSliceBtn: alertMessages.onError.selectFormMandatory,\n          isAlertMessageErrorOnSelectForm: true,\n          alertMessageErrorOnSelectForm: alertMessages.onError.selectFormMandatoryTarget\n        });\n      } else {\n        // ALERT MESSAGE (PERSIST -> REMOVED)\n        this.setState({\n          isAlertMessageErrorOnBeginSliceBtn: false,\n          alertMessageErrorOnBeginSliceBtn: \"\",\n          isAlertMessageErrorOnSelectForm: false,\n          alertMessageErrorOnSelectForm: \"\"\n        });\n        this.processResults(); // ANIMATION\n\n        this.toggleBeginSliceText();\n        setTimeout(() => {\n          this.toggleBeginSliceText();\n        }, 1500);\n      }\n    }\n  } // event: click\n  // \"X\" button\n  // REMOVE current thumb UI\n  // REMOVE current thumb data\n\n\n  handleRemoveSelf(e) {\n    e.preventDefault(); // GRAB all list\n\n    const sourceThumbnails = document.querySelectorAll(\".preview__thumbnail-container\"); // TRANSFORM node into JavaScript objects (array)\n\n    const arrThumbnails = Array.from(sourceThumbnails); // CREATE shallow copy\n\n    const items = Array.from(this.state.inputField); // GET index of targeted item\n\n    const removeItemIndex = arrThumbnails.indexOf(e.target.parentElement); // UPDATE state totalFileSize\n\n    this.setState(currentState => {\n      // GET data\n      const sourceInputField = Array.from(currentState.inputField); // GET data 'fileSize'\n\n      const fileSizesArr = sourceInputField.map(file => {\n        return file.fileSize;\n      }); // SUM all data 'fileSize'\n\n      const totalFileByte = fileSizesArr.reduce((accumulator, currentValue) => accumulator + currentValue); // EXTRACT targeted item 'fileSize'\n\n      const removedItemFileSize = sourceInputField[removeItemIndex][\"fileSize\"]; // SUBTRACT 'totalFileSize' - targeted item 'fileSize'\n\n      const newTotalFileSize = totalFileByte - removedItemFileSize;\n      return {\n        totalFileSize: newTotalFileSize\n      }; // UPDATE UI\n    }, this.checkTotalFileSize()); // REMOVE targeted item\n\n    items.splice(removeItemIndex, 1); // UPDATE data\n\n    this.setState({\n      inputField: items\n    });\n  } // event: click\n  // EMPTY state \"inputField\"\n  // \"Clear Files\" button\n\n\n  handleClickToRemoveAll() {\n    // ALERT MESSAGE\n    // UPDATE data\n    this.setState({\n      inputField: [],\n      inputDataAvailable: false,\n      isAlertMessageSuccess: true,\n      alertMessageSuccess: alertMessages.onSuccess.filesRemoved\n    });\n    setTimeout(() => {\n      this.setState({\n        isAlertMessageSuccess: false,\n        alertMessageSuccess: \"\"\n      });\n    }, 8000);\n  } // event: change\n  // LIStEN to user on CLICK to upload file\n  // if user selects file(s), proceed to process image files methods\n\n\n  handleInputChange(e) {\n    const files = e.target.files;\n    this.setFilesData(files); // UPDATE UI on CONDITION\n\n    if (this.state.inputField) {\n      this.setState({\n        inputDataAvailable: true\n      });\n    }\n  } // event: click\n  // UPDATE state 'selectedWebcomics'\n\n\n  handleSelectedWebcomic(e) {\n    const selectedWebcomicValue = e.target.value;\n    const currentSelectedWebcomics = this.state.selectedWebcomics;\n\n    if (currentSelectedWebcomics.includes(selectedWebcomicValue)) {\n      // UNCHECK\n      const removeItemIndex = currentSelectedWebcomics.indexOf(selectedWebcomicValue);\n      currentSelectedWebcomics.splice(removeItemIndex, 1);\n      this.setState({\n        selectedWebcomics: currentSelectedWebcomics\n      });\n    } else {\n      // CHECK\n      this.setState(currentState => ({\n        selectedWebcomics: [...currentState.selectedWebcomics, selectedWebcomicValue]\n      }));\n    }\n  } // =========\n  // # METHODS\n  // =========\n  // TOGGLE\n  // \"Begin Slice\" Text\n\n\n  toggleBeginSliceText() {\n    if (this.state.sliceText === \"slice-btn\") {\n      this.setState({\n        sliceText: \"icon-spinner8 animate-spin\"\n      });\n    } else if (this.state.sliceText === \"icon-spinner8 animate-spin\") {\n      this.setState({\n        sliceText: \"slice-btn\"\n      });\n    }\n  } // FETCHING FILE READ\n  // - VALIDATE file on upload\n  // - UPDATE state \"inputField\"\n  // - TOGGLE class\n\n\n  handleFileDrop(e) {\n    e.preventDefault();\n    e.stopPropagation();\n    const files = e.dataTransfer.files;\n    this.setFilesData(files); // UPDATE data boolean (for other chain reactions)\n\n    if (this.state.inputField) {\n      this.setState({\n        inputDataAvailable: true\n      });\n    }\n\n    this.setState({\n      isDragOver: false\n    });\n  }\n\n  setFilesData(files) {\n    Object.values(files).forEach(obj => {\n      // VALIDATE\n      if (!validFileType(obj.type)) {\n        // ALERT MESSAGE\n        // User attempted to upload unacceptable files\n        this.setState({\n          alertMessageError: alertMessages.onError.unacceptableFileType,\n          isAlertMessageError: true\n        });\n        setTimeout(() => {\n          this.setState({\n            alertMessageError: \"\",\n            isAlertMessageError: false\n          });\n        }, 8000);\n      } else {\n        // CREATE image file data preview container\n        this.setState(currentState => ({\n          inputField: [...currentState.inputField, {\n            fileRead: obj,\n            id: (0,_libs_createId__WEBPACK_IMPORTED_MODULE_2__.default)(),\n            fileSize: obj.size\n          }]\n        })); // UPDATE state 'totalFileSize'\n\n        this.setState(currentState => {\n          // GET main data\n          const sourceInputField = currentState.inputField; // GET main data 'fileSize'\n\n          const fileSizesArr = sourceInputField.map(file => {\n            return file.fileSize;\n          }); // TOTAL main data 'fileSize'\n\n          const totalFileByte = fileSizesArr.reduce((accumulator, currentValue) => accumulator + currentValue);\n          return {\n            totalFileSize: totalFileByte\n          }; // CHECK CONDITION\n        }, this.checkTotalFileSize());\n      }\n    });\n  } // CHECK CONDITION\n  // UPDATE UI if CONDITION are met\n\n\n  checkTotalFileSize() {\n    // ALERT MESSAGE\n    // CONDITION\n    // near max, pass 18MB\n    if (this.state.totalFileSize >= 18874368) {\n      this.setState({\n        isAlertMessageWarning: true,\n        alertMessageWarning: alertMessages.onWarning.nearMaxFileSize\n      });\n    } // ALERT MESSAGE\n    // CONDITION\n    // over max, pass 20MB\n\n\n    if (this.state.totalFileSize >= 20971520) {\n      this.setState({\n        isAlertMessageError: true,\n        alertMessageError: alertMessages.onError.overMaxFileSize\n      });\n    }\n  } // PROCESS IMAGE FILES\n\n\n  processResults() {\n    // GET all image file elements\n    const sourceImagesRaw = document.querySelectorAll(\".preview__thumbnail img\"); // REFERENCE the canvas\n\n    const canvas = document.querySelector(\"#canvas\");\n    const context = canvas.getContext(\"2d\"); // TRANSFORM node into JavaScript objects (array)\n\n    const sourceImages = Array.from(sourceImagesRaw); // GET user selected webcomic platform(s) from SELECT form component\n\n    const Selectedwebcomics = this.state.selectedWebcomics; // # (1) SELECT form\n    // PROCESS files for all selected webcomic platform applied\n\n    for (let i = 0; i < Selectedwebcomics.length; i++) {\n      let processImages = []; // PROCESS image file\n\n      sourceImages.forEach(img => {\n        const imgWidth = img.naturalWidth;\n        const imgHeight = img.naturalHeight; // * CONDITION: image width > image height\n        // ROTATE image\n\n        if (imgWidth > imgHeight) {\n          // NOTE:\n          // Bottom surface would be pointed left, and\n          // Top surface would be pointed right\n          canvas.width = imgHeight;\n          canvas.height = imgWidth;\n          context.rotate(Math.PI / 2);\n          context.drawImage(img, 0, -imgHeight);\n        }\n\n        const maxHeight = imgHeight;\n        const width = imgWidth;\n        let scaleWidth; // # (2) OPTIONS form - \"SQUASH\"\n\n        switch (this.state.selectedSquashLevel) {\n          case \"none\":\n            scaleWidth = width;\n            break;\n\n          case 400:\n            scaleWidth = 400;\n            break;\n\n          case 500:\n            scaleWidth = 500;\n            break;\n\n          case 600:\n            scaleWidth = 600;\n            break;\n\n          case 700:\n            scaleWidth = 700;\n            break;\n        }\n\n        let webcomicMaxWidth;\n        let webcomicMaxHeight; // TODO: FEATURE (NEXT UPDATE)\n        // Find out normal tapas ratio\n        // Current Webcomic Platform Available...\n        // ! tapas in the works... (WIP)\n\n        switch (Selectedwebcomics[i]) {\n          case \"webtoon\":\n            webcomicMaxWidth = 800;\n            webcomicMaxHeight = 1280;\n            break;\n\n          case \"tapas\":\n            webcomicMaxWidth = 960;\n            webcomicMaxHeight = 1440;\n            break;\n        }\n\n        const aspectRatio = webcomicMaxWidth / webcomicMaxHeight; // based on aspect ratio, what the height should be...\n\n        const determinedeHeight = width / aspectRatio;\n        let scaleDeterminedeHeight = determinedeHeight;\n\n        if (scaleWidth !== width) {\n          scaleDeterminedeHeight = scaleWidth / aspectRatio;\n        } // * CONDITION:\n        // If file image naturalHeight is shorter than determinedHeight,\n        // return as is... unless Options scale applied\n\n\n        if (determinedeHeight > maxHeight) {\n          const scaleMaxHeight = scaleWidth / (width / maxHeight);\n          canvas.width = scaleWidth;\n          canvas.height = scaleMaxHeight;\n          context.drawImage(img, 0, 0, scaleWidth, scaleMaxHeight);\n          const result = canvas.toDataURL();\n          processImages.push(result);\n        } else {\n          let timesToSlice = Math.floor(maxHeight / determinedeHeight);\n          let currentSlice = 0;\n          let newYPosition = 0;\n          let slicedImages = []; // * CONDITION: Longer length (height) images\n\n          while (timesToSlice > currentSlice) {\n            newYPosition = determinedeHeight * currentSlice;\n            canvas.width = scaleWidth;\n            canvas.height = scaleDeterminedeHeight;\n            context.drawImage(img, 0, newYPosition, width, determinedeHeight, 0, 0, scaleWidth, scaleDeterminedeHeight);\n            slicedImages.push(canvas.toDataURL());\n            currentSlice++;\n          } // * CONDTION: Odd number remaining\n          // GET last coordinate\n          // GET remaining height\n\n\n          const remainCoordinateY = timesToSlice * determinedeHeight;\n          const remainHeight = maxHeight - remainCoordinateY; // OPTIONS Squash - if available\n\n          let scaleRemaineHeight = remainHeight;\n\n          if (scaleWidth !== width) {\n            scaleRemaineHeight = scaleWidth / (width / remainHeight);\n          }\n\n          if (remainHeight !== 0) {\n            newYPosition = remainCoordinateY; // ? Refactor to a function\n\n            canvas.width = scaleWidth;\n            canvas.height = scaleRemaineHeight;\n            context.drawImage(img, 0, newYPosition, width, remainHeight, 0, 0, scaleWidth, scaleRemaineHeight);\n            slicedImages.push(canvas.toDataURL());\n          }\n\n          processImages.push(...slicedImages);\n        }\n      }); // CREATE Zip folder\n      // NAME images with padded zero if under 10s\n      // GET user file extension prefernce from Options form - File Extensions\n      // PUSH images to Zip folder\n      // DOWNLOAD to user's PC\n\n      saveAndDownloadFiles(this.state.selectedFileExtension, processImages, Selectedwebcomics, i).then(() => {\n        if (Selectedwebcomics.indexOf(Selectedwebcomics[i]) == Selectedwebcomics.indexOf(Selectedwebcomics[Selectedwebcomics.length - 1])) {\n          // ALERT MESSAGE\n          // Process completed\n          this.setState({\n            isAlertMessageSuccessOnBeginSliceBtn: true,\n            alertMessageSuccessOnBeginSliceBtn: alertMessages.onSuccess.completedProcess\n          });\n          setTimeout(() => {\n            this.setState({\n              isAlertMessageSuccessOnBeginSliceBtn: false,\n              alertMessageSuccessOnBeginSliceBtn: \"\"\n            });\n          }, 8000);\n        }\n      }); // ADD image 'data:' url arr of processed image files\n      // RESPONDS to display in Result form\n\n      this.setState({\n        processedFileData: processImages\n      });\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(\"main\", {\n      children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"h2\", {\n        children: \"Start Here\"\n      }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(react__WEBPACK_IMPORTED_MODULE_0__.Suspense, {\n        fallback: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"div\", {\n          children: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"p\", {\n            children: \"LOADING...\"\n          })\n        }),\n        children: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(FormUpload // EVENTS\n        , {\n          onHandleDrag: this.handleDrag,\n          onHandleDragLeave: this.handleDragLeave,\n          onHandleFileDrop: this.handleFileDrop,\n          onRemoveSelf: this.handleRemoveSelf,\n          onhandleDragEnd: this.handleDragEnd,\n          onHandleClickToUpload: this.handleClickToUpload,\n          onHandleInputChange: this.handleInputChange,\n          onHandleClickToRemoveAll: this.handleClickToRemoveAll // STYLED EVENTS\n          ,\n          toggleDropzoneBordersClass: this.state.isDragOver ? this.state.dropzoneBordersClass.highlight : this.state.dropzoneBordersClass.default,\n          togglePreviewWrapperClass: this.state.inputDataAvailable ? this.state.previewWrapperClass.visible : this.state.previewWrapperClass.invisible // ALERT MESSAGES\n          ,\n          getAlertErrorText: this.state.alertMessageError,\n          isAlertMessageError: this.state.isAlertMessageError,\n          getAlertSuccessText: this.state.alertMessageSuccess,\n          isAlertMessageSuccess: this.state.isAlertMessageSuccess,\n          isAlertMessageWarning: this.state.isAlertMessageWarning,\n          getAlertWarningText: this.state.alertMessageWarning // DATAS\n          ,\n          inputField: this.state.inputField,\n          getTotalFileSize: this.state.totalFileSize\n        })\n      }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_FormSelect__WEBPACK_IMPORTED_MODULE_3__.default, {\n        onHandleSelectedWebcomic: this.handleSelectedWebcomic,\n        isAlertMessageSelectFormError: this.state.isAlertMessageErrorOnSelectForm,\n        getAlertMessageSelectFormText: this.state.alertMessageErrorOnSelectForm\n      }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_FormOptions__WEBPACK_IMPORTED_MODULE_4__.default, {\n        onHandleOptionsFileExtenions: this.handleOptionsFileExtenions,\n        onHandleOptionsSquashLevel: this.handleOptionsSquashLevel\n      }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"div\", {\n        className: \"slice-btn-container\",\n        children: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"a\", {\n          className: \"slice-btn\",\n          onClick: this.handleBeginSlicBtn,\n          children: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"h3\", {\n            children: this.state.sliceText === \"slice-btn\" ? \"Begin Slice!\" : /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"i\", {\n              className: \"icon-spinner8 animate-spin\"\n            })\n          })\n        })\n      }), this.state.isAlertMessageErrorOnBeginSliceBtn === true ? /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(\"div\", {\n        className: \"alert-message--error\",\n        children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"i\", {\n          className: \"alert-icon alert-icon--error icon-warning\"\n        }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"span\", {\n          className: \"alert-message-text--error\",\n          children: this.state.alertMessageErrorOnBeginSliceBtn\n        })]\n      }) : null, this.state.isAlertMessageSuccessOnBeginSliceBtn === true ? /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(\"div\", {\n        className: \"alert-message--success\",\n        children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"i\", {\n          className: \"alert-icon alert-icon--success icon-check\"\n        }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"span\", {\n          className: \"alert-message-text--success\",\n          children: this.state.alertMessageSuccessOnBeginSliceBtn\n        })]\n      }) : null, /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_FormResults__WEBPACK_IMPORTED_MODULE_5__.default, {\n        getImageData: this.state.processedFileData\n      })]\n    });\n  }\n\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///SYLB\n");

/***/ }),

/***/ "cx83":
/*!***********************************************!*\
  !*** ./src/scripts/components/FormOptions.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ FormOptions)\n/* harmony export */ });\n/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-runtime */ \"nKUr\");\n\n\n// RADIO OPTIONS\n// Default CHECKED: squashLevelModel[0]\nconst squashLevelModel = [{\n  htmlLabel: \"none\",\n  pixelValue: 0,\n  text: \"none\"\n}, {\n  htmlLabel: \"400\",\n  pixelValue: 400,\n  text: \"400 width pixels\"\n}, {\n  htmlLabel: \"500\",\n  pixelValue: 500,\n  text: \"500 width pixels\"\n}, {\n  htmlLabel: \"600\",\n  pixelValue: 600,\n  text: \"600 width pixels\"\n}, {\n  htmlLabel: \"700\",\n  pixelValue: 700,\n  text: \"700 width pixels\"\n}]; // RADIO OPTIONS\n// Default CHECKED: filExtensionsModel[0]\n\nconst filExtensionsModel = [{\n  htmlLabel: \"jpeg\",\n  text: \"JPEG\"\n}, {\n  htmlLabel: \"png\",\n  text: \"PNG\"\n}];\n\nfunction SquashOptions(props) {\n  const squashLevelList = squashLevelModel.map((currentSquashLevel, index) => {\n    if (squashLevelModel[0] == currentSquashLevel) {\n      return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", {\n        className: \"radio-option\",\n        children: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"label\", {\n          htmlFor: currentSquashLevel.htmlLabel,\n          children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"input\", {\n            defaultChecked: true,\n            type: \"radio\",\n            name: \"squash\",\n            value: currentSquashLevel.pixelValue,\n            id: currentSquashLevel.htmlLabel,\n            onClick: e => props.onHandleOptionsSquashLevel(e)\n          }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"span\", {\n            className: \"select-text\",\n            children: currentSquashLevel.text\n          })]\n        })\n      }, index);\n    } else {\n      return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", {\n        className: \"radio-option\",\n        children: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"label\", {\n          htmlFor: currentSquashLevel.htmlLabel,\n          children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"input\", {\n            type: \"radio\",\n            name: \"squash\",\n            value: currentSquashLevel.pixelValue,\n            id: currentSquashLevel.htmlLabel,\n            onClick: e => props.onHandleOptionsSquashLevel(e)\n          }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"span\", {\n            className: \"select-text\",\n            children: currentSquashLevel.text\n          })]\n        })\n      }, index);\n    }\n  });\n  return squashLevelList;\n}\n\nfunction FileExtensionOptions(props) {\n  const fileExtensionsList = filExtensionsModel.map((fileExtObj, index) => {\n    if (filExtensionsModel[0] === fileExtObj) {\n      return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", {\n        className: \"radio-option\",\n        children: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"label\", {\n          htmlFor: fileExtObj.htmlLabel,\n          children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"input\", {\n            defaultChecked: true,\n            type: \"radio\",\n            name: \"filetype\",\n            value: fileExtObj.htmlLabel,\n            id: fileExtObj.htmlLabel,\n            onClick: e => props.onHandleOptionsFileExtenions(e)\n          }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"span\", {\n            className: \"select-text\",\n            children: fileExtObj.text\n          })]\n        })\n      }, index);\n    } else {\n      return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", {\n        className: \"radio-option\",\n        children: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"label\", {\n          htmlFor: fileExtObj.htmlLabel,\n          children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"input\", {\n            type: \"radio\",\n            name: \"filetype\",\n            value: fileExtObj.htmlLabel,\n            id: fileExtObj.htmlLabel,\n            onClick: e => props.onHandleOptionsFileExtenions(e)\n          }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"span\", {\n            className: \"select-text\",\n            children: fileExtObj.text\n          })]\n        })\n      }, index);\n    }\n  });\n  return fileExtensionsList;\n}\n\nfunction FormOptions(props) {\n  return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"section\", {\n    className: \"form-options\",\n    children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"h3\", {\n      children: \"3. Options\"\n    }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"p\", {\n      className: \"form-header\",\n      children: \"File Extensions\"\n    }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", {\n      className: \"radio-container-filetype\",\n      children: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(FileExtensionOptions, {\n        onHandleOptionsFileExtenions: props.onHandleOptionsFileExtenions\n      })\n    }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"p\", {\n      className: \"form-header\",\n      children: \"Squash\"\n    }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"p\", {\n      className: \"margin-fix\",\n      children: \"Squash scale down image file size.\"\n    }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"ul\", {\n      className: \"margin-fix\",\n      children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"li\", {\n        children: \"If your file size is big enough it may refine illustrations. Slicing ratio will not be affected - it will produce the same page division.\"\n      }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"li\", {\n        children: \"if your file is smaller than the selected squash option, it will expand your image and attempt to produce to the same aspect ratio of your chosen webcomic platform.\"\n      })]\n    }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", {\n      className: \"radio-container-squash\",\n      children: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(SquashOptions, {\n        onHandleOptionsSquashLevel: props.onHandleOptionsSquashLevel\n      })\n    })]\n  });\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///cx83\n");

/***/ }),

/***/ "e3DQ":
/*!***********************************************!*\
  !*** ./src/scripts/components/FormResults.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ FormResults)\n/* harmony export */ });\n/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-runtime */ \"nKUr\");\n\n\n\n// TODO: FEATURE (NEXT UPDATE)\n// adjust to webcomic platform ratio for display\nfunction Product(props) {\n  // INJECT image blob\n  const processedImageFIles = props.getImageData.map((imgData, index) => {\n    return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", {\n      className: \"product__image-block\",\n      children: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"img\", {\n        src: imgData\n      })\n    }, index);\n  });\n  return processedImageFIles;\n}\n\nfunction FormResults(props) {\n  return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"section\", {\n    className: \"form-results\",\n    children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"h3\", {\n      children: \"Results\"\n    }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"p\", {\n      className: \"margin-fix\",\n      children: \"For each webcomic platform selected, a zip file will be automatically downloaded after slicing process completed.\"\n    }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"canvas\", {\n      id: \"canvas\"\n    }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", {\n      className: \"product-container\",\n      children: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", {\n        className: \"product\",\n        children: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(Product, {\n          getImageData: props.getImageData\n        })\n      })\n    })]\n  });\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zdXBlci1jb21pYy1zbGljZXIvLi9zcmMvc2NyaXB0cy9jb21wb25lbnRzL0Zvcm1SZXN1bHRzLmpzPzg4ZmYiXSwibmFtZXMiOlsiUHJvZHVjdCIsInByb3BzIiwicHJvY2Vzc2VkSW1hZ2VGSWxlcyIsImdldEltYWdlRGF0YSIsIm1hcCIsImltZ0RhdGEiLCJpbmRleCIsIkZvcm1SZXN1bHRzIl0sIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFBO0FBQ0E7QUFFQSxTQUFTQSxPQUFULENBQWlCQyxLQUFqQixFQUF3QjtBQUVwQjtBQUNBLFFBQU1DLG1CQUFtQixHQUFHRCxLQUFLLENBQUNFLFlBQU4sQ0FBbUJDLEdBQW5CLENBQXVCLENBQUNDLE9BQUQsRUFBVUMsS0FBVixLQUFvQjtBQUVuRSx3QkFDSTtBQUFLLGVBQVMsRUFBQyxzQkFBZjtBQUFBLDZCQUNJO0FBQUssV0FBRyxFQUFFRDtBQUFWO0FBREosT0FBMkNDLEtBQTNDLENBREo7QUFLSCxHQVAyQixDQUE1QjtBQVNBLFNBQU9KLG1CQUFQO0FBQ0g7O0FBRWMsU0FBU0ssV0FBVCxDQUFxQk4sS0FBckIsRUFBNEI7QUFDdkMsc0JBQ0k7QUFBUyxhQUFTLEVBQUMsY0FBbkI7QUFBQSw0QkFDSTtBQUFBO0FBQUEsTUFESixlQUdJO0FBQUcsZUFBUyxFQUFDLFlBQWI7QUFBQTtBQUFBLE1BSEosZUFLSTtBQUFRLFFBQUUsRUFBQztBQUFYLE1BTEosZUFPSTtBQUFLLGVBQVMsRUFBQyxtQkFBZjtBQUFBLDZCQUNJO0FBQUssaUJBQVMsRUFBQyxTQUFmO0FBQUEsK0JBQ0ksdURBQUMsT0FBRDtBQUNJLHNCQUFZLEVBQUVBLEtBQUssQ0FBQ0U7QUFEeEI7QUFESjtBQURKLE1BUEo7QUFBQSxJQURKO0FBaUJIIiwiZmlsZSI6ImUzRFEuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBUT0RPOiBGRUFUVVJFIChORVhUIFVQREFURSlcclxuLy8gYWRqdXN0IHRvIHdlYmNvbWljIHBsYXRmb3JtIHJhdGlvIGZvciBkaXNwbGF5XHJcblxyXG5mdW5jdGlvbiBQcm9kdWN0KHByb3BzKSB7XHJcblxyXG4gICAgLy8gSU5KRUNUIGltYWdlIGJsb2JcclxuICAgIGNvbnN0IHByb2Nlc3NlZEltYWdlRklsZXMgPSBwcm9wcy5nZXRJbWFnZURhdGEubWFwKChpbWdEYXRhLCBpbmRleCkgPT4ge1xyXG5cclxuICAgICAgICByZXR1cm4gKFxyXG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInByb2R1Y3RfX2ltYWdlLWJsb2NrXCIga2V5PXtpbmRleH0+XHJcbiAgICAgICAgICAgICAgICA8aW1nIHNyYz17aW1nRGF0YX0gLz5cclxuICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgKVxyXG4gICAgfSlcclxuXHJcbiAgICByZXR1cm4gcHJvY2Vzc2VkSW1hZ2VGSWxlcztcclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gRm9ybVJlc3VsdHMocHJvcHMpIHtcclxuICAgIHJldHVybiAoXHJcbiAgICAgICAgPHNlY3Rpb24gY2xhc3NOYW1lPVwiZm9ybS1yZXN1bHRzXCI+XHJcbiAgICAgICAgICAgIDxoMz5SZXN1bHRzPC9oMz5cclxuXHJcbiAgICAgICAgICAgIDxwIGNsYXNzTmFtZT1cIm1hcmdpbi1maXhcIiA+Rm9yIGVhY2ggd2ViY29taWMgcGxhdGZvcm0gc2VsZWN0ZWQsIGEgemlwIGZpbGUgd2lsbCBiZSBhdXRvbWF0aWNhbGx5IGRvd25sb2FkZWQgYWZ0ZXIgc2xpY2luZyBwcm9jZXNzIGNvbXBsZXRlZC48L3A+XHJcblxyXG4gICAgICAgICAgICA8Y2FudmFzIGlkPVwiY2FudmFzXCI+PC9jYW52YXM+XHJcblxyXG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInByb2R1Y3QtY29udGFpbmVyXCI+XHJcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInByb2R1Y3RcIj5cclxuICAgICAgICAgICAgICAgICAgICA8UHJvZHVjdFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBnZXRJbWFnZURhdGE9e3Byb3BzLmdldEltYWdlRGF0YX1cclxuICAgICAgICAgICAgICAgICAgICAvPlxyXG4gICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgIDwvc2VjdGlvbj5cclxuICAgIClcclxufSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///e3DQ\n");

/***/ }),

/***/ "NJ2e":
/*!**********************************************!*\
  !*** ./src/scripts/components/FormSelect.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ FormSelect)\n/* harmony export */ });\n/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-runtime */ \"nKUr\");\n\n\nconst webcomicsModel = [{\n  htmlLabel: \"webtoon\",\n  imageSource: \"images/icon-webtoon.svg\",\n  htmlAlt: \"webtoon icon\",\n  text: \"Webtoon\",\n  disabled: false\n}, {\n  htmlLabel: \"tapas\",\n  imageSource: \"images/icon-tapas.png\",\n  htmlAlt: \"tapas icon\",\n  text: \"Tapas\",\n  disabled: true\n}];\n\nfunction WebcomicsOptions(props) {\n  // const webcomicsList = props.getWebcomicsModel.map((currentWebcomic, tabindex) => {\n  const webcomicsList = webcomicsModel.map((currentWebcomic, tabindex) => {\n    if (currentWebcomic.disabled) {\n      return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", {\n        className: \"select-option\",\n        children: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"label\", {\n          htmlFor: currentWebcomic.htmlLabel,\n          children: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"div\", {\n            className: \"select-label--wrapper\",\n            children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"input\", {\n              type: \"checkbox\",\n              id: currentWebcomic.htmlLabel,\n              disabled: true\n            }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"span\", {\n              className: \"select-label\",\n              children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"img\", {\n                className: \"select-icon\",\n                src: currentWebcomic.imageSource,\n                alt: currentWebcomic.htmlAlt\n              }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"span\", {\n                className: \"select-text\",\n                children: currentWebcomic.text\n              })]\n            })]\n          })\n        })\n      }, tabindex);\n    } else {\n      return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", {\n        className: \"select-option\",\n        children: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"label\", {\n          htmlFor: currentWebcomic.htmlLabel,\n          children: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"div\", {\n            className: \"select-label--wrapper\",\n            children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"input\", {\n              type: \"checkbox\",\n              id: currentWebcomic.htmlLabel,\n              value: currentWebcomic.htmlLabel,\n              onClick: e => props.onHandleSelectedWebcomic(e)\n            }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"span\", {\n              className: \"select-label\",\n              children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"img\", {\n                className: \"select-icon\",\n                src: currentWebcomic.imageSource,\n                alt: currentWebcomic.htmlAlt\n              }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"span\", {\n                className: \"select-text\",\n                children: currentWebcomic.text\n              })]\n            })]\n          })\n        })\n      }, tabindex);\n    }\n  });\n  return webcomicsList;\n}\n\nfunction FormSelect(props) {\n  return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"section\", {\n    className: \"form-select\",\n    children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"h3\", {\n      children: \"2. Select\"\n    }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"p\", {\n      children: \"Select webcomic platform to base slicing ratio. You may select more than one. *Currently, Webtoon is only available.\"\n    }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", {\n      className: \"select-container\",\n      children: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(WebcomicsOptions, {\n        onHandleSelectedWebcomic: props.onHandleSelectedWebcomic\n      })\n    }), props.isAlertMessageSelectFormError === true ? /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"div\", {\n      className: \"alert-message--error\",\n      children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"i\", {\n        className: \"alert-icon alert-icon--error icon-warning\"\n      }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"span\", {\n        className: \"alert-message-text--error\",\n        children: props.getAlertMessageSelectFormText\n      })]\n    }) : null]\n  });\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zdXBlci1jb21pYy1zbGljZXIvLi9zcmMvc2NyaXB0cy9jb21wb25lbnRzL0Zvcm1TZWxlY3QuanM/NjIxNCJdLCJuYW1lcyI6WyJ3ZWJjb21pY3NNb2RlbCIsImh0bWxMYWJlbCIsImltYWdlU291cmNlIiwiaHRtbEFsdCIsInRleHQiLCJkaXNhYmxlZCIsIldlYmNvbWljc09wdGlvbnMiLCJwcm9wcyIsIndlYmNvbWljc0xpc3QiLCJtYXAiLCJjdXJyZW50V2ViY29taWMiLCJ0YWJpbmRleCIsImUiLCJvbkhhbmRsZVNlbGVjdGVkV2ViY29taWMiLCJGb3JtU2VsZWN0IiwiaXNBbGVydE1lc3NhZ2VTZWxlY3RGb3JtRXJyb3IiLCJnZXRBbGVydE1lc3NhZ2VTZWxlY3RGb3JtVGV4dCJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBLE1BQU1BLGNBQWMsR0FBRyxDQUNuQjtBQUNJQyxXQUFTLEVBQUUsU0FEZjtBQUVJQyxhQUFXLEVBQUUseUJBRmpCO0FBR0lDLFNBQU8sRUFBRSxjQUhiO0FBSUlDLE1BQUksRUFBRSxTQUpWO0FBS0lDLFVBQVEsRUFBRTtBQUxkLENBRG1CLEVBUW5CO0FBQ0lKLFdBQVMsRUFBRSxPQURmO0FBRUlDLGFBQVcsRUFBRSx1QkFGakI7QUFHSUMsU0FBTyxFQUFFLFlBSGI7QUFJSUMsTUFBSSxFQUFFLE9BSlY7QUFLSUMsVUFBUSxFQUFFO0FBTGQsQ0FSbUIsQ0FBdkI7O0FBaUJBLFNBQVNDLGdCQUFULENBQTBCQyxLQUExQixFQUFpQztBQUU3QjtBQUNBLFFBQU1DLGFBQWEsR0FBR1IsY0FBYyxDQUFDUyxHQUFmLENBQW1CLENBQUNDLGVBQUQsRUFBa0JDLFFBQWxCLEtBQStCO0FBRXBFLFFBQUlELGVBQWUsQ0FBQ0wsUUFBcEIsRUFBOEI7QUFDMUIsMEJBQ0k7QUFBSyxpQkFBUyxFQUFDLGVBQWY7QUFBQSwrQkFDSTtBQUFPLGlCQUFPLEVBQUVLLGVBQWUsQ0FBQ1QsU0FBaEM7QUFBQSxpQ0FDSTtBQUFLLHFCQUFTLEVBQUMsdUJBQWY7QUFBQSxvQ0FDSTtBQUFPLGtCQUFJLEVBQUMsVUFBWjtBQUF1QixnQkFBRSxFQUFFUyxlQUFlLENBQUNULFNBQTNDO0FBQXNELHNCQUFRO0FBQTlELGNBREosZUFFSTtBQUFNLHVCQUFTLEVBQUMsY0FBaEI7QUFBQSxzQ0FDSTtBQUFLLHlCQUFTLEVBQUMsYUFBZjtBQUE2QixtQkFBRyxFQUFFUyxlQUFlLENBQUNSLFdBQWxEO0FBQStELG1CQUFHLEVBQUVRLGVBQWUsQ0FBQ1A7QUFBcEYsZ0JBREosZUFFSTtBQUFNLHlCQUFTLEVBQUMsYUFBaEI7QUFBQSwwQkFBK0JPLGVBQWUsQ0FBQ047QUFBL0MsZ0JBRko7QUFBQSxjQUZKO0FBQUE7QUFESjtBQURKLFNBQW9DTyxRQUFwQyxDQURKO0FBYUgsS0FkRCxNQWNPO0FBQ0gsMEJBQ0k7QUFBSyxpQkFBUyxFQUFDLGVBQWY7QUFBQSwrQkFDSTtBQUFPLGlCQUFPLEVBQUVELGVBQWUsQ0FBQ1QsU0FBaEM7QUFBQSxpQ0FDSTtBQUFLLHFCQUFTLEVBQUMsdUJBQWY7QUFBQSxvQ0FDSTtBQUNJLGtCQUFJLEVBQUMsVUFEVDtBQUVJLGdCQUFFLEVBQUVTLGVBQWUsQ0FBQ1QsU0FGeEI7QUFHSSxtQkFBSyxFQUFFUyxlQUFlLENBQUNULFNBSDNCO0FBSUkscUJBQU8sRUFBR1csQ0FBRCxJQUFPTCxLQUFLLENBQUNNLHdCQUFOLENBQStCRCxDQUEvQjtBQUpwQixjQURKLGVBT0k7QUFBTSx1QkFBUyxFQUFDLGNBQWhCO0FBQUEsc0NBQ0k7QUFBSyx5QkFBUyxFQUFDLGFBQWY7QUFBNkIsbUJBQUcsRUFBRUYsZUFBZSxDQUFDUixXQUFsRDtBQUErRCxtQkFBRyxFQUFFUSxlQUFlLENBQUNQO0FBQXBGLGdCQURKLGVBRUk7QUFBTSx5QkFBUyxFQUFDLGFBQWhCO0FBQUEsMEJBQStCTyxlQUFlLENBQUNOO0FBQS9DLGdCQUZKO0FBQUEsY0FQSjtBQUFBO0FBREo7QUFESixTQUFvQ08sUUFBcEMsQ0FESjtBQWtCSDtBQUNKLEdBcENxQixDQUF0QjtBQXNDQSxTQUFPSCxhQUFQO0FBQ0g7O0FBRWMsU0FBU00sVUFBVCxDQUFvQlAsS0FBcEIsRUFBMkI7QUFDdEMsc0JBQ0k7QUFBUyxhQUFTLEVBQUMsYUFBbkI7QUFBQSw0QkFDSTtBQUFBO0FBQUEsTUFESixlQUVJO0FBQUE7QUFBQSxNQUZKLGVBS0k7QUFBSyxlQUFTLEVBQUMsa0JBQWY7QUFBQSw2QkFDSSx1REFBQyxnQkFBRDtBQUNJLGdDQUF3QixFQUFFQSxLQUFLLENBQUNNO0FBRHBDO0FBREosTUFMSixFQVlLTixLQUFLLENBQUNRLDZCQUFOLEtBQXdDLElBQXhDLGdCQUNLO0FBQUssZUFBUyxFQUFDLHNCQUFmO0FBQUEsOEJBQ0U7QUFBRyxpQkFBUyxFQUFDO0FBQWIsUUFERixlQUVFO0FBQU0saUJBQVMsRUFBQywyQkFBaEI7QUFBQSxrQkFDS1IsS0FBSyxDQUFDUztBQURYLFFBRkY7QUFBQSxNQURMLEdBT0ssSUFuQlY7QUFBQSxJQURKO0FBdUJIIiwiZmlsZSI6Ik5KMmUuanMiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCB3ZWJjb21pY3NNb2RlbCA9IFtcclxuICAgIHtcclxuICAgICAgICBodG1sTGFiZWw6IFwid2VidG9vblwiLFxyXG4gICAgICAgIGltYWdlU291cmNlOiBcImltYWdlcy9pY29uLXdlYnRvb24uc3ZnXCIsXHJcbiAgICAgICAgaHRtbEFsdDogXCJ3ZWJ0b29uIGljb25cIixcclxuICAgICAgICB0ZXh0OiBcIldlYnRvb25cIixcclxuICAgICAgICBkaXNhYmxlZDogZmFsc2VcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgICAgaHRtbExhYmVsOiBcInRhcGFzXCIsXHJcbiAgICAgICAgaW1hZ2VTb3VyY2U6IFwiaW1hZ2VzL2ljb24tdGFwYXMucG5nXCIsXHJcbiAgICAgICAgaHRtbEFsdDogXCJ0YXBhcyBpY29uXCIsXHJcbiAgICAgICAgdGV4dDogXCJUYXBhc1wiLFxyXG4gICAgICAgIGRpc2FibGVkOiB0cnVlXHJcbiAgICB9LFxyXG5dO1xyXG5cclxuZnVuY3Rpb24gV2ViY29taWNzT3B0aW9ucyhwcm9wcykge1xyXG5cclxuICAgIC8vIGNvbnN0IHdlYmNvbWljc0xpc3QgPSBwcm9wcy5nZXRXZWJjb21pY3NNb2RlbC5tYXAoKGN1cnJlbnRXZWJjb21pYywgdGFiaW5kZXgpID0+IHtcclxuICAgIGNvbnN0IHdlYmNvbWljc0xpc3QgPSB3ZWJjb21pY3NNb2RlbC5tYXAoKGN1cnJlbnRXZWJjb21pYywgdGFiaW5kZXgpID0+IHtcclxuXHJcbiAgICAgICAgaWYgKGN1cnJlbnRXZWJjb21pYy5kaXNhYmxlZCkge1xyXG4gICAgICAgICAgICByZXR1cm4gKFxyXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJzZWxlY3Qtb3B0aW9uXCIga2V5PXt0YWJpbmRleH0+XHJcbiAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGh0bWxGb3I9e2N1cnJlbnRXZWJjb21pYy5odG1sTGFiZWx9PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInNlbGVjdC1sYWJlbC0td3JhcHBlclwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9XCJjaGVja2JveFwiIGlkPXtjdXJyZW50V2ViY29taWMuaHRtbExhYmVsfSBkaXNhYmxlZCAvPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPVwic2VsZWN0LWxhYmVsXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBjbGFzc05hbWU9XCJzZWxlY3QtaWNvblwiIHNyYz17Y3VycmVudFdlYmNvbWljLmltYWdlU291cmNlfSBhbHQ9e2N1cnJlbnRXZWJjb21pYy5odG1sQWx0fSAvPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT1cInNlbGVjdC10ZXh0XCI+e2N1cnJlbnRXZWJjb21pYy50ZXh0fTwvc3Bhbj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgPC9sYWJlbD5cclxuICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICApXHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIChcclxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwic2VsZWN0LW9wdGlvblwiIGtleT17dGFiaW5kZXh9PlxyXG4gICAgICAgICAgICAgICAgICAgIDxsYWJlbCBodG1sRm9yPXtjdXJyZW50V2ViY29taWMuaHRtbExhYmVsfT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJzZWxlY3QtbGFiZWwtLXdyYXBwZXJcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU9XCJjaGVja2JveFwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWQ9e2N1cnJlbnRXZWJjb21pYy5odG1sTGFiZWx9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9e2N1cnJlbnRXZWJjb21pYy5odG1sTGFiZWx9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25DbGljaz17KGUpID0+IHByb3BzLm9uSGFuZGxlU2VsZWN0ZWRXZWJjb21pYyhlKX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJzZWxlY3QtbGFiZWxcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIGNsYXNzTmFtZT1cInNlbGVjdC1pY29uXCIgc3JjPXtjdXJyZW50V2ViY29taWMuaW1hZ2VTb3VyY2V9IGFsdD17Y3VycmVudFdlYmNvbWljLmh0bWxBbHR9IC8+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPVwic2VsZWN0LXRleHRcIj57Y3VycmVudFdlYmNvbWljLnRleHR9PC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICA8L2xhYmVsPlxyXG4gICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgIClcclxuICAgICAgICB9XHJcbiAgICB9KTtcclxuXHJcbiAgICByZXR1cm4gd2ViY29taWNzTGlzdDtcclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gRm9ybVNlbGVjdChwcm9wcykge1xyXG4gICAgcmV0dXJuIChcclxuICAgICAgICA8c2VjdGlvbiBjbGFzc05hbWU9XCJmb3JtLXNlbGVjdFwiPlxyXG4gICAgICAgICAgICA8aDM+Mi4gU2VsZWN0PC9oMz5cclxuICAgICAgICAgICAgPHA+U2VsZWN0IHdlYmNvbWljIHBsYXRmb3JtIHRvIGJhc2Ugc2xpY2luZyByYXRpby4gWW91IG1heSBzZWxlY3QgbW9yZSB0aGFuIG9uZS5cclxuICAgICAgICAgICAgKkN1cnJlbnRseSwgV2VidG9vbiBpcyBvbmx5IGF2YWlsYWJsZS48L3A+XHJcblxyXG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInNlbGVjdC1jb250YWluZXJcIj5cclxuICAgICAgICAgICAgICAgIDxXZWJjb21pY3NPcHRpb25zXHJcbiAgICAgICAgICAgICAgICAgICAgb25IYW5kbGVTZWxlY3RlZFdlYmNvbWljPXtwcm9wcy5vbkhhbmRsZVNlbGVjdGVkV2ViY29taWN9XHJcbiAgICAgICAgICAgICAgICAvPlxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuXHJcbiAgICAgICAgICAgIHsvKiBDT05ESVRJT04gKi99XHJcbiAgICAgICAgICAgIHtwcm9wcy5pc0FsZXJ0TWVzc2FnZVNlbGVjdEZvcm1FcnJvciA9PT0gdHJ1ZVxyXG4gICAgICAgICAgICAgICAgPyA8ZGl2IGNsYXNzTmFtZT1cImFsZXJ0LW1lc3NhZ2UtLWVycm9yXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3NOYW1lPVwiYWxlcnQtaWNvbiBhbGVydC1pY29uLS1lcnJvciBpY29uLXdhcm5pbmdcIj48L2k+XHJcbiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPVwiYWxlcnQtbWVzc2FnZS10ZXh0LS1lcnJvclwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB7cHJvcHMuZ2V0QWxlcnRNZXNzYWdlU2VsZWN0Rm9ybVRleHR9XHJcbiAgICAgICAgICAgICAgICAgICAgPC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICA6IG51bGx9XHJcbiAgICAgICAgPC9zZWN0aW9uPlxyXG4gICAgKVxyXG59Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///NJ2e\n");

/***/ }),

/***/ "OJ97":
/*!**************************************!*\
  !*** ./src/scripts/libs/createId.js ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ generateUniqueId)\n/* harmony export */ });\nfunction generateUniqueId() {\n  if (window.crypto && window.crypto.getRandomValues) {\n    return window.crypto.getRandomValues(new Uint32Array(1))[0];\n  } else {\n    return Math.random();\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zdXBlci1jb21pYy1zbGljZXIvLi9zcmMvc2NyaXB0cy9saWJzL2NyZWF0ZUlkLmpzPzM3ZGQiXSwibmFtZXMiOlsiZ2VuZXJhdGVVbmlxdWVJZCIsIndpbmRvdyIsImNyeXB0byIsImdldFJhbmRvbVZhbHVlcyIsIlVpbnQzMkFycmF5IiwiTWF0aCIsInJhbmRvbSJdLCJtYXBwaW5ncyI6Ijs7OztBQUFlLFNBQVNBLGdCQUFULEdBQTRCO0FBQ3ZDLE1BQUlDLE1BQU0sQ0FBQ0MsTUFBUCxJQUFpQkQsTUFBTSxDQUFDQyxNQUFQLENBQWNDLGVBQW5DLEVBQW9EO0FBQ2hELFdBQU9GLE1BQU0sQ0FBQ0MsTUFBUCxDQUFjQyxlQUFkLENBQThCLElBQUlDLFdBQUosQ0FBZ0IsQ0FBaEIsQ0FBOUIsRUFBa0QsQ0FBbEQsQ0FBUDtBQUNILEdBRkQsTUFFTztBQUNILFdBQU9DLElBQUksQ0FBQ0MsTUFBTCxFQUFQO0FBQ0g7QUFDSiIsImZpbGUiOiJPSjk3LmpzIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2VuZXJhdGVVbmlxdWVJZCgpIHtcclxuICAgIGlmICh3aW5kb3cuY3J5cHRvICYmIHdpbmRvdy5jcnlwdG8uZ2V0UmFuZG9tVmFsdWVzKSB7XHJcbiAgICAgICAgcmV0dXJuIHdpbmRvdy5jcnlwdG8uZ2V0UmFuZG9tVmFsdWVzKG5ldyBVaW50MzJBcnJheSgxKSlbMF07XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAgIHJldHVybiBNYXRoLnJhbmRvbSgpXHJcbiAgICB9XHJcbn0iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///OJ97\n");

/***/ })

}]);