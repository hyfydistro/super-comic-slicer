/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunksuper_comic_slicer"] = self["webpackChunksuper_comic_slicer"] || []).push([["src_scripts_components_Form_js"],{

/***/ "SYLB":
/*!****************************************!*\
  !*** ./src/scripts/components/Form.js ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Form)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"q1tI\");\n/* harmony import */ var _libs_createId__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../libs/createId */ \"OJ97\");\n/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react/jsx-runtime */ \"nKUr\");\n // import FormUpload from \"./FormUpload\";\n\nconst FormUpload = /*#__PURE__*/(0,react__WEBPACK_IMPORTED_MODULE_0__.lazy)(() => Promise.all(/*! import() */[__webpack_require__.e(\"reactreactBeautifulDnd\"), __webpack_require__.e(\"vendors-node_modules_babel_runtime_helpers_esm_inheritsLoose_js-node_modules_css-box-model_di-45dfde\"), __webpack_require__.e(\"src_scripts_components_FormUpload_js\")]).then(__webpack_require__.bind(__webpack_require__, /*! ./FormUpload.js */ \"cIB+\"))); // import FormSelect from \"./FormSelect\";\n\nconst FormSelect = /*#__PURE__*/(0,react__WEBPACK_IMPORTED_MODULE_0__.lazy)(() => __webpack_require__.e(/*! import() */ \"src_scripts_components_FormSelect_js\").then(__webpack_require__.bind(__webpack_require__, /*! ./FormSelect.js */ \"NJ2e\"))); // import FormOptions from \"./FormOptions\";\n\nconst FormOptions = /*#__PURE__*/(0,react__WEBPACK_IMPORTED_MODULE_0__.lazy)(() => __webpack_require__.e(/*! import() */ \"src_scripts_components_FormOptions_js\").then(__webpack_require__.bind(__webpack_require__, /*! ./FormOptions.js */ \"cx83\"))); // import FormResults from \"./FormResults\";\n\nconst FormResults = /*#__PURE__*/(0,react__WEBPACK_IMPORTED_MODULE_0__.lazy)(() => __webpack_require__.e(/*! import() */ \"src_scripts_components_FormResults_js\").then(__webpack_require__.bind(__webpack_require__, /*! ./FormResults */ \"e3DQ\"))); // Modules\n// Dynamic imports\n// import { saveAs } from \"file-saver\";\n// import JSZip from \"jszip\";\n\nasync function saveAndDownloadFiles(selectedFileExtension, processImages, Selectedwebcomics, webcomicIndex) {\n  const JSZip = await __webpack_require__.e(/*! import() */ \"vendors-node_modules_jszip_dist_jszip_js\").then(__webpack_require__.t.bind(__webpack_require__, /*! jszip/dist/jszip.js */ \"g1Xn\", 23));\n  const fileSaver = await __webpack_require__.e(/*! import() */ \"node_modules_file-saver_dist_FileSaver_min_js\").then(__webpack_require__.t.bind(__webpack_require__, /*! file-saver */ \"Iab2\", 23));\n  const JSZipConstructor = JSZip.default;\n  const saveAs = fileSaver.default;\n  const zip = new JSZipConstructor();\n  const selectedFileExt = selectedFileExtension; // NOTE: Naming is padded with zero of tens\n  // Over tens are unavailable\n\n  for (let i = 0; i < processImages.length; i++) {\n    let fileName;\n\n    if (i > 10) {\n      fileName = `${i}.${selectedFileExt}`;\n    } else {\n      fileName = `${i.toString().padStart(2, \"0\")}.${selectedFileExt}`;\n    }\n\n    zip.file(fileName, processImages[i].substr(processImages[i].indexOf(',') + 1), {\n      base64: true\n    });\n  }\n\n  zip.generateAsync({\n    type: \"blob\",\n    mimeType: \"image/jpeg\"\n  }).then(function (blob) {\n    saveAs(blob, `${Selectedwebcomics[webcomicIndex]}.zip`);\n  });\n} // libs\n\n\n // TODO: FEATURE (NEXT UPDATE)\n// \"Rotate\" button in Preview thumb\n// Also see in 'FormUpload.js'\n\n\n\nconst alertMessages = {\n  onSuccess: {\n    filesRemoved: \"Files were cleared.\",\n    completedProcess: \"Process completed!\"\n  },\n  onError: {\n    unacceptableFileType: \"File extensions not supported! Only PNG and JPEG (or JPG) allowed.\",\n    overMaxFileSize: \"Total file size is over maximum. Remove some files to continue.\",\n    noFilesFound: \"No images found to process. Upload some images to 'Begin Slice'!\",\n    selectFormMandatory: \"Please check at least one webcomic platform under '2. Select'.\",\n    selectFormMandatoryTarget: \"Check at least one in order to continue.\"\n  },\n  onWarning: {\n    nearMaxFileSize: \"Total file size is near maximum!\"\n  }\n}; // Accepted file types\n\nconst fileTypes = ['image/jpeg', 'image/jpg', 'image/png'];\n\nfunction validFileType(file) {\n  return fileTypes.includes(file);\n}\n\nclass Form extends react__WEBPACK_IMPORTED_MODULE_0__.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      // # STYLES EVENT\n      // EVENT: onDragOver\n      isDragOver: false,\n      dropzoneBordersClass: {\n        highlight: \"dropzone dropzone--over\",\n        default: \"dropzone\"\n      },\n      inputDataAvailable: false,\n      // EVENT: onClick\n      // \"Begin Slice!\" button\n      sliceText: \"slice-btn\",\n      // EVENT: conditional\n      // div class \"preview-wrapper\"\n      previewWrapperClass: {\n        visible: \"preview-wrapper\",\n        invisible: \"preview-wrapper hidden\"\n      },\n      // # ALERT MESSAGES AND STATE\n      // Success\n      isAlertMessageSuccess: false,\n      alertMessageSuccess: \"\",\n      // Error\n      isAlertMessageError: false,\n      alertMessageError: \"\",\n      // Warning\n      isAlertMessageWarning: false,\n      alertMessageWarning: \"\",\n      // Error on \"Begin Slice!\"\n      isAlertMessageErrorOnBeginSliceBtn: false,\n      alertMessageErrorOnBeginSliceBtn: \"\",\n      // Success on \"Begin Slice!\"\n      isAlertMessageSuccessOnBeginSliceBtn: false,\n      alertMessageSuccessOnBeginSliceBtn: \"\",\n      // Error on none webcomic platform selected\n      isAlertMessageErrorOnSelectForm: false,\n      alertMessageErrorOnSelectForm: \"\",\n      // # DATA\n      processedFileData: [],\n      inputField: [],\n      // inputField: [\n      //     {\n      //         fileRead: [<obj>],\n      //         id: <number>\n      //         fileSize: <number>\n      //     }\n      // ]\n      totalFileSize: 0,\n      // Byte measurement\n      selectedWebcomics: [],\n      selectedFileExtension: \"jpeg\",\n      // default value\n      selectedSquashLevel: \"none\"\n    }; // # METHODS\n\n    this.handleDrag = this.handleDrag.bind(this);\n    this.handleDragLeave = this.handleDragLeave.bind(this);\n    this.handleFileDrop = this.handleFileDrop.bind(this);\n    this.processResults = this.processResults.bind(this);\n    this.handleBeginSlicBtn = this.handleBeginSlicBtn.bind(this); // TOGGLE CLASS\n\n    this.toggleBeginSliceText = this.toggleBeginSliceText.bind(this);\n    this.handleDragEnd = this.handleDragEnd.bind(this); // DATA MANAGEMENT\n    // DELETE Data\n\n    this.handleRemoveSelf = this.handleRemoveSelf.bind(this);\n    this.handleClickToRemoveAll = this.handleClickToRemoveAll.bind(this); // SET file data\n\n    this.setFilesData = this.setFilesData.bind(this); // GET total file size\n\n    this.checkTotalFileSize = this.checkTotalFileSize.bind(this); // UPLOAD on file browse\n\n    this.handleInputChange = this.handleInputChange.bind(this);\n    this.handleSelectedWebcomic = this.handleSelectedWebcomic.bind(this);\n    this.handleOptionsFileExtenions = this.handleOptionsFileExtenions.bind(this);\n    this.handleOptionsSquashLevel = this.handleOptionsSquashLevel.bind(this);\n  } // ===============\n  // # REACT METHODS\n  // ===============\n  // componentWillUnmount() {\n  //     console.log(\"UNMOUNTING...\");\n  // }\n  // componentDidMount() {\n  //     console.log(\"MOUNTING...\");\n  // }\n  // componentDidUpdate() {\n  //     console.log(\"COMPONENT UPDATING...\");\n  // }\n  // ========\n  // # EVENTS\n  // ========\n  // event: drag\n\n\n  handleDrag(e) {\n    e.preventDefault();\n    e.stopPropagation();\n    this.setState({\n      isDragOver: true\n    });\n  } // event: drag\n\n\n  handleDragLeave(e) {\n    e.preventDefault(e);\n    e.stopPropagation();\n    this.setState({\n      isDragOver: false\n    });\n  } // event: drag\n  // Reorder files\n\n\n  handleDragEnd(result) {\n    // CREATE shallow copy\n    const items = Array.from(this.state.inputField); // EXTRACT targeted item\n\n    const [reorderedItem] = items.splice(result.source.index, 1); // PUSH targeted item into new order\n\n    items.splice(result.destination.index, 0, reorderedItem);\n    this.setState({\n      inputField: items\n    });\n  } // event: click\n  // Open browser for files\n\n\n  handleClickToUpload() {\n    const dropzoneInput = document.querySelector(\".dropzone__input\"); // EMULATE HTML input CLICK event\n\n    dropzoneInput.click();\n  } // event: click\n  // UPDATE state 'selectedFileExtension'\n\n\n  handleOptionsFileExtenions(e) {\n    const newSelectedFileExtension = e.target.value;\n    this.setState({\n      selectedFileExtension: newSelectedFileExtension\n    });\n  } // event: click\n  // UPDATE state 'selectedSquashLevel'\n\n\n  handleOptionsSquashLevel(e) {\n    const newSelectedSquashLevel = parseInt(e.target.value, 10);\n\n    if (newSelectedSquashLevel == 0) {\n      this.setState({\n        selectedSquashLevel: \"none\"\n      });\n    } else {\n      this.setState({\n        selectedSquashLevel: newSelectedSquashLevel\n      });\n    }\n  } // event: click\n  // \"Begin Slice!\" button\n\n\n  handleBeginSlicBtn(e) {\n    e.preventDefault();\n\n    if (this.state.inputField.length === 0) {\n      // ALERT MESSAGE\n      // No data (or image file) found\n      this.setState({\n        isAlertMessageErrorOnBeginSliceBtn: true,\n        alertMessageErrorOnBeginSliceBtn: alertMessages.onError.noFilesFound\n      });\n      setTimeout(() => {\n        this.setState({\n          isAlertMessageErrorOnBeginSliceBtn: false,\n          alertMessageErrorOnBeginSliceBtn: \"\"\n        });\n      }, 8000);\n    } else {\n      if (this.state.selectedWebcomics.length === 0) {\n        // ALERT MESSAGE (PERSIST)\n        // No webcomic platform selected\n        this.setState({\n          isAlertMessageErrorOnBeginSliceBtn: true,\n          alertMessageErrorOnBeginSliceBtn: alertMessages.onError.selectFormMandatory,\n          isAlertMessageErrorOnSelectForm: true,\n          alertMessageErrorOnSelectForm: alertMessages.onError.selectFormMandatoryTarget\n        });\n      } else {\n        // ALERT MESSAGE (PERSIST -> REMOVED)\n        this.setState({\n          isAlertMessageErrorOnBeginSliceBtn: false,\n          alertMessageErrorOnBeginSliceBtn: \"\",\n          isAlertMessageErrorOnSelectForm: false,\n          alertMessageErrorOnSelectForm: \"\"\n        });\n        this.processResults(); // ANIMATION\n\n        this.toggleBeginSliceText();\n        setTimeout(() => {\n          this.toggleBeginSliceText();\n        }, 1500);\n      }\n    }\n  } // event: click\n  // \"X\" button\n  // REMOVE current thumb UI\n  // REMOVE current thumb data\n\n\n  handleRemoveSelf(e) {\n    e.preventDefault(); // GRAB all list\n\n    const sourceThumbnails = document.querySelectorAll(\".preview__thumbnail-container\"); // TRANSFORM node into JavaScript objects (array)\n\n    const arrThumbnails = Array.from(sourceThumbnails); // CREATE shallow copy\n\n    const items = Array.from(this.state.inputField); // GET index of targeted item\n\n    const removeItemIndex = arrThumbnails.indexOf(e.target.parentElement); // UPDATE state totalFileSize\n\n    this.setState(currentState => {\n      // GET data\n      const sourceInputField = Array.from(currentState.inputField); // GET data 'fileSize'\n\n      const fileSizesArr = sourceInputField.map(file => {\n        return file.fileSize;\n      }); // SUM all data 'fileSize'\n\n      const totalFileByte = fileSizesArr.reduce((accumulator, currentValue) => accumulator + currentValue); // EXTRACT targeted item 'fileSize'\n\n      const removedItemFileSize = sourceInputField[removeItemIndex][\"fileSize\"]; // SUBTRACT 'totalFileSize' - targeted item 'fileSize'\n\n      const newTotalFileSize = totalFileByte - removedItemFileSize;\n      return {\n        totalFileSize: newTotalFileSize\n      }; // UPDATE UI\n    }, this.checkTotalFileSize()); // REMOVE targeted item\n\n    items.splice(removeItemIndex, 1); // UPDATE data\n\n    this.setState({\n      inputField: items\n    });\n  } // event: click\n  // EMPTY state \"inputField\"\n  // \"Clear Files\" button\n\n\n  handleClickToRemoveAll() {\n    // ALERT MESSAGE\n    // UPDATE data\n    this.setState({\n      inputField: [],\n      inputDataAvailable: false,\n      isAlertMessageSuccess: true,\n      alertMessageSuccess: alertMessages.onSuccess.filesRemoved\n    });\n    setTimeout(() => {\n      this.setState({\n        isAlertMessageSuccess: false,\n        alertMessageSuccess: \"\"\n      });\n    }, 8000);\n  } // event: change\n  // LIStEN to user on CLICK to upload file\n  // if user selects file(s), proceed to process image files methods\n\n\n  handleInputChange(e) {\n    const files = e.target.files;\n    this.setFilesData(files); // UPDATE UI on CONDITION\n\n    if (this.state.inputField) {\n      this.setState({\n        inputDataAvailable: true\n      });\n    }\n  } // event: click\n  // UPDATE state 'selectedWebcomics'\n\n\n  handleSelectedWebcomic(e) {\n    const selectedWebcomicValue = e.target.value;\n    const currentSelectedWebcomics = this.state.selectedWebcomics;\n\n    if (currentSelectedWebcomics.includes(selectedWebcomicValue)) {\n      // UNCHECK\n      const removeItemIndex = currentSelectedWebcomics.indexOf(selectedWebcomicValue);\n      currentSelectedWebcomics.splice(removeItemIndex, 1);\n      this.setState({\n        selectedWebcomics: currentSelectedWebcomics\n      });\n    } else {\n      // CHECK\n      this.setState(currentState => ({\n        selectedWebcomics: [...currentState.selectedWebcomics, selectedWebcomicValue]\n      }));\n    }\n  } // =========\n  // # METHODS\n  // =========\n  // TOGGLE\n  // \"Begin Slice\" Text\n\n\n  toggleBeginSliceText() {\n    if (this.state.sliceText === \"slice-btn\") {\n      this.setState({\n        sliceText: \"icon-spinner8 animate-spin\"\n      });\n    } else if (this.state.sliceText === \"icon-spinner8 animate-spin\") {\n      this.setState({\n        sliceText: \"slice-btn\"\n      });\n    }\n  } // FETCHING FILE READ\n  // - VALIDATE file on upload\n  // - UPDATE state \"inputField\"\n  // - TOGGLE class\n\n\n  handleFileDrop(e) {\n    e.preventDefault();\n    e.stopPropagation();\n    const files = e.dataTransfer.files;\n    this.setFilesData(files); // UPDATE data boolean (for other chain reactions)\n\n    if (this.state.inputField) {\n      this.setState({\n        inputDataAvailable: true\n      });\n    }\n\n    this.setState({\n      isDragOver: false\n    });\n  }\n\n  setFilesData(files) {\n    Object.values(files).forEach(obj => {\n      // VALIDATE\n      if (!validFileType(obj.type)) {\n        // ALERT MESSAGE\n        // User attempted to upload unacceptable files\n        this.setState({\n          alertMessageError: alertMessages.onError.unacceptableFileType,\n          isAlertMessageError: true\n        });\n        setTimeout(() => {\n          this.setState({\n            alertMessageError: \"\",\n            isAlertMessageError: false\n          });\n        }, 8000);\n      } else {\n        // CREATE image file data preview container\n        this.setState(currentState => ({\n          inputField: [...currentState.inputField, {\n            fileRead: obj,\n            id: (0,_libs_createId__WEBPACK_IMPORTED_MODULE_2__.default)(),\n            fileSize: obj.size\n          }]\n        })); // UPDATE state 'totalFileSize'\n\n        this.setState(currentState => {\n          // GET main data\n          const sourceInputField = currentState.inputField; // GET main data 'fileSize'\n\n          const fileSizesArr = sourceInputField.map(file => {\n            return file.fileSize;\n          }); // TOTAL main data 'fileSize'\n\n          const totalFileByte = fileSizesArr.reduce((accumulator, currentValue) => accumulator + currentValue);\n          return {\n            totalFileSize: totalFileByte\n          }; // CHECK CONDITION\n        }, this.checkTotalFileSize());\n      }\n    });\n  } // CHECK CONDITION\n  // UPDATE UI if CONDITION are met\n\n\n  checkTotalFileSize() {\n    // ALERT MESSAGE\n    // CONDITION\n    // near max, pass 18MB\n    if (this.state.totalFileSize >= 18874368) {\n      this.setState({\n        isAlertMessageWarning: true,\n        alertMessageWarning: alertMessages.onWarning.nearMaxFileSize\n      });\n    } // ALERT MESSAGE\n    // CONDITION\n    // over max, pass 20MB\n\n\n    if (this.state.totalFileSize >= 20971520) {\n      this.setState({\n        isAlertMessageError: true,\n        alertMessageError: alertMessages.onError.overMaxFileSize\n      });\n    }\n  } // PROCESS IMAGE FILES\n\n\n  processResults() {\n    // GET all image file elements\n    const sourceImagesRaw = document.querySelectorAll(\".preview__thumbnail img\"); // REFERENCE the canvas\n\n    const canvas = document.querySelector(\"#canvas\");\n    const context = canvas.getContext(\"2d\"); // TRANSFORM node into JavaScript objects (array)\n\n    const sourceImages = Array.from(sourceImagesRaw); // GET user selected webcomic platform(s) from SELECT form component\n\n    const Selectedwebcomics = this.state.selectedWebcomics; // # (1) SELECT form\n    // PROCESS files for all selected webcomic platform applied\n\n    for (let i = 0; i < Selectedwebcomics.length; i++) {\n      let processImages = []; // PROCESS image file\n\n      sourceImages.forEach(img => {\n        const imgWidth = img.naturalWidth;\n        const imgHeight = img.naturalHeight; // * CONDITION: image width > image height\n        // ROTATE image\n\n        if (imgWidth > imgHeight) {\n          // NOTE:\n          // Bottom surface would be pointed left, and\n          // Top surface would be pointed right\n          canvas.width = imgHeight;\n          canvas.height = imgWidth;\n          context.rotate(Math.PI / 2);\n          context.drawImage(img, 0, -imgHeight);\n        }\n\n        const maxHeight = imgHeight;\n        const width = imgWidth;\n        let scaleWidth; // # (2) OPTIONS form - \"SQUASH\"\n\n        switch (this.state.selectedSquashLevel) {\n          case \"none\":\n            scaleWidth = width;\n            break;\n\n          case 400:\n            scaleWidth = 400;\n            break;\n\n          case 500:\n            scaleWidth = 500;\n            break;\n\n          case 600:\n            scaleWidth = 600;\n            break;\n\n          case 700:\n            scaleWidth = 700;\n            break;\n        }\n\n        let webcomicMaxWidth;\n        let webcomicMaxHeight; // TODO: FEATURE (NEXT UPDATE)\n        // Find out normal tapas ratio\n        // Current Webcomic Platform Available...\n        // ! tapas in the works... (WIP)\n\n        switch (Selectedwebcomics[i]) {\n          case \"webtoon\":\n            webcomicMaxWidth = 800;\n            webcomicMaxHeight = 1280;\n            break;\n\n          case \"tapas\":\n            webcomicMaxWidth = 960;\n            webcomicMaxHeight = 1440;\n            break;\n        }\n\n        const aspectRatio = webcomicMaxWidth / webcomicMaxHeight; // based on aspect ratio, what the height should be...\n\n        const determinedeHeight = width / aspectRatio;\n        let scaleDeterminedeHeight = determinedeHeight;\n\n        if (scaleWidth !== width) {\n          scaleDeterminedeHeight = scaleWidth / aspectRatio;\n        } // * CONDITION:\n        // If file image naturalHeight is shorter than determinedHeight,\n        // return as is... unless Options scale applied\n\n\n        if (determinedeHeight > maxHeight) {\n          const scaleMaxHeight = scaleWidth / (width / maxHeight);\n          canvas.width = scaleWidth;\n          canvas.height = scaleMaxHeight;\n          context.drawImage(img, 0, 0, scaleWidth, scaleMaxHeight);\n          const result = canvas.toDataURL();\n          processImages.push(result);\n        } else {\n          let timesToSlice = Math.floor(maxHeight / determinedeHeight);\n          let currentSlice = 0;\n          let newYPosition = 0;\n          let slicedImages = []; // * CONDITION: Longer length (height) images\n\n          while (timesToSlice > currentSlice) {\n            newYPosition = determinedeHeight * currentSlice;\n            canvas.width = scaleWidth;\n            canvas.height = scaleDeterminedeHeight;\n            context.drawImage(img, 0, newYPosition, width, determinedeHeight, 0, 0, scaleWidth, scaleDeterminedeHeight);\n            slicedImages.push(canvas.toDataURL());\n            currentSlice++;\n          } // * CONDTION: Odd number remaining\n          // GET last coordinate\n          // GET remaining height\n\n\n          const remainCoordinateY = timesToSlice * determinedeHeight;\n          const remainHeight = maxHeight - remainCoordinateY; // OPTIONS Squash - if available\n\n          let scaleRemaineHeight = remainHeight;\n\n          if (scaleWidth !== width) {\n            scaleRemaineHeight = scaleWidth / (width / remainHeight);\n          }\n\n          if (remainHeight !== 0) {\n            newYPosition = remainCoordinateY; // ? Refactor to a function\n\n            canvas.width = scaleWidth;\n            canvas.height = scaleRemaineHeight;\n            context.drawImage(img, 0, newYPosition, width, remainHeight, 0, 0, scaleWidth, scaleRemaineHeight);\n            slicedImages.push(canvas.toDataURL());\n          }\n\n          processImages.push(...slicedImages);\n        }\n      }); // CREATE Zip folder\n      // NAME images with padded zero if under 10s\n      // GET user file extension prefernce from Options form - File Extensions\n      // PUSH images to Zip folder\n      // DOWNLOAD to user's PC\n\n      saveAndDownloadFiles(this.state.selectedFileExtension, processImages, Selectedwebcomics, i).then(() => {\n        if (Selectedwebcomics.indexOf(Selectedwebcomics[i]) == Selectedwebcomics.indexOf(Selectedwebcomics[Selectedwebcomics.length - 1])) {\n          // ALERT MESSAGE\n          // Process completed\n          this.setState({\n            isAlertMessageSuccessOnBeginSliceBtn: true,\n            alertMessageSuccessOnBeginSliceBtn: alertMessages.onSuccess.completedProcess\n          });\n          setTimeout(() => {\n            this.setState({\n              isAlertMessageSuccessOnBeginSliceBtn: false,\n              alertMessageSuccessOnBeginSliceBtn: \"\"\n            });\n          }, 8000);\n        }\n      }); // ADD image 'data:' url arr of processed image files\n      // RESPONDS to display in Result form\n\n      this.setState({\n        processedFileData: processImages\n      });\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(\"main\", {\n      children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"h2\", {\n        children: \"Start Here\"\n      }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(react__WEBPACK_IMPORTED_MODULE_0__.Suspense, {\n        fallback: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"div\", {\n          children: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"p\", {\n            children: \"LOADING...\"\n          })\n        }),\n        children: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(FormUpload // EVENTS\n        , {\n          onHandleDrag: this.handleDrag,\n          onHandleDragLeave: this.handleDragLeave,\n          onHandleFileDrop: this.handleFileDrop,\n          onRemoveSelf: this.handleRemoveSelf,\n          onhandleDragEnd: this.handleDragEnd,\n          onHandleClickToUpload: this.handleClickToUpload,\n          onHandleInputChange: this.handleInputChange,\n          onHandleClickToRemoveAll: this.handleClickToRemoveAll // STYLED EVENTS\n          ,\n          toggleDropzoneBordersClass: this.state.isDragOver ? this.state.dropzoneBordersClass.highlight : this.state.dropzoneBordersClass.default,\n          togglePreviewWrapperClass: this.state.inputDataAvailable ? this.state.previewWrapperClass.visible : this.state.previewWrapperClass.invisible // ALERT MESSAGES\n          ,\n          getAlertErrorText: this.state.alertMessageError,\n          isAlertMessageError: this.state.isAlertMessageError,\n          getAlertSuccessText: this.state.alertMessageSuccess,\n          isAlertMessageSuccess: this.state.isAlertMessageSuccess,\n          isAlertMessageWarning: this.state.isAlertMessageWarning,\n          getAlertWarningText: this.state.alertMessageWarning // DATAS\n          ,\n          inputField: this.state.inputField,\n          getTotalFileSize: this.state.totalFileSize\n        })\n      }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(react__WEBPACK_IMPORTED_MODULE_0__.Suspense, {\n        fallback: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"div\", {\n          children: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"p\", {\n            children: \"LOADING...\"\n          })\n        }),\n        children: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(FormSelect, {\n          onHandleSelectedWebcomic: this.handleSelectedWebcomic,\n          isAlertMessageSelectFormError: this.state.isAlertMessageErrorOnSelectForm,\n          getAlertMessageSelectFormText: this.state.alertMessageErrorOnSelectForm\n        })\n      }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(react__WEBPACK_IMPORTED_MODULE_0__.Suspense, {\n        fallback: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"div\", {\n          children: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"p\", {\n            children: \"LOADING...\"\n          })\n        }),\n        children: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(FormOptions, {\n          onHandleOptionsFileExtenions: this.handleOptionsFileExtenions,\n          onHandleOptionsSquashLevel: this.handleOptionsSquashLevel\n        })\n      }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"div\", {\n        className: \"slice-btn-container\",\n        children: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"a\", {\n          className: \"slice-btn\",\n          onClick: this.handleBeginSlicBtn,\n          children: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"h3\", {\n            children: this.state.sliceText === \"slice-btn\" ? \"Begin Slice!\" : /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"i\", {\n              className: \"icon-spinner8 animate-spin\"\n            })\n          })\n        })\n      }), this.state.isAlertMessageErrorOnBeginSliceBtn === true ? /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(\"div\", {\n        className: \"alert-message--error\",\n        children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"i\", {\n          className: \"alert-icon alert-icon--error icon-warning\"\n        }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"span\", {\n          className: \"alert-message-text--error\",\n          children: this.state.alertMessageErrorOnBeginSliceBtn\n        })]\n      }) : null, this.state.isAlertMessageSuccessOnBeginSliceBtn === true ? /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(\"div\", {\n        className: \"alert-message--success\",\n        children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"i\", {\n          className: \"alert-icon alert-icon--success icon-check\"\n        }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"span\", {\n          className: \"alert-message-text--success\",\n          children: this.state.alertMessageSuccessOnBeginSliceBtn\n        })]\n      }) : null, /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(react__WEBPACK_IMPORTED_MODULE_0__.Suspense, {\n        fallback: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"div\", {\n          children: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"p\", {\n            children: \"LOADING...\"\n          })\n        }),\n        children: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(FormResults, {\n          getImageData: this.state.processedFileData\n        })\n      })]\n    });\n  }\n\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///SYLB\n");

/***/ }),

/***/ "OJ97":
/*!**************************************!*\
  !*** ./src/scripts/libs/createId.js ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ generateUniqueId)\n/* harmony export */ });\nfunction generateUniqueId() {\n  if (window.crypto && window.crypto.getRandomValues) {\n    return window.crypto.getRandomValues(new Uint32Array(1))[0];\n  } else {\n    return Math.random();\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zdXBlci1jb21pYy1zbGljZXIvLi9zcmMvc2NyaXB0cy9saWJzL2NyZWF0ZUlkLmpzPzM3ZGQiXSwibmFtZXMiOlsiZ2VuZXJhdGVVbmlxdWVJZCIsIndpbmRvdyIsImNyeXB0byIsImdldFJhbmRvbVZhbHVlcyIsIlVpbnQzMkFycmF5IiwiTWF0aCIsInJhbmRvbSJdLCJtYXBwaW5ncyI6Ijs7OztBQUFlLFNBQVNBLGdCQUFULEdBQTRCO0FBQ3ZDLE1BQUlDLE1BQU0sQ0FBQ0MsTUFBUCxJQUFpQkQsTUFBTSxDQUFDQyxNQUFQLENBQWNDLGVBQW5DLEVBQW9EO0FBQ2hELFdBQU9GLE1BQU0sQ0FBQ0MsTUFBUCxDQUFjQyxlQUFkLENBQThCLElBQUlDLFdBQUosQ0FBZ0IsQ0FBaEIsQ0FBOUIsRUFBa0QsQ0FBbEQsQ0FBUDtBQUNILEdBRkQsTUFFTztBQUNILFdBQU9DLElBQUksQ0FBQ0MsTUFBTCxFQUFQO0FBQ0g7QUFDSiIsImZpbGUiOiJPSjk3LmpzIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2VuZXJhdGVVbmlxdWVJZCgpIHtcclxuICAgIGlmICh3aW5kb3cuY3J5cHRvICYmIHdpbmRvdy5jcnlwdG8uZ2V0UmFuZG9tVmFsdWVzKSB7XHJcbiAgICAgICAgcmV0dXJuIHdpbmRvdy5jcnlwdG8uZ2V0UmFuZG9tVmFsdWVzKG5ldyBVaW50MzJBcnJheSgxKSlbMF07XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAgIHJldHVybiBNYXRoLnJhbmRvbSgpXHJcbiAgICB9XHJcbn0iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///OJ97\n");

/***/ })

}]);