(self.webpackChunksuper_comic_slicer=self.webpackChunksuper_comic_slicer||[]).push([[680],{352:(__unused_webpack_module,__unused_webpack___webpack_exports__,__webpack_require__)=>{"use strict";eval('\n// EXTERNAL MODULE: ./node_modules/react/index.js\nvar react = __webpack_require__(294);\n// EXTERNAL MODULE: ./node_modules/react-dom/index.js\nvar react_dom = __webpack_require__(935);\n// EXTERNAL MODULE: ./node_modules/react-beautiful-dnd/dist/react-beautiful-dnd.esm.js\nvar react_beautiful_dnd_esm = __webpack_require__(948);\n;// CONCATENATED MODULE: ./src/scripts/libs/convertBytes.js\nfunction returnFileSize(number) {\n  if (number < 1024) {\n    return number + \'bytes\';\n  } else if (number >= 1024 && number < 1048576) {\n    return (number / 1024).toFixed(1) + \'KB\';\n  } else if (number >= 1048576) {\n    return (number / 1048576).toFixed(1) + \'MB\';\n  }\n}\n// EXTERNAL MODULE: ./node_modules/react/jsx-runtime.js\nvar jsx_runtime = __webpack_require__(893);\n;// CONCATENATED MODULE: ./src/scripts/components/FormUpload.js\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n // libs\n\n // TODO: FEATURE (NEXT UPDATE)\n// "Rotate" button in Preview thumb\n// Also see in \'Form.js\'\n// ? bullet point guidelines instead of one line paragraph\n\n\n\n\nfunction Thumbnails(props) {\n  var files = props.inputField;\n  var previewThumbnailElements;\n\n  if (files) {\n    previewThumbnailElements = files.map(function (file, index) {\n      var reader = new FileReader();\n      reader.readAsDataURL(file.fileRead);\n      reader.addEventListener("load", getDataURL);\n\n      function getDataURL() {\n        var currentElement = document.querySelectorAll(".preview__thumbnail-container")[index].lastElementChild.firstElementChild;\n        currentElement.src = reader.result;\n      }\n\n      return /*#__PURE__*/(0,jsx_runtime.jsx)(react_beautiful_dnd_esm/* Draggable */._l, {\n        draggableId: file.id.toString(),\n        index: index,\n        children: function children(provided) {\n          return /*#__PURE__*/(0,jsx_runtime.jsxs)("div", _objectSpread(_objectSpread(_objectSpread({\n            className: "preview__thumbnail-container",\n            "data-label": JSON.stringify(file.fileRead.name),\n            ref: provided.innerRef\n          }, provided.draggableProps), provided.dragHandleProps), {}, {\n            children: [/*#__PURE__*/(0,jsx_runtime.jsx)("button", {\n              className: "close-btn",\n              onClick: function onClick(e) {\n                return props.onRemoveSelf(e);\n              },\n              children: /*#__PURE__*/(0,jsx_runtime.jsxs)("span", {\n                class: "icon-remove",\n                children: [/*#__PURE__*/(0,jsx_runtime.jsx)("span", {\n                  class: "path1"\n                }), /*#__PURE__*/(0,jsx_runtime.jsx)("span", {\n                  class: "path2"\n                }), /*#__PURE__*/(0,jsx_runtime.jsx)("span", {\n                  class: "path3"\n                })]\n              })\n            }), /*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n              className: "preview__thumbnail",\n              children: /*#__PURE__*/(0,jsx_runtime.jsx)("img", {\n                alt: ""\n              })\n            })]\n          }));\n        }\n      }, file.id);\n    });\n  }\n\n  return previewThumbnailElements;\n}\n\nfunction Preview(props) {\n  return /*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n    className: props.togglePreviewWrapperClass,\n    children: /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n      className: "preview-container",\n      children: [/*#__PURE__*/(0,jsx_runtime.jsx)(react_beautiful_dnd_esm/* DragDropContext */.Z5, {\n        onDragEnd: props.onhandleDragEnd,\n        children: /*#__PURE__*/(0,jsx_runtime.jsx)(react_beautiful_dnd_esm/* Droppable */.bK, {\n          droppableId: "preview",\n          direction: "horizontal",\n          children: function children(provided) {\n            return /*#__PURE__*/(0,jsx_runtime.jsxs)("div", _objectSpread(_objectSpread({\n              className: "preview"\n            }, provided.droppableProps), {}, {\n              ref: provided.innerRef,\n              children: [/*#__PURE__*/(0,jsx_runtime.jsx)(Thumbnails, {\n                inputField: props.inputField,\n                onRemoveSelf: props.onRemoveSelf\n              }), provided.placeholder]\n            }));\n          }\n        })\n      }), /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n        className: "preview__clear-btn-container",\n        children: [/*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n          className: "file-size__container",\n          children: /*#__PURE__*/(0,jsx_runtime.jsxs)("span", {\n            className: "file-size-text",\n            children: ["Total File Size: ", returnFileSize(props.getTotalFileSize)]\n          })\n        }), /*#__PURE__*/(0,jsx_runtime.jsx)("button", {\n          className: "preview__clear-btn",\n          onClick: props.onHandleClickToRemoveAll,\n          children: "Clear Files"\n        })]\n      })]\n    })\n  });\n}\n\nfunction Dropzone(props) {\n  return /*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n    className: "dropzone-container",\n    children: /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n      className: props.toggleDropzoneBordersClass,\n      onDragOver: function onDragOver(e) {\n        return props.onHandleDrag(e);\n      },\n      onDragEnter: function onDragEnter(e) {\n        return props.onHandleDrag(e);\n      },\n      onDragEnd: function onDragEnd(e) {\n        return props.onHandleDragLeave(e);\n      },\n      onDragLeave: function onDragLeave(e) {\n        return props.onHandleDragLeave(e);\n      },\n      onDrop: function onDrop(e) {\n        return props.onHandleFileDrop(e);\n      },\n      onClick: props.onHandleClickToUpload,\n      children: [/*#__PURE__*/(0,jsx_runtime.jsx)("i", {\n        className: "dropzone__upload-icon icon-upload"\n      }), /*#__PURE__*/(0,jsx_runtime.jsx)("p", {\n        children: "Drag & Drop or Click here"\n      }), /*#__PURE__*/(0,jsx_runtime.jsx)("p", {\n        className: "text-small",\n        children: "to upload your files (max. 20MB)"\n      }), /*#__PURE__*/(0,jsx_runtime.jsx)("input", {\n        onChange: function onChange(e) {\n          return props.onHandleInputChange(e);\n        },\n        className: "dropzone__input",\n        type: "file",\n        accept: "image/png, image/jpeg",\n        multiple: true\n      })]\n    })\n  });\n}\n\nfunction FormUpload(props) {\n  return /*#__PURE__*/(0,jsx_runtime.jsxs)("section", {\n    className: "form-upload",\n    children: [/*#__PURE__*/(0,jsx_runtime.jsx)("h3", {\n      children: "1. Upload"\n    }), /*#__PURE__*/(0,jsx_runtime.jsx)("p", {\n      children: "Currently, PNG and JPEG (including JPG) are accepted. If width of image is larger than height, it will be returned as is unless Options Squash chosen."\n    }), /*#__PURE__*/(0,jsx_runtime.jsx)(Dropzone // EVENTS\n    , {\n      onHandleDrag: props.onHandleDrag,\n      onHandleDragLeave: function onHandleDragLeave(e) {\n        return props.onHandleDragLeave(e);\n      },\n      onHandleFileDrop: function onHandleFileDrop(e) {\n        return props.onHandleFileDrop(e);\n      },\n      onHandleInputChange: function onHandleInputChange(e) {\n        return props.onHandleInputChange(e);\n      },\n      onHandleClickToUpload: props.onHandleClickToUpload,\n      onHandleChange: props.onHandleChange // STYLE EVENTS\n      ,\n      toggleDropzoneBordersClass: props.toggleDropzoneBordersClass\n    }), props.isAlertMessageError === true ? /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n      className: "alert-message--error",\n      children: [/*#__PURE__*/(0,jsx_runtime.jsx)("i", {\n        className: "alert-icon alert-icon--error icon-warning"\n      }), /*#__PURE__*/(0,jsx_runtime.jsx)("span", {\n        className: "alert-message-text--error",\n        children: props.getAlertErrorText\n      })]\n    }) : null, props.isAlertMessageSuccess === true ? /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n      className: "alert-message--success",\n      children: [/*#__PURE__*/(0,jsx_runtime.jsx)("i", {\n        className: "alert-icon alert-icon--success icon-check"\n      }), /*#__PURE__*/(0,jsx_runtime.jsx)("span", {\n        className: "alert-message-text--success",\n        children: props.getAlertSuccessText\n      })]\n    }) : null, props.isAlertMessageWarning === true ? /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n      className: "alert-message--warning",\n      children: [/*#__PURE__*/(0,jsx_runtime.jsx)("i", {\n        className: "alert-icon alert-icon--warning icon-warning"\n      }), /*#__PURE__*/(0,jsx_runtime.jsx)("span", {\n        className: "alert-message-text--warning",\n        children: props.getAlertWarningText\n      })]\n    }) : null, props.inputField.length !== 0 ? /*#__PURE__*/(0,jsx_runtime.jsx)("p", {\n      children: "If you have more than one image file, you may drag and re-order."\n    }) : null, props.inputField.length !== 0 ? /*#__PURE__*/(0,jsx_runtime.jsx)(Preview, {\n      inputField: props.inputField,\n      onhandleDragEnd: props.onhandleDragEnd,\n      onRemoveSelf: props.onRemoveSelf,\n      togglePreviewWrapperClass: props.togglePreviewWrapperClass,\n      onHandleClickToRemoveAll: props.onHandleClickToRemoveAll,\n      getTotalFileSize: props.getTotalFileSize\n    }) : null]\n  });\n}\n;// CONCATENATED MODULE: ./src/scripts/components/FormSelect.js\n\n\n\nfunction WebcomicsOptions(props) {\n  var webcomicsList = props.getWebcomicsModel.map(function (currentWebcomic, tabindex) {\n    if (currentWebcomic.disabled) {\n      return /*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n        className: "select-option",\n        children: /*#__PURE__*/(0,jsx_runtime.jsx)("label", {\n          htmlFor: currentWebcomic.htmlLabel,\n          children: /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n            className: "select-label--wrapper",\n            children: [/*#__PURE__*/(0,jsx_runtime.jsx)("input", {\n              type: "checkbox",\n              id: currentWebcomic.htmlLabel,\n              disabled: true\n            }), /*#__PURE__*/(0,jsx_runtime.jsxs)("span", {\n              className: "select-label",\n              children: [/*#__PURE__*/(0,jsx_runtime.jsx)("img", {\n                className: "select-icon",\n                src: currentWebcomic.imageSource,\n                alt: currentWebcomic.htmlAlt\n              }), /*#__PURE__*/(0,jsx_runtime.jsx)("span", {\n                className: "select-text",\n                children: currentWebcomic.text\n              })]\n            })]\n          })\n        })\n      }, tabindex);\n    } else {\n      return /*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n        className: "select-option",\n        children: /*#__PURE__*/(0,jsx_runtime.jsx)("label", {\n          htmlFor: currentWebcomic.htmlLabel,\n          children: /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n            className: "select-label--wrapper",\n            children: [/*#__PURE__*/(0,jsx_runtime.jsx)("input", {\n              type: "checkbox",\n              id: currentWebcomic.htmlLabel,\n              value: currentWebcomic.htmlLabel,\n              onClick: function onClick(e) {\n                return props.onHandleSelectedWebcomic(e);\n              }\n            }), /*#__PURE__*/(0,jsx_runtime.jsxs)("span", {\n              className: "select-label",\n              children: [/*#__PURE__*/(0,jsx_runtime.jsx)("img", {\n                className: "select-icon",\n                src: currentWebcomic.imageSource,\n                alt: currentWebcomic.htmlAlt\n              }), /*#__PURE__*/(0,jsx_runtime.jsx)("span", {\n                className: "select-text",\n                children: currentWebcomic.text\n              })]\n            })]\n          })\n        })\n      }, tabindex);\n    }\n  });\n  return webcomicsList;\n}\n\nfunction FormSelect(props) {\n  return /*#__PURE__*/(0,jsx_runtime.jsxs)("section", {\n    className: "form-select",\n    children: [/*#__PURE__*/(0,jsx_runtime.jsx)("h3", {\n      children: "2. Select"\n    }), /*#__PURE__*/(0,jsx_runtime.jsx)("p", {\n      children: "Select webcomic platform to base slicing ratio. You may select more than one. *Currently, Webtoon is only available."\n    }), /*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n      className: "select-container",\n      children: /*#__PURE__*/(0,jsx_runtime.jsx)(WebcomicsOptions, {\n        getWebcomicsModel: props.getWebcomicsModel,\n        onHandleSelectedWebcomic: props.onHandleSelectedWebcomic\n      })\n    }), props.isAlertMessageSelectFormError === true ? /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n      className: "alert-message--error",\n      children: [/*#__PURE__*/(0,jsx_runtime.jsx)("i", {\n        className: "alert-icon alert-icon--error icon-warning"\n      }), /*#__PURE__*/(0,jsx_runtime.jsx)("span", {\n        className: "alert-message-text--error",\n        children: props.getAlertMessageSelectFormText\n      })]\n    }) : null]\n  });\n}\n;// CONCATENATED MODULE: ./src/scripts/components/FormOptions.js\n\n\n\nfunction SquashOptions(props) {\n  var squashLevelList = props.getSquashLevelModel.map(function (currentSquashLevel, index) {\n    if (props.getSquashLevelModel[0] == currentSquashLevel) {\n      return /*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n        className: "radio-option",\n        children: /*#__PURE__*/(0,jsx_runtime.jsxs)("label", {\n          htmlFor: currentSquashLevel.htmlLabel,\n          children: [/*#__PURE__*/(0,jsx_runtime.jsx)("input", {\n            defaultChecked: true,\n            type: "radio",\n            name: "squash",\n            value: currentSquashLevel.pixelValue,\n            id: currentSquashLevel.htmlLabel,\n            onClick: function onClick(e) {\n              return props.onHandleOptionsSquashLevel(e);\n            }\n          }), /*#__PURE__*/(0,jsx_runtime.jsx)("span", {\n            className: "select-text",\n            children: currentSquashLevel.text\n          })]\n        })\n      }, index);\n    } else {\n      return /*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n        className: "radio-option",\n        children: /*#__PURE__*/(0,jsx_runtime.jsxs)("label", {\n          htmlFor: currentSquashLevel.htmlLabel,\n          children: [/*#__PURE__*/(0,jsx_runtime.jsx)("input", {\n            type: "radio",\n            name: "squash",\n            value: currentSquashLevel.pixelValue,\n            id: currentSquashLevel.htmlLabel,\n            onClick: function onClick(e) {\n              return props.onHandleOptionsSquashLevel(e);\n            }\n          }), /*#__PURE__*/(0,jsx_runtime.jsx)("span", {\n            className: "select-text",\n            children: currentSquashLevel.text\n          })]\n        })\n      }, index);\n    }\n  });\n  return squashLevelList;\n}\n\nfunction FileExtensionOptions(props) {\n  var fileExtensionsList = props.getFilExtensionsModel.map(function (fileExtObj, index) {\n    if (props.getFilExtensionsModel[0] === fileExtObj) {\n      return /*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n        className: "radio-option",\n        children: /*#__PURE__*/(0,jsx_runtime.jsxs)("label", {\n          htmlFor: fileExtObj.htmlLabel,\n          children: [/*#__PURE__*/(0,jsx_runtime.jsx)("input", {\n            defaultChecked: true,\n            type: "radio",\n            name: "filetype",\n            value: fileExtObj.htmlLabel,\n            id: fileExtObj.htmlLabel,\n            onClick: function onClick(e) {\n              return props.onHandleOptionsFileExtenions(e);\n            }\n          }), /*#__PURE__*/(0,jsx_runtime.jsx)("span", {\n            className: "select-text",\n            children: fileExtObj.text\n          })]\n        })\n      }, index);\n    } else {\n      return /*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n        className: "radio-option",\n        children: /*#__PURE__*/(0,jsx_runtime.jsxs)("label", {\n          htmlFor: fileExtObj.htmlLabel,\n          children: [/*#__PURE__*/(0,jsx_runtime.jsx)("input", {\n            type: "radio",\n            name: "filetype",\n            value: fileExtObj.htmlLabel,\n            id: fileExtObj.htmlLabel,\n            onClick: function onClick(e) {\n              return props.onHandleOptionsFileExtenions(e);\n            }\n          }), /*#__PURE__*/(0,jsx_runtime.jsx)("span", {\n            className: "select-text",\n            children: fileExtObj.text\n          })]\n        })\n      }, index);\n    }\n  });\n  return fileExtensionsList;\n}\n\nfunction FormOptions(props) {\n  return /*#__PURE__*/(0,jsx_runtime.jsxs)("section", {\n    className: "form-options",\n    children: [/*#__PURE__*/(0,jsx_runtime.jsx)("h3", {\n      children: "3. Options"\n    }), /*#__PURE__*/(0,jsx_runtime.jsx)("p", {\n      className: "text-bold header-four",\n      children: "File Extensions"\n    }), /*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n      className: "radio-container-filetype",\n      children: /*#__PURE__*/(0,jsx_runtime.jsx)(FileExtensionOptions, {\n        getFilExtensionsModel: props.getFilExtensionsModel,\n        onHandleOptionsFileExtenions: props.onHandleOptionsFileExtenions\n      })\n    }), /*#__PURE__*/(0,jsx_runtime.jsx)("p", {\n      className: "text-bold header-four",\n      children: "Squash"\n    }), /*#__PURE__*/(0,jsx_runtime.jsx)("p", {\n      className: "margin-fix",\n      children: "Squash scale down image file size."\n    }), /*#__PURE__*/(0,jsx_runtime.jsxs)("ul", {\n      children: [/*#__PURE__*/(0,jsx_runtime.jsx)("li", {\n        children: "If your file size is big enough it may refine illustrations. Slicing ratio will not be affected - it will produce the same page division."\n      }), /*#__PURE__*/(0,jsx_runtime.jsx)("li", {\n        children: "if your file is smaller than the selected squash option, it will expand your image and attempt to produce to the same aspect ratio of your chosen webcomic platform."\n      })]\n    }), /*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n      className: "radio-container-squash",\n      children: /*#__PURE__*/(0,jsx_runtime.jsx)(SquashOptions, {\n        getSquashLevelModel: props.getSquashLevelModel,\n        onHandleOptionsSquashLevel: props.onHandleOptionsSquashLevel\n      })\n    })]\n  });\n}\n;// CONCATENATED MODULE: ./src/scripts/components/FormResults.js\n\n\n\n// TODO: FEATURE (NEXT UPDATE)\n// adjust to webcomic platform ratio for display\nfunction Product(props) {\n  // INJECT image blob\n  var processedImageFIles = props.getImageData.map(function (imgData, index) {\n    return /*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n      className: "product__image-block",\n      children: /*#__PURE__*/(0,jsx_runtime.jsx)("img", {\n        src: imgData\n      })\n    }, index);\n  });\n  return processedImageFIles;\n}\n\nfunction FormResults(props) {\n  return /*#__PURE__*/(0,jsx_runtime.jsxs)("section", {\n    className: "form-results",\n    children: [/*#__PURE__*/(0,jsx_runtime.jsx)("h3", {\n      children: "Results"\n    }), /*#__PURE__*/(0,jsx_runtime.jsx)("p", {\n      children: "For each webcomic platform selected, a zip file will be automatically downloaded after slicing process completed."\n    }), /*#__PURE__*/(0,jsx_runtime.jsx)("canvas", {\n      id: "canvas"\n    }), /*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n      className: "product-container",\n      children: /*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n        className: "product",\n        children: /*#__PURE__*/(0,jsx_runtime.jsx)(Product, {\n          getImageData: props.getImageData\n        })\n      })\n    })]\n  });\n}\n;// CONCATENATED MODULE: ./src/scripts/libs/createId.js\nfunction generateUniqueId() {\n  if (window.crypto && window.crypto.getRandomValues) {\n    return window.crypto.getRandomValues(new Uint32Array(1))[0];\n  } else {\n    return Math.random();\n  }\n}\n;// CONCATENATED MODULE: ./src/scripts/components/Form.js\nfunction _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }\n\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\n\nfunction _iterableToArray(iter) { if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\n\n\n\n\n // libs\n\n // TODO: FEATURE (NEXT UPDATE)\n// "Rotate" button in Preview thumb\n// Also see in \'FormUpload.js\'\n\n\n\n\nvar alertMessages = {\n  onSuccess: {\n    filesRemoved: "Files were cleared.",\n    completedProcess: "Process completed!"\n  },\n  onError: {\n    unacceptableFileType: "File extensions not supported! Only PNG and JPEG (or JPG) allowed.",\n    overMaxFileSize: "Total file size is over maximum. Remove some files to continue.",\n    noFilesFound: "No images found to process. Upload some images to \'Begin Slice\'!",\n    selectFormMandatory: "Please check at least one webcomic platform under \'2. Select\'.",\n    selectFormMandatoryTarget: "Check at least one in order to continue."\n  },\n  onWarning: {\n    nearMaxFileSize: "Total file size is near maximum!"\n  }\n};\nvar webcomicsModel = [{\n  htmlLabel: "webtoon",\n  imageSource: "images/webtoon-icon.svg",\n  htmlAlt: "webtoon icon",\n  text: "Webtoon",\n  disabled: false\n}, {\n  htmlLabel: "tapas",\n  imageSource: "images/tapas-icon.png",\n  htmlAlt: "tapas icon",\n  text: "Tapas",\n  disabled: true\n}]; // RADIO OPTIONS\n// Default CHECKED: filExtensionsModel[0]\n\nvar filExtensionsModel = [{\n  htmlLabel: "jpeg",\n  text: "JPEG"\n}, {\n  htmlLabel: "png",\n  text: "PNG"\n}]; // RADIO OPTIONS\n// Default CHECKED: squashLevelModel[0]\n\nvar squashLevelModel = [{\n  htmlLabel: "none",\n  pixelValue: 0,\n  text: "none"\n}, {\n  htmlLabel: "400",\n  pixelValue: 400,\n  text: "400 width pixels"\n}, {\n  htmlLabel: "500",\n  pixelValue: 500,\n  text: "500 width pixels"\n}, {\n  htmlLabel: "600",\n  pixelValue: 600,\n  text: "600 width pixels"\n}, {\n  htmlLabel: "700",\n  pixelValue: 700,\n  text: "700 width pixels"\n}]; // Accepted file types\n\nvar fileTypes = [\'image/jpeg\', \'image/jpg\', \'image/png\'];\n\nfunction validFileType(file) {\n  return fileTypes.includes(file);\n}\n\nvar Form = /*#__PURE__*/function (_Component) {\n  _inherits(Form, _Component);\n\n  var _super = _createSuper(Form);\n\n  function Form(props) {\n    var _this;\n\n    _classCallCheck(this, Form);\n\n    _this = _super.call(this, props);\n    _this.state = {\n      // # STYLES EVENT\n      // EVENT: onDragOver\n      isDragOver: false,\n      dropzoneBordersClass: {\n        highlight: "dropzone dropzone--over",\n        default: "dropzone"\n      },\n      inputDataAvailable: false,\n      // EVENT: onClick\n      // "Begin Slice!" button\n      sliceText: "slice-btn",\n      // EVENT: conditional\n      // div class "preview-wrapper"\n      previewWrapperClass: {\n        visible: "preview-wrapper",\n        invisible: "preview-wrapper hidden"\n      },\n      // # ALERT MESSAGES AND STATE\n      // Success\n      isAlertMessageSuccess: false,\n      alertMessageSuccess: "",\n      // Error\n      isAlertMessageError: false,\n      alertMessageError: "",\n      // Warning\n      isAlertMessageWarning: false,\n      alertMessageWarning: "",\n      // Error on "Begin Slice!"\n      isAlertMessageErrorOnBeginSliceBtn: false,\n      alertMessageErrorOnBeginSliceBtn: "",\n      // Success on "Begin Slice!"\n      isAlertMessageSuccessOnBeginSliceBtn: false,\n      alertMessageSuccessOnBeginSliceBtn: "",\n      // Error on none webcomic platform selected\n      isAlertMessageErrorOnSelectForm: false,\n      alertMessageErrorOnSelectForm: "",\n      // # DATA\n      processedFileData: [],\n      inputField: [],\n      // inputField: [\n      //     {\n      //         fileRead: [<obj>],\n      //         id: <number>\n      //         fileSize: <number>\n      //     }\n      // ]\n      totalFileSize: 0,\n      // Byte measurement\n      selectedWebcomics: [],\n      selectedFileExtension: "jpeg",\n      // default value\n      selectedSquashLevel: "none"\n    }; // # METHODS\n\n    _this.handleDrag = _this.handleDrag.bind(_assertThisInitialized(_this));\n    _this.handleDragLeave = _this.handleDragLeave.bind(_assertThisInitialized(_this));\n    _this.handleFileDrop = _this.handleFileDrop.bind(_assertThisInitialized(_this));\n    _this.processResults = _this.processResults.bind(_assertThisInitialized(_this));\n    _this.handleBeginSlicBtn = _this.handleBeginSlicBtn.bind(_assertThisInitialized(_this)); // TOGGLE CLASS\n\n    _this.toggleBeginSliceText = _this.toggleBeginSliceText.bind(_assertThisInitialized(_this));\n    _this.handleDragEnd = _this.handleDragEnd.bind(_assertThisInitialized(_this)); // DATA MANAGEMENT\n    // DELETE Data\n\n    _this.handleRemoveSelf = _this.handleRemoveSelf.bind(_assertThisInitialized(_this));\n    _this.handleClickToRemoveAll = _this.handleClickToRemoveAll.bind(_assertThisInitialized(_this)); // SET file data\n\n    _this.setFilesData = _this.setFilesData.bind(_assertThisInitialized(_this)); // GET total file size\n\n    _this.checkTotalFileSize = _this.checkTotalFileSize.bind(_assertThisInitialized(_this)); // UPLOAD on file browse\n\n    _this.handleInputChange = _this.handleInputChange.bind(_assertThisInitialized(_this));\n    _this.handleSelectedWebcomic = _this.handleSelectedWebcomic.bind(_assertThisInitialized(_this));\n    _this.handleOptionsFileExtenions = _this.handleOptionsFileExtenions.bind(_assertThisInitialized(_this));\n    _this.handleOptionsSquashLevel = _this.handleOptionsSquashLevel.bind(_assertThisInitialized(_this));\n    return _this;\n  } // ===============\n  // # REACT METHODS\n  // ===============\n  // componentWillUnmount() {\n  //     console.log("UNMOUNTING...");\n  // }\n  // componentDidMount() {\n  //     console.log("MOUNTING...");\n  // }\n  // componentDidUpdate() {\n  //     console.log("COMPONENT UPDATING...");\n  // }\n  // ========\n  // # EVENTS\n  // ========\n  // event: drag\n\n\n  _createClass(Form, [{\n    key: "handleDrag",\n    value: function handleDrag(e) {\n      e.preventDefault();\n      e.stopPropagation();\n      this.setState({\n        isDragOver: true\n      });\n    } // event: drag\n\n  }, {\n    key: "handleDragLeave",\n    value: function handleDragLeave(e) {\n      e.preventDefault(e);\n      e.stopPropagation();\n      this.setState({\n        isDragOver: false\n      });\n    } // event: drag\n    // Reorder files\n\n  }, {\n    key: "handleDragEnd",\n    value: function handleDragEnd(result) {\n      // CREATE shallow copy\n      var items = Array.from(this.state.inputField); // EXTRACT targeted item\n\n      var _items$splice = items.splice(result.source.index, 1),\n          _items$splice2 = _slicedToArray(_items$splice, 1),\n          reorderedItem = _items$splice2[0]; // PUSH targeted item into new order\n\n\n      items.splice(result.destination.index, 0, reorderedItem);\n      this.setState({\n        inputField: items\n      });\n    } // event: click\n    // Open browser for files\n\n  }, {\n    key: "handleClickToUpload",\n    value: function handleClickToUpload() {\n      var dropzoneInput = document.querySelector(".dropzone__input"); // EMULATE HTML input CLICK event\n\n      dropzoneInput.click();\n    } // event: click\n    // UPDATE state \'selectedFileExtension\'\n\n  }, {\n    key: "handleOptionsFileExtenions",\n    value: function handleOptionsFileExtenions(e) {\n      var newSelectedFileExtension = e.target.value;\n      this.setState({\n        selectedFileExtension: newSelectedFileExtension\n      });\n    } // event: click\n    // UPDATE state \'selectedSquashLevel\'\n\n  }, {\n    key: "handleOptionsSquashLevel",\n    value: function handleOptionsSquashLevel(e) {\n      var newSelectedSquashLevel = parseInt(e.target.value, 10);\n\n      if (newSelectedSquashLevel == 0) {\n        this.setState({\n          selectedSquashLevel: "none"\n        });\n      } else {\n        this.setState({\n          selectedSquashLevel: newSelectedSquashLevel\n        });\n      }\n    } // event: click\n    // "Begin Slice!" button\n\n  }, {\n    key: "handleBeginSlicBtn",\n    value: function handleBeginSlicBtn(e) {\n      var _this2 = this;\n\n      e.preventDefault();\n\n      if (this.state.inputField.length === 0) {\n        // ALERT MESSAGE\n        // No data (or image file) found\n        this.setState({\n          isAlertMessageErrorOnBeginSliceBtn: true,\n          alertMessageErrorOnBeginSliceBtn: alertMessages.onError.noFilesFound\n        });\n        setTimeout(function () {\n          _this2.setState({\n            isAlertMessageErrorOnBeginSliceBtn: false,\n            alertMessageErrorOnBeginSliceBtn: ""\n          });\n        }, 8000);\n      } else {\n        if (this.state.selectedWebcomics.length === 0) {\n          // ALERT MESSAGE (PERSIST)\n          // No webcomic platform selected\n          this.setState({\n            isAlertMessageErrorOnBeginSliceBtn: true,\n            alertMessageErrorOnBeginSliceBtn: alertMessages.onError.selectFormMandatory,\n            isAlertMessageErrorOnSelectForm: true,\n            alertMessageErrorOnSelectForm: alertMessages.onError.selectFormMandatoryTarget\n          });\n        } else {\n          // ALERT MESSAGE (PERSIST -> REMOVED)\n          this.setState({\n            isAlertMessageErrorOnBeginSliceBtn: false,\n            alertMessageErrorOnBeginSliceBtn: "",\n            isAlertMessageErrorOnSelectForm: false,\n            alertMessageErrorOnSelectForm: ""\n          });\n          this.processResults(); // ANIMATION\n\n          this.toggleBeginSliceText();\n          setTimeout(function () {\n            _this2.toggleBeginSliceText();\n          }, 1500);\n        }\n      }\n    } // event: click\n    // "X" button\n    // REMOVE current thumb UI\n    // REMOVE current thumb data\n\n  }, {\n    key: "handleRemoveSelf",\n    value: function handleRemoveSelf(e) {\n      e.preventDefault(); // GRAB all list\n\n      var sourceThumbnails = document.querySelectorAll(".preview__thumbnail-container"); // TRANSFORM node into JavaScript objects (array)\n\n      var arrThumbnails = Array.from(sourceThumbnails); // CREATE shallow copy\n\n      var items = Array.from(this.state.inputField); // GET index of targeted item\n\n      var removeItemIndex = arrThumbnails.indexOf(e.target.parentElement); // UPDATE state totalFileSize\n\n      this.setState(function (currentState) {\n        // GET data\n        var sourceInputField = Array.from(currentState.inputField); // GET data \'fileSize\'\n\n        var fileSizesArr = sourceInputField.map(function (file) {\n          return file.fileSize;\n        }); // SUM all data \'fileSize\'\n\n        var totalFileByte = fileSizesArr.reduce(function (accumulator, currentValue) {\n          return accumulator + currentValue;\n        }); // EXTRACT targeted item \'fileSize\'\n\n        var removedItemFileSize = sourceInputField[removeItemIndex]["fileSize"]; // SUBTRACT \'totalFileSize\' - targeted item \'fileSize\'\n\n        var newTotalFileSize = totalFileByte - removedItemFileSize;\n        return {\n          totalFileSize: newTotalFileSize\n        }; // UPDATE UI\n      }, this.checkTotalFileSize()); // REMOVE targeted item\n\n      items.splice(removeItemIndex, 1); // UPDATE data\n\n      this.setState({\n        inputField: items\n      });\n    } // event: click\n    // EMPTY state "inputField"\n    // "Clear Files" button\n\n  }, {\n    key: "handleClickToRemoveAll",\n    value: function handleClickToRemoveAll() {\n      var _this3 = this;\n\n      // ALERT MESSAGE\n      // UPDATE data\n      this.setState({\n        inputField: [],\n        inputDataAvailable: false,\n        isAlertMessageSuccess: true,\n        alertMessageSuccess: alertMessages.onSuccess.filesRemoved\n      });\n      setTimeout(function () {\n        _this3.setState({\n          isAlertMessageSuccess: false,\n          alertMessageSuccess: ""\n        });\n      }, 8000);\n    } // event: change\n    // LIStEN to user on CLICK to upload file\n    // if user selects file(s), proceed to process image files methods\n\n  }, {\n    key: "handleInputChange",\n    value: function handleInputChange(e) {\n      var files = e.target.files;\n      this.setFilesData(files); // UPDATE UI on CONDITION\n\n      if (this.state.inputField) {\n        this.setState({\n          inputDataAvailable: true\n        });\n      }\n    } // event: click\n    // UPDATE state \'selectedWebcomics\'\n\n  }, {\n    key: "handleSelectedWebcomic",\n    value: function handleSelectedWebcomic(e) {\n      var selectedWebcomicValue = e.target.value;\n      var currentSelectedWebcomics = this.state.selectedWebcomics;\n\n      if (currentSelectedWebcomics.includes(selectedWebcomicValue)) {\n        // UNCHECK\n        var removeItemIndex = currentSelectedWebcomics.indexOf(selectedWebcomicValue);\n        currentSelectedWebcomics.splice(removeItemIndex, 1);\n        this.setState({\n          selectedWebcomics: currentSelectedWebcomics\n        });\n      } else {\n        // CHECK\n        this.setState(function (currentState) {\n          return {\n            selectedWebcomics: [].concat(_toConsumableArray(currentState.selectedWebcomics), [selectedWebcomicValue])\n          };\n        });\n      }\n    } // =========\n    // # METHODS\n    // =========\n    // TOGGLE\n    // "Begin Slice" Text\n\n  }, {\n    key: "toggleBeginSliceText",\n    value: function toggleBeginSliceText() {\n      if (this.state.sliceText === "slice-btn") {\n        this.setState({\n          sliceText: "icon-spinner8 animate-spin"\n        });\n      } else if (this.state.sliceText === "icon-spinner8 animate-spin") {\n        this.setState({\n          sliceText: "slice-btn"\n        });\n      }\n    } // FETCHING FILE READ\n    // - VALIDATE file on upload\n    // - UPDATE state "inputField"\n    // - TOGGLE class\n\n  }, {\n    key: "handleFileDrop",\n    value: function handleFileDrop(e) {\n      e.preventDefault();\n      e.stopPropagation();\n      var files = e.dataTransfer.files;\n      this.setFilesData(files); // UPDATE data boolean (for other chain reactions)\n\n      if (this.state.inputField) {\n        this.setState({\n          inputDataAvailable: true\n        });\n      }\n\n      this.setState({\n        isDragOver: false\n      });\n    }\n  }, {\n    key: "setFilesData",\n    value: function setFilesData(files) {\n      var _this4 = this;\n\n      Object.values(files).forEach(function (obj) {\n        // VALIDATE\n        if (!validFileType(obj.type)) {\n          // ALERT MESSAGE\n          // User attempted to upload unacceptable files\n          _this4.setState({\n            alertMessageError: alertMessages.onError.unacceptableFileType,\n            isAlertMessageError: true\n          });\n\n          setTimeout(function () {\n            _this4.setState({\n              alertMessageError: "",\n              isAlertMessageError: false\n            });\n          }, 8000);\n        } else {\n          // CREATE image file data preview container\n          _this4.setState(function (currentState) {\n            return {\n              inputField: [].concat(_toConsumableArray(currentState.inputField), [{\n                fileRead: obj,\n                id: generateUniqueId(),\n                fileSize: obj.size\n              }])\n            };\n          }); // UPDATE state \'totalFileSize\'\n\n\n          _this4.setState(function (currentState) {\n            // GET main data\n            var sourceInputField = currentState.inputField; // GET main data \'fileSize\'\n\n            var fileSizesArr = sourceInputField.map(function (file) {\n              return file.fileSize;\n            }); // TOTAL main data \'fileSize\'\n\n            var totalFileByte = fileSizesArr.reduce(function (accumulator, currentValue) {\n              return accumulator + currentValue;\n            });\n            return {\n              totalFileSize: totalFileByte\n            }; // CHECK CONDITION\n          }, _this4.checkTotalFileSize());\n        }\n      });\n    } // CHECK CONDITION\n    // UPDATE UI if CONDITION are met\n\n  }, {\n    key: "checkTotalFileSize",\n    value: function checkTotalFileSize() {\n      // ALERT MESSAGE\n      // CONDITION\n      // near max, pass 18MB\n      if (this.state.totalFileSize >= 18874368) {\n        this.setState({\n          isAlertMessageWarning: true,\n          alertMessageWarning: alertMessages.onWarning.nearMaxFileSize\n        });\n      } // ALERT MESSAGE\n      // CONDITION\n      // over max, pass 20MB\n\n\n      if (this.state.totalFileSize >= 20971520) {\n        this.setState({\n          isAlertMessageError: true,\n          alertMessageError: alertMessages.onError.overMaxFileSize\n        });\n      }\n    } // PROCESS IMAGE FILES\n\n  }, {\n    key: "processResults",\n    value: function processResults() {\n      var _this5 = this;\n\n      // GET all image file elements\n      var sourceImagesRaw = document.querySelectorAll(".preview__thumbnail img"); // REFERENCE the canvas\n\n      var canvas = document.querySelector("#canvas");\n      var context = canvas.getContext("2d"); // TRANSFORM node into JavaScript objects (array)\n\n      var sourceImages = Array.from(sourceImagesRaw); // GET user selected webcomic platform(s) from SELECT form component\n\n      var Selectedwebcomics = this.state.selectedWebcomics; // # (1) SELECT form\n      // PROCESS files for all selected webcomic platform applied\n\n      var _loop = function _loop(i) {\n        var processImages = []; // PROCESS image file\n\n        sourceImages.forEach(function (img) {\n          var imgWidth = img.naturalWidth;\n          var imgHeight = img.naturalHeight; // * CONDITION: image width > image height\n          // ROTATE image\n\n          if (imgWidth > imgHeight) {\n            // NOTE:\n            // Bottom surface would be pointed left, and\n            // Top surface would be pointed right\n            canvas.width = imgHeight;\n            canvas.height = imgWidth;\n            context.rotate(Math.PI / 2);\n            context.drawImage(img, 0, -imgHeight);\n          }\n\n          var maxHeight = imgHeight;\n          var width = imgWidth;\n          var scaleWidth; // # (2) OPTIONS form - "SQUASH"\n\n          switch (_this5.state.selectedSquashLevel) {\n            case "none":\n              scaleWidth = width;\n              break;\n\n            case 400:\n              scaleWidth = 400;\n              break;\n\n            case 500:\n              scaleWidth = 500;\n              break;\n\n            case 600:\n              scaleWidth = 600;\n              break;\n\n            case 700:\n              scaleWidth = 700;\n              break;\n          }\n\n          var webcomicMaxWidth;\n          var webcomicMaxHeight; // TODO: FEATURE (NEXT UPDATE)\n          // Find out normal tapas ratio\n          // Current Webcomic Platform Available...\n          // ! tapas in the works... (WIP)\n\n          switch (Selectedwebcomics[i]) {\n            case "webtoon":\n              webcomicMaxWidth = 800;\n              webcomicMaxHeight = 1280;\n              break;\n\n            case "tapas":\n              webcomicMaxWidth = 960;\n              webcomicMaxHeight = 1440;\n              break;\n          }\n\n          var aspectRatio = webcomicMaxWidth / webcomicMaxHeight; // based on aspect ratio, what the height should be...\n\n          var determinedeHeight = width / aspectRatio;\n          var scaleDeterminedeHeight = determinedeHeight;\n\n          if (scaleWidth !== width) {\n            scaleDeterminedeHeight = scaleWidth / aspectRatio;\n          } // * CONDITION:\n          // If file image naturalHeight is shorter than determinedHeight,\n          // return as is... unless Options scale applied\n\n\n          if (determinedeHeight > maxHeight) {\n            var scaleMaxHeight = scaleWidth / (width / maxHeight);\n            canvas.width = scaleWidth;\n            canvas.height = scaleMaxHeight;\n            context.drawImage(img, 0, 0, scaleWidth, scaleMaxHeight);\n            var result = canvas.toDataURL();\n            processImages.push(result);\n          } else {\n            var timesToSlice = Math.floor(maxHeight / determinedeHeight);\n            var currentSlice = 0;\n            var newYPosition = 0;\n            var slicedImages = []; // * CONDITION: Longer length (height) images\n\n            while (timesToSlice > currentSlice) {\n              newYPosition = determinedeHeight * currentSlice;\n              canvas.width = scaleWidth;\n              canvas.height = scaleDeterminedeHeight;\n              context.drawImage(img, 0, newYPosition, width, determinedeHeight, 0, 0, scaleWidth, scaleDeterminedeHeight);\n              slicedImages.push(canvas.toDataURL());\n              currentSlice++;\n            } // * CONDTION: Odd number remaining\n            // GET last coordinate\n            // GET remaining height\n\n\n            var remainCoordinateY = timesToSlice * determinedeHeight;\n            var remainHeight = maxHeight - remainCoordinateY; // OPTIONS Squash - if available\n\n            var scaleRemaineHeight = remainHeight;\n\n            if (scaleWidth !== width) {\n              scaleRemaineHeight = scaleWidth / (width / remainHeight);\n            }\n\n            if (remainHeight !== 0) {\n              newYPosition = remainCoordinateY; // ? Refactor to a function\n\n              canvas.width = scaleWidth;\n              canvas.height = scaleRemaineHeight;\n              context.drawImage(img, 0, newYPosition, width, remainHeight, 0, 0, scaleWidth, scaleRemaineHeight);\n              slicedImages.push(canvas.toDataURL());\n            }\n\n            processImages.push.apply(processImages, slicedImages);\n          }\n        }); // CREATE Zip folder\n        // NAME images with padded zero if under 10s\n        // GET user file extension prefernce from Options form - File Extensions\n        // PUSH images to Zip folder\n        // DOWNLOAD to user\'s PC\n\n        var zip = new JSZip();\n        var selectedFileExt = _this5.state.selectedFileExtension; // NOTE: Naming is padded with zero of tens\n        // Over tens are unavailable\n\n        for (var _i2 = 0; _i2 < processImages.length; _i2++) {\n          var fileName = void 0;\n\n          if (_i2 > 10) {\n            fileName = "".concat(_i2, ".").concat(selectedFileExt);\n          } else {\n            fileName = "".concat(_i2.toString().padStart(2, "0"), ".").concat(selectedFileExt);\n          }\n\n          zip.file(fileName, processImages[_i2].substr(processImages[_i2].indexOf(\',\') + 1), {\n            base64: true\n          });\n        }\n\n        zip.generateAsync({\n          type: "blob",\n          mimeType: "image/jpeg"\n        }).then(function (blob) {\n          saveAs(blob, "".concat(Selectedwebcomics[i], ".zip"));\n        }); // ADD image \'data:\' url arr of processed image files\n        // RESPONDS to display in Result form\n\n        _this5.setState({\n          processedFileData: processImages\n        });\n      };\n\n      for (var i = 0; i < Selectedwebcomics.length; i++) {\n        _loop(i);\n      } // ALERT MESSAGE\n      // Process completed\n\n\n      this.setState({\n        isAlertMessageSuccessOnBeginSliceBtn: true,\n        alertMessageSuccessOnBeginSliceBtn: alertMessages.onSuccess.completedProcess\n      });\n      setTimeout(function () {\n        _this5.setState({\n          isAlertMessageSuccessOnBeginSliceBtn: false,\n          alertMessageSuccessOnBeginSliceBtn: ""\n        });\n      }, 8000);\n    }\n  }, {\n    key: "render",\n    value: function render() {\n      return /*#__PURE__*/(0,jsx_runtime.jsxs)(jsx_runtime.Fragment, {\n        children: [/*#__PURE__*/(0,jsx_runtime.jsx)("h2", {\n          children: "Start Here"\n        }), /*#__PURE__*/(0,jsx_runtime.jsx)(FormUpload // EVENTS\n        , {\n          onHandleDrag: this.handleDrag,\n          onHandleDragLeave: this.handleDragLeave,\n          onHandleFileDrop: this.handleFileDrop,\n          onRemoveSelf: this.handleRemoveSelf,\n          onhandleDragEnd: this.handleDragEnd,\n          onHandleClickToUpload: this.handleClickToUpload,\n          onHandleInputChange: this.handleInputChange,\n          onHandleClickToRemoveAll: this.handleClickToRemoveAll // STYLED EVENTS\n          ,\n          toggleDropzoneBordersClass: this.state.isDragOver ? this.state.dropzoneBordersClass.highlight : this.state.dropzoneBordersClass.default,\n          togglePreviewWrapperClass: this.state.inputDataAvailable ? this.state.previewWrapperClass.visible : this.state.previewWrapperClass.invisible // ALERT MESSAGES\n          ,\n          getAlertErrorText: this.state.alertMessageError,\n          isAlertMessageError: this.state.isAlertMessageError,\n          getAlertSuccessText: this.state.alertMessageSuccess,\n          isAlertMessageSuccess: this.state.isAlertMessageSuccess,\n          isAlertMessageWarning: this.state.isAlertMessageWarning,\n          getAlertWarningText: this.state.alertMessageWarning // DATAS\n          ,\n          inputField: this.state.inputField,\n          getTotalFileSize: this.state.totalFileSize\n        }), /*#__PURE__*/(0,jsx_runtime.jsx)(FormSelect, {\n          getWebcomicsModel: webcomicsModel,\n          onHandleSelectedWebcomic: this.handleSelectedWebcomic,\n          isAlertMessageSelectFormError: this.state.isAlertMessageErrorOnSelectForm,\n          getAlertMessageSelectFormText: this.state.alertMessageErrorOnSelectForm\n        }), /*#__PURE__*/(0,jsx_runtime.jsx)(FormOptions, {\n          getFilExtensionsModel: filExtensionsModel,\n          onHandleOptionsFileExtenions: this.handleOptionsFileExtenions,\n          getSquashLevelModel: squashLevelModel,\n          onHandleOptionsSquashLevel: this.handleOptionsSquashLevel\n        }), /*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n          className: "slice-btn-container",\n          children: /*#__PURE__*/(0,jsx_runtime.jsx)("a", {\n            className: "slice-btn",\n            onClick: this.handleBeginSlicBtn,\n            children: /*#__PURE__*/(0,jsx_runtime.jsx)("h3", {\n              children: this.state.sliceText === "slice-btn" ? "Begin Slice!" : /*#__PURE__*/(0,jsx_runtime.jsx)("i", {\n                className: "icon-spinner8 animate-spin"\n              })\n            })\n          })\n        }), this.state.isAlertMessageErrorOnBeginSliceBtn === true ? /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n          className: "alert-message--error",\n          children: [/*#__PURE__*/(0,jsx_runtime.jsx)("i", {\n            className: "alert-icon alert-icon--error icon-warning"\n          }), /*#__PURE__*/(0,jsx_runtime.jsx)("span", {\n            className: "alert-message-text--error",\n            children: this.state.alertMessageErrorOnBeginSliceBtn\n          })]\n        }) : null, this.state.isAlertMessageSuccessOnBeginSliceBtn === true ? /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n          className: "alert-message--success",\n          children: [/*#__PURE__*/(0,jsx_runtime.jsx)("i", {\n            className: "alert-icon alert-icon--success icon-check"\n          }), /*#__PURE__*/(0,jsx_runtime.jsx)("span", {\n            className: "alert-message-text--success",\n            children: this.state.alertMessageSuccessOnBeginSliceBtn\n          })]\n        }) : null, /*#__PURE__*/(0,jsx_runtime.jsx)(FormResults, {\n          getImageData: this.state.processedFileData\n        })]\n      });\n    }\n  }]);\n\n  return Form;\n}(react.Component);\n\n\n;// CONCATENATED MODULE: ./src/form.js\n\n\n\n\nreact_dom.render( /*#__PURE__*/(0,jsx_runtime.jsx)(Form, {}), document.querySelector("main"));//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///352\n')},703:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval("\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  \"zt\": () => (/* reexport */ components_Provider),\n  \"$j\": () => (/* reexport */ connect)\n});\n\n// UNUSED EXPORTS: ReactReduxContext, batch, connectAdvanced, createDispatchHook, createSelectorHook, createStoreHook, shallowEqual, useDispatch, useSelector, useStore\n\n// EXTERNAL MODULE: ./node_modules/react/index.js\nvar react = __webpack_require__(294);\n// EXTERNAL MODULE: ./node_modules/prop-types/index.js\nvar prop_types = __webpack_require__(697);\n;// CONCATENATED MODULE: ./node_modules/react-redux/es/components/Context.js\n\nvar Context_ReactReduxContext = /*#__PURE__*/react.createContext(null);\n\nif (false) {}\n\n/* harmony default export */ const Context = ((/* unused pure expression or super */ null && (Context_ReactReduxContext)));\n;// CONCATENATED MODULE: ./node_modules/react-redux/es/utils/batch.js\n// Default to a dummy \"batch\" implementation that just runs the callback\nfunction defaultNoopBatch(callback) {\n  callback();\n}\n\nvar batch = defaultNoopBatch; // Allow injecting another batching function later\n\nvar setBatch = function setBatch(newBatch) {\n  return batch = newBatch;\n}; // Supply a getter just to skip dealing with ESM bindings\n\nvar getBatch = function getBatch() {\n  return batch;\n};\n;// CONCATENATED MODULE: ./node_modules/react-redux/es/utils/Subscription.js\n // encapsulates the subscription logic for connecting a component to the redux store, as\n// well as nesting subscriptions of descendant components, so that we can ensure the\n// ancestor components re-render before descendants\n\nvar nullListeners = {\n  notify: function notify() {}\n};\n\nfunction createListenerCollection() {\n  var batch = getBatch();\n  var first = null;\n  var last = null;\n  return {\n    clear: function clear() {\n      first = null;\n      last = null;\n    },\n    notify: function notify() {\n      batch(function () {\n        var listener = first;\n\n        while (listener) {\n          listener.callback();\n          listener = listener.next;\n        }\n      });\n    },\n    get: function get() {\n      var listeners = [];\n      var listener = first;\n\n      while (listener) {\n        listeners.push(listener);\n        listener = listener.next;\n      }\n\n      return listeners;\n    },\n    subscribe: function subscribe(callback) {\n      var isSubscribed = true;\n      var listener = last = {\n        callback: callback,\n        next: null,\n        prev: last\n      };\n\n      if (listener.prev) {\n        listener.prev.next = listener;\n      } else {\n        first = listener;\n      }\n\n      return function unsubscribe() {\n        if (!isSubscribed || first === null) return;\n        isSubscribed = false;\n\n        if (listener.next) {\n          listener.next.prev = listener.prev;\n        } else {\n          last = listener.prev;\n        }\n\n        if (listener.prev) {\n          listener.prev.next = listener.next;\n        } else {\n          first = listener.next;\n        }\n      };\n    }\n  };\n}\n\nvar Subscription_Subscription = /*#__PURE__*/function () {\n  function Subscription(store, parentSub) {\n    this.store = store;\n    this.parentSub = parentSub;\n    this.unsubscribe = null;\n    this.listeners = nullListeners;\n    this.handleChangeWrapper = this.handleChangeWrapper.bind(this);\n  }\n\n  var _proto = Subscription.prototype;\n\n  _proto.addNestedSub = function addNestedSub(listener) {\n    this.trySubscribe();\n    return this.listeners.subscribe(listener);\n  };\n\n  _proto.notifyNestedSubs = function notifyNestedSubs() {\n    this.listeners.notify();\n  };\n\n  _proto.handleChangeWrapper = function handleChangeWrapper() {\n    if (this.onStateChange) {\n      this.onStateChange();\n    }\n  };\n\n  _proto.isSubscribed = function isSubscribed() {\n    return Boolean(this.unsubscribe);\n  };\n\n  _proto.trySubscribe = function trySubscribe() {\n    if (!this.unsubscribe) {\n      this.unsubscribe = this.parentSub ? this.parentSub.addNestedSub(this.handleChangeWrapper) : this.store.subscribe(this.handleChangeWrapper);\n      this.listeners = createListenerCollection();\n    }\n  };\n\n  _proto.tryUnsubscribe = function tryUnsubscribe() {\n    if (this.unsubscribe) {\n      this.unsubscribe();\n      this.unsubscribe = null;\n      this.listeners.clear();\n      this.listeners = nullListeners;\n    }\n  };\n\n  return Subscription;\n}();\n\n\n;// CONCATENATED MODULE: ./node_modules/react-redux/es/components/Provider.js\n\n\n\n\n\nfunction Provider(_ref) {\n  var store = _ref.store,\n      context = _ref.context,\n      children = _ref.children;\n  var contextValue = (0,react.useMemo)(function () {\n    var subscription = new Subscription_Subscription(store);\n    subscription.onStateChange = subscription.notifyNestedSubs;\n    return {\n      store: store,\n      subscription: subscription\n    };\n  }, [store]);\n  var previousState = (0,react.useMemo)(function () {\n    return store.getState();\n  }, [store]);\n  (0,react.useEffect)(function () {\n    var subscription = contextValue.subscription;\n    subscription.trySubscribe();\n\n    if (previousState !== store.getState()) {\n      subscription.notifyNestedSubs();\n    }\n\n    return function () {\n      subscription.tryUnsubscribe();\n      subscription.onStateChange = null;\n    };\n  }, [contextValue, previousState]);\n  var Context = context || Context_ReactReduxContext;\n  return /*#__PURE__*/react.createElement(Context.Provider, {\n    value: contextValue\n  }, children);\n}\n\nif (false) {}\n\n/* harmony default export */ const components_Provider = (Provider);\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/extends.js\nvar esm_extends = __webpack_require__(122);\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js\nvar objectWithoutPropertiesLoose = __webpack_require__(756);\n// EXTERNAL MODULE: ./node_modules/hoist-non-react-statics/dist/hoist-non-react-statics.cjs.js\nvar hoist_non_react_statics_cjs = __webpack_require__(679);\nvar hoist_non_react_statics_cjs_default = /*#__PURE__*/__webpack_require__.n(hoist_non_react_statics_cjs);\n// EXTERNAL MODULE: ./node_modules/react-redux/node_modules/react-is/index.js\nvar react_is = __webpack_require__(973);\n;// CONCATENATED MODULE: ./node_modules/react-redux/es/utils/useIsomorphicLayoutEffect.js\n // React currently throws a warning when using useLayoutEffect on the server.\n// To get around it, we can conditionally useEffect on the server (no-op) and\n// useLayoutEffect in the browser. We need useLayoutEffect to ensure the store\n// subscription callback always has the selector from the latest render commit\n// available, otherwise a store update may happen between render and the effect,\n// which may cause missed updates; we also must ensure the store subscription\n// is created synchronously, otherwise a store update may occur before the\n// subscription is created and an inconsistent state may be observed\n\nvar useIsomorphicLayoutEffect_useIsomorphicLayoutEffect = typeof window !== 'undefined' && typeof window.document !== 'undefined' && typeof window.document.createElement !== 'undefined' ? react.useLayoutEffect : react.useEffect;\n;// CONCATENATED MODULE: ./node_modules/react-redux/es/components/connectAdvanced.js\n\n\n\n\n\n\n\n // Define some constant arrays just to avoid re-creating these\n\nvar EMPTY_ARRAY = [];\nvar NO_SUBSCRIPTION_ARRAY = [null, null];\n\nvar stringifyComponent = function stringifyComponent(Comp) {\n  try {\n    return JSON.stringify(Comp);\n  } catch (err) {\n    return String(Comp);\n  }\n};\n\nfunction storeStateUpdatesReducer(state, action) {\n  var updateCount = state[1];\n  return [action.payload, updateCount + 1];\n}\n\nfunction useIsomorphicLayoutEffectWithArgs(effectFunc, effectArgs, dependencies) {\n  useIsomorphicLayoutEffect_useIsomorphicLayoutEffect(function () {\n    return effectFunc.apply(void 0, effectArgs);\n  }, dependencies);\n}\n\nfunction captureWrapperProps(lastWrapperProps, lastChildProps, renderIsScheduled, wrapperProps, actualChildProps, childPropsFromStoreUpdate, notifyNestedSubs) {\n  // We want to capture the wrapper props and child props we used for later comparisons\n  lastWrapperProps.current = wrapperProps;\n  lastChildProps.current = actualChildProps;\n  renderIsScheduled.current = false; // If the render was from a store update, clear out that reference and cascade the subscriber update\n\n  if (childPropsFromStoreUpdate.current) {\n    childPropsFromStoreUpdate.current = null;\n    notifyNestedSubs();\n  }\n}\n\nfunction subscribeUpdates(shouldHandleStateChanges, store, subscription, childPropsSelector, lastWrapperProps, lastChildProps, renderIsScheduled, childPropsFromStoreUpdate, notifyNestedSubs, forceComponentUpdateDispatch) {\n  // If we're not subscribed to the store, nothing to do here\n  if (!shouldHandleStateChanges) return; // Capture values for checking if and when this component unmounts\n\n  var didUnsubscribe = false;\n  var lastThrownError = null; // We'll run this callback every time a store subscription update propagates to this component\n\n  var checkForUpdates = function checkForUpdates() {\n    if (didUnsubscribe) {\n      // Don't run stale listeners.\n      // Redux doesn't guarantee unsubscriptions happen until next dispatch.\n      return;\n    }\n\n    var latestStoreState = store.getState();\n    var newChildProps, error;\n\n    try {\n      // Actually run the selector with the most recent store state and wrapper props\n      // to determine what the child props should be\n      newChildProps = childPropsSelector(latestStoreState, lastWrapperProps.current);\n    } catch (e) {\n      error = e;\n      lastThrownError = e;\n    }\n\n    if (!error) {\n      lastThrownError = null;\n    } // If the child props haven't changed, nothing to do here - cascade the subscription update\n\n\n    if (newChildProps === lastChildProps.current) {\n      if (!renderIsScheduled.current) {\n        notifyNestedSubs();\n      }\n    } else {\n      // Save references to the new child props.  Note that we track the \"child props from store update\"\n      // as a ref instead of a useState/useReducer because we need a way to determine if that value has\n      // been processed.  If this went into useState/useReducer, we couldn't clear out the value without\n      // forcing another re-render, which we don't want.\n      lastChildProps.current = newChildProps;\n      childPropsFromStoreUpdate.current = newChildProps;\n      renderIsScheduled.current = true; // If the child props _did_ change (or we caught an error), this wrapper component needs to re-render\n\n      forceComponentUpdateDispatch({\n        type: 'STORE_UPDATED',\n        payload: {\n          error: error\n        }\n      });\n    }\n  }; // Actually subscribe to the nearest connected ancestor (or store)\n\n\n  subscription.onStateChange = checkForUpdates;\n  subscription.trySubscribe(); // Pull data from the store after first render in case the store has\n  // changed since we began.\n\n  checkForUpdates();\n\n  var unsubscribeWrapper = function unsubscribeWrapper() {\n    didUnsubscribe = true;\n    subscription.tryUnsubscribe();\n    subscription.onStateChange = null;\n\n    if (lastThrownError) {\n      // It's possible that we caught an error due to a bad mapState function, but the\n      // parent re-rendered without this component and we're about to unmount.\n      // This shouldn't happen as long as we do top-down subscriptions correctly, but\n      // if we ever do those wrong, this throw will surface the error in our tests.\n      // In that case, throw the error from here so it doesn't get lost.\n      throw lastThrownError;\n    }\n  };\n\n  return unsubscribeWrapper;\n}\n\nvar initStateUpdates = function initStateUpdates() {\n  return [null, 0];\n};\n\nfunction connectAdvanced(\n/*\n  selectorFactory is a func that is responsible for returning the selector function used to\n  compute new props from state, props, and dispatch. For example:\n     export default connectAdvanced((dispatch, options) => (state, props) => ({\n      thing: state.things[props.thingId],\n      saveThing: fields => dispatch(actionCreators.saveThing(props.thingId, fields)),\n    }))(YourComponent)\n   Access to dispatch is provided to the factory so selectorFactories can bind actionCreators\n  outside of their selector as an optimization. Options passed to connectAdvanced are passed to\n  the selectorFactory, along with displayName and WrappedComponent, as the second argument.\n   Note that selectorFactory is responsible for all caching/memoization of inbound and outbound\n  props. Do not use connectAdvanced directly without memoizing results between calls to your\n  selector, otherwise the Connect component will re-render on every state or props change.\n*/\nselectorFactory, // options object:\n_ref) {\n  if (_ref === void 0) {\n    _ref = {};\n  }\n\n  var _ref2 = _ref,\n      _ref2$getDisplayName = _ref2.getDisplayName,\n      getDisplayName = _ref2$getDisplayName === void 0 ? function (name) {\n    return \"ConnectAdvanced(\" + name + \")\";\n  } : _ref2$getDisplayName,\n      _ref2$methodName = _ref2.methodName,\n      methodName = _ref2$methodName === void 0 ? 'connectAdvanced' : _ref2$methodName,\n      _ref2$renderCountProp = _ref2.renderCountProp,\n      renderCountProp = _ref2$renderCountProp === void 0 ? undefined : _ref2$renderCountProp,\n      _ref2$shouldHandleSta = _ref2.shouldHandleStateChanges,\n      shouldHandleStateChanges = _ref2$shouldHandleSta === void 0 ? true : _ref2$shouldHandleSta,\n      _ref2$storeKey = _ref2.storeKey,\n      storeKey = _ref2$storeKey === void 0 ? 'store' : _ref2$storeKey,\n      _ref2$withRef = _ref2.withRef,\n      withRef = _ref2$withRef === void 0 ? false : _ref2$withRef,\n      _ref2$forwardRef = _ref2.forwardRef,\n      forwardRef = _ref2$forwardRef === void 0 ? false : _ref2$forwardRef,\n      _ref2$context = _ref2.context,\n      context = _ref2$context === void 0 ? Context_ReactReduxContext : _ref2$context,\n      connectOptions = (0,objectWithoutPropertiesLoose/* default */.Z)(_ref2, [\"getDisplayName\", \"methodName\", \"renderCountProp\", \"shouldHandleStateChanges\", \"storeKey\", \"withRef\", \"forwardRef\", \"context\"]);\n\n  if (false) { var customStoreWarningMessage; }\n\n  var Context = context;\n  return function wrapWithConnect(WrappedComponent) {\n    if (false) {}\n\n    var wrappedComponentName = WrappedComponent.displayName || WrappedComponent.name || 'Component';\n    var displayName = getDisplayName(wrappedComponentName);\n\n    var selectorFactoryOptions = (0,esm_extends/* default */.Z)({}, connectOptions, {\n      getDisplayName: getDisplayName,\n      methodName: methodName,\n      renderCountProp: renderCountProp,\n      shouldHandleStateChanges: shouldHandleStateChanges,\n      storeKey: storeKey,\n      displayName: displayName,\n      wrappedComponentName: wrappedComponentName,\n      WrappedComponent: WrappedComponent\n    });\n\n    var pure = connectOptions.pure;\n\n    function createChildSelector(store) {\n      return selectorFactory(store.dispatch, selectorFactoryOptions);\n    } // If we aren't running in \"pure\" mode, we don't want to memoize values.\n    // To avoid conditionally calling hooks, we fall back to a tiny wrapper\n    // that just executes the given callback immediately.\n\n\n    var usePureOnlyMemo = pure ? react.useMemo : function (callback) {\n      return callback();\n    };\n\n    function ConnectFunction(props) {\n      var _useMemo = (0,react.useMemo)(function () {\n        // Distinguish between actual \"data\" props that were passed to the wrapper component,\n        // and values needed to control behavior (forwarded refs, alternate context instances).\n        // To maintain the wrapperProps object reference, memoize this destructuring.\n        var reactReduxForwardedRef = props.reactReduxForwardedRef,\n            wrapperProps = (0,objectWithoutPropertiesLoose/* default */.Z)(props, [\"reactReduxForwardedRef\"]);\n\n        return [props.context, reactReduxForwardedRef, wrapperProps];\n      }, [props]),\n          propsContext = _useMemo[0],\n          reactReduxForwardedRef = _useMemo[1],\n          wrapperProps = _useMemo[2];\n\n      var ContextToUse = (0,react.useMemo)(function () {\n        // Users may optionally pass in a custom context instance to use instead of our ReactReduxContext.\n        // Memoize the check that determines which context instance we should use.\n        return propsContext && propsContext.Consumer && (0,react_is.isContextConsumer)( /*#__PURE__*/react.createElement(propsContext.Consumer, null)) ? propsContext : Context;\n      }, [propsContext, Context]); // Retrieve the store and ancestor subscription via context, if available\n\n      var contextValue = (0,react.useContext)(ContextToUse); // The store _must_ exist as either a prop or in context.\n      // We'll check to see if it _looks_ like a Redux store first.\n      // This allows us to pass through a `store` prop that is just a plain value.\n\n      var didStoreComeFromProps = Boolean(props.store) && Boolean(props.store.getState) && Boolean(props.store.dispatch);\n      var didStoreComeFromContext = Boolean(contextValue) && Boolean(contextValue.store);\n\n      if (false) {} // Based on the previous check, one of these must be true\n\n\n      var store = didStoreComeFromProps ? props.store : contextValue.store;\n      var childPropsSelector = (0,react.useMemo)(function () {\n        // The child props selector needs the store reference as an input.\n        // Re-create this selector whenever the store changes.\n        return createChildSelector(store);\n      }, [store]);\n\n      var _useMemo2 = (0,react.useMemo)(function () {\n        if (!shouldHandleStateChanges) return NO_SUBSCRIPTION_ARRAY; // This Subscription's source should match where store came from: props vs. context. A component\n        // connected to the store via props shouldn't use subscription from context, or vice versa.\n\n        var subscription = new Subscription_Subscription(store, didStoreComeFromProps ? null : contextValue.subscription); // `notifyNestedSubs` is duplicated to handle the case where the component is unmounted in\n        // the middle of the notification loop, where `subscription` will then be null. This can\n        // probably be avoided if Subscription's listeners logic is changed to not call listeners\n        // that have been unsubscribed in the  middle of the notification loop.\n\n        var notifyNestedSubs = subscription.notifyNestedSubs.bind(subscription);\n        return [subscription, notifyNestedSubs];\n      }, [store, didStoreComeFromProps, contextValue]),\n          subscription = _useMemo2[0],\n          notifyNestedSubs = _useMemo2[1]; // Determine what {store, subscription} value should be put into nested context, if necessary,\n      // and memoize that value to avoid unnecessary context updates.\n\n\n      var overriddenContextValue = (0,react.useMemo)(function () {\n        if (didStoreComeFromProps) {\n          // This component is directly subscribed to a store from props.\n          // We don't want descendants reading from this store - pass down whatever\n          // the existing context value is from the nearest connected ancestor.\n          return contextValue;\n        } // Otherwise, put this component's subscription instance into context, so that\n        // connected descendants won't update until after this component is done\n\n\n        return (0,esm_extends/* default */.Z)({}, contextValue, {\n          subscription: subscription\n        });\n      }, [didStoreComeFromProps, contextValue, subscription]); // We need to force this wrapper component to re-render whenever a Redux store update\n      // causes a change to the calculated child component props (or we caught an error in mapState)\n\n      var _useReducer = (0,react.useReducer)(storeStateUpdatesReducer, EMPTY_ARRAY, initStateUpdates),\n          _useReducer$ = _useReducer[0],\n          previousStateUpdateResult = _useReducer$[0],\n          forceComponentUpdateDispatch = _useReducer[1]; // Propagate any mapState/mapDispatch errors upwards\n\n\n      if (previousStateUpdateResult && previousStateUpdateResult.error) {\n        throw previousStateUpdateResult.error;\n      } // Set up refs to coordinate values between the subscription effect and the render logic\n\n\n      var lastChildProps = (0,react.useRef)();\n      var lastWrapperProps = (0,react.useRef)(wrapperProps);\n      var childPropsFromStoreUpdate = (0,react.useRef)();\n      var renderIsScheduled = (0,react.useRef)(false);\n      var actualChildProps = usePureOnlyMemo(function () {\n        // Tricky logic here:\n        // - This render may have been triggered by a Redux store update that produced new child props\n        // - However, we may have gotten new wrapper props after that\n        // If we have new child props, and the same wrapper props, we know we should use the new child props as-is.\n        // But, if we have new wrapper props, those might change the child props, so we have to recalculate things.\n        // So, we'll use the child props from store update only if the wrapper props are the same as last time.\n        if (childPropsFromStoreUpdate.current && wrapperProps === lastWrapperProps.current) {\n          return childPropsFromStoreUpdate.current;\n        } // TODO We're reading the store directly in render() here. Bad idea?\n        // This will likely cause Bad Things (TM) to happen in Concurrent Mode.\n        // Note that we do this because on renders _not_ caused by store updates, we need the latest store state\n        // to determine what the child props should be.\n\n\n        return childPropsSelector(store.getState(), wrapperProps);\n      }, [store, previousStateUpdateResult, wrapperProps]); // We need this to execute synchronously every time we re-render. However, React warns\n      // about useLayoutEffect in SSR, so we try to detect environment and fall back to\n      // just useEffect instead to avoid the warning, since neither will run anyway.\n\n      useIsomorphicLayoutEffectWithArgs(captureWrapperProps, [lastWrapperProps, lastChildProps, renderIsScheduled, wrapperProps, actualChildProps, childPropsFromStoreUpdate, notifyNestedSubs]); // Our re-subscribe logic only runs when the store/subscription setup changes\n\n      useIsomorphicLayoutEffectWithArgs(subscribeUpdates, [shouldHandleStateChanges, store, subscription, childPropsSelector, lastWrapperProps, lastChildProps, renderIsScheduled, childPropsFromStoreUpdate, notifyNestedSubs, forceComponentUpdateDispatch], [store, subscription, childPropsSelector]); // Now that all that's done, we can finally try to actually render the child component.\n      // We memoize the elements for the rendered child component as an optimization.\n\n      var renderedWrappedComponent = (0,react.useMemo)(function () {\n        return /*#__PURE__*/react.createElement(WrappedComponent, (0,esm_extends/* default */.Z)({}, actualChildProps, {\n          ref: reactReduxForwardedRef\n        }));\n      }, [reactReduxForwardedRef, WrappedComponent, actualChildProps]); // If React sees the exact same element reference as last time, it bails out of re-rendering\n      // that child, same as if it was wrapped in React.memo() or returned false from shouldComponentUpdate.\n\n      var renderedChild = (0,react.useMemo)(function () {\n        if (shouldHandleStateChanges) {\n          // If this component is subscribed to store updates, we need to pass its own\n          // subscription instance down to our descendants. That means rendering the same\n          // Context instance, and putting a different value into the context.\n          return /*#__PURE__*/react.createElement(ContextToUse.Provider, {\n            value: overriddenContextValue\n          }, renderedWrappedComponent);\n        }\n\n        return renderedWrappedComponent;\n      }, [ContextToUse, renderedWrappedComponent, overriddenContextValue]);\n      return renderedChild;\n    } // If we're in \"pure\" mode, ensure our wrapper component only re-renders when incoming props have changed.\n\n\n    var Connect = pure ? react.memo(ConnectFunction) : ConnectFunction;\n    Connect.WrappedComponent = WrappedComponent;\n    Connect.displayName = displayName;\n\n    if (forwardRef) {\n      var forwarded = react.forwardRef(function forwardConnectRef(props, ref) {\n        return /*#__PURE__*/react.createElement(Connect, (0,esm_extends/* default */.Z)({}, props, {\n          reactReduxForwardedRef: ref\n        }));\n      });\n      forwarded.displayName = displayName;\n      forwarded.WrappedComponent = WrappedComponent;\n      return hoist_non_react_statics_cjs_default()(forwarded, WrappedComponent);\n    }\n\n    return hoist_non_react_statics_cjs_default()(Connect, WrappedComponent);\n  };\n}\n;// CONCATENATED MODULE: ./node_modules/react-redux/es/utils/shallowEqual.js\nfunction is(x, y) {\n  if (x === y) {\n    return x !== 0 || y !== 0 || 1 / x === 1 / y;\n  } else {\n    return x !== x && y !== y;\n  }\n}\n\nfunction shallowEqual(objA, objB) {\n  if (is(objA, objB)) return true;\n\n  if (typeof objA !== 'object' || objA === null || typeof objB !== 'object' || objB === null) {\n    return false;\n  }\n\n  var keysA = Object.keys(objA);\n  var keysB = Object.keys(objB);\n  if (keysA.length !== keysB.length) return false;\n\n  for (var i = 0; i < keysA.length; i++) {\n    if (!Object.prototype.hasOwnProperty.call(objB, keysA[i]) || !is(objA[keysA[i]], objB[keysA[i]])) {\n      return false;\n    }\n  }\n\n  return true;\n}\n// EXTERNAL MODULE: ./node_modules/redux/es/redux.js\nvar redux = __webpack_require__(890);\n;// CONCATENATED MODULE: ./node_modules/react-redux/es/connect/wrapMapToProps.js\n\nfunction wrapMapToPropsConstant(getConstant) {\n  return function initConstantSelector(dispatch, options) {\n    var constant = getConstant(dispatch, options);\n\n    function constantSelector() {\n      return constant;\n    }\n\n    constantSelector.dependsOnOwnProps = false;\n    return constantSelector;\n  };\n} // dependsOnOwnProps is used by createMapToPropsProxy to determine whether to pass props as args\n// to the mapToProps function being wrapped. It is also used by makePurePropsSelector to determine\n// whether mapToProps needs to be invoked when props have changed.\n//\n// A length of one signals that mapToProps does not depend on props from the parent component.\n// A length of zero is assumed to mean mapToProps is getting args via arguments or ...args and\n// therefore not reporting its length accurately..\n\nfunction getDependsOnOwnProps(mapToProps) {\n  return mapToProps.dependsOnOwnProps !== null && mapToProps.dependsOnOwnProps !== undefined ? Boolean(mapToProps.dependsOnOwnProps) : mapToProps.length !== 1;\n} // Used by whenMapStateToPropsIsFunction and whenMapDispatchToPropsIsFunction,\n// this function wraps mapToProps in a proxy function which does several things:\n//\n//  * Detects whether the mapToProps function being called depends on props, which\n//    is used by selectorFactory to decide if it should reinvoke on props changes.\n//\n//  * On first call, handles mapToProps if returns another function, and treats that\n//    new function as the true mapToProps for subsequent calls.\n//\n//  * On first call, verifies the first result is a plain object, in order to warn\n//    the developer that their mapToProps function is not returning a valid result.\n//\n\nfunction wrapMapToPropsFunc(mapToProps, methodName) {\n  return function initProxySelector(dispatch, _ref) {\n    var displayName = _ref.displayName;\n\n    var proxy = function mapToPropsProxy(stateOrDispatch, ownProps) {\n      return proxy.dependsOnOwnProps ? proxy.mapToProps(stateOrDispatch, ownProps) : proxy.mapToProps(stateOrDispatch);\n    }; // allow detectFactoryAndVerify to get ownProps\n\n\n    proxy.dependsOnOwnProps = true;\n\n    proxy.mapToProps = function detectFactoryAndVerify(stateOrDispatch, ownProps) {\n      proxy.mapToProps = mapToProps;\n      proxy.dependsOnOwnProps = getDependsOnOwnProps(mapToProps);\n      var props = proxy(stateOrDispatch, ownProps);\n\n      if (typeof props === 'function') {\n        proxy.mapToProps = props;\n        proxy.dependsOnOwnProps = getDependsOnOwnProps(props);\n        props = proxy(stateOrDispatch, ownProps);\n      }\n\n      if (false) {}\n      return props;\n    };\n\n    return proxy;\n  };\n}\n;// CONCATENATED MODULE: ./node_modules/react-redux/es/connect/mapDispatchToProps.js\n\n\nfunction whenMapDispatchToPropsIsFunction(mapDispatchToProps) {\n  return typeof mapDispatchToProps === 'function' ? wrapMapToPropsFunc(mapDispatchToProps, 'mapDispatchToProps') : undefined;\n}\nfunction whenMapDispatchToPropsIsMissing(mapDispatchToProps) {\n  return !mapDispatchToProps ? wrapMapToPropsConstant(function (dispatch) {\n    return {\n      dispatch: dispatch\n    };\n  }) : undefined;\n}\nfunction whenMapDispatchToPropsIsObject(mapDispatchToProps) {\n  return mapDispatchToProps && typeof mapDispatchToProps === 'object' ? wrapMapToPropsConstant(function (dispatch) {\n    return (0,redux/* bindActionCreators */.DE)(mapDispatchToProps, dispatch);\n  }) : undefined;\n}\n/* harmony default export */ const mapDispatchToProps = ([whenMapDispatchToPropsIsFunction, whenMapDispatchToPropsIsMissing, whenMapDispatchToPropsIsObject]);\n;// CONCATENATED MODULE: ./node_modules/react-redux/es/connect/mapStateToProps.js\n\nfunction whenMapStateToPropsIsFunction(mapStateToProps) {\n  return typeof mapStateToProps === 'function' ? wrapMapToPropsFunc(mapStateToProps, 'mapStateToProps') : undefined;\n}\nfunction whenMapStateToPropsIsMissing(mapStateToProps) {\n  return !mapStateToProps ? wrapMapToPropsConstant(function () {\n    return {};\n  }) : undefined;\n}\n/* harmony default export */ const mapStateToProps = ([whenMapStateToPropsIsFunction, whenMapStateToPropsIsMissing]);\n;// CONCATENATED MODULE: ./node_modules/react-redux/es/connect/mergeProps.js\n\n\nfunction defaultMergeProps(stateProps, dispatchProps, ownProps) {\n  return (0,esm_extends/* default */.Z)({}, ownProps, stateProps, dispatchProps);\n}\nfunction wrapMergePropsFunc(mergeProps) {\n  return function initMergePropsProxy(dispatch, _ref) {\n    var displayName = _ref.displayName,\n        pure = _ref.pure,\n        areMergedPropsEqual = _ref.areMergedPropsEqual;\n    var hasRunOnce = false;\n    var mergedProps;\n    return function mergePropsProxy(stateProps, dispatchProps, ownProps) {\n      var nextMergedProps = mergeProps(stateProps, dispatchProps, ownProps);\n\n      if (hasRunOnce) {\n        if (!pure || !areMergedPropsEqual(nextMergedProps, mergedProps)) mergedProps = nextMergedProps;\n      } else {\n        hasRunOnce = true;\n        mergedProps = nextMergedProps;\n        if (false) {}\n      }\n\n      return mergedProps;\n    };\n  };\n}\nfunction whenMergePropsIsFunction(mergeProps) {\n  return typeof mergeProps === 'function' ? wrapMergePropsFunc(mergeProps) : undefined;\n}\nfunction whenMergePropsIsOmitted(mergeProps) {\n  return !mergeProps ? function () {\n    return defaultMergeProps;\n  } : undefined;\n}\n/* harmony default export */ const mergeProps = ([whenMergePropsIsFunction, whenMergePropsIsOmitted]);\n;// CONCATENATED MODULE: ./node_modules/react-redux/es/connect/selectorFactory.js\n\n\nfunction impureFinalPropsSelectorFactory(mapStateToProps, mapDispatchToProps, mergeProps, dispatch) {\n  return function impureFinalPropsSelector(state, ownProps) {\n    return mergeProps(mapStateToProps(state, ownProps), mapDispatchToProps(dispatch, ownProps), ownProps);\n  };\n}\nfunction pureFinalPropsSelectorFactory(mapStateToProps, mapDispatchToProps, mergeProps, dispatch, _ref) {\n  var areStatesEqual = _ref.areStatesEqual,\n      areOwnPropsEqual = _ref.areOwnPropsEqual,\n      areStatePropsEqual = _ref.areStatePropsEqual;\n  var hasRunAtLeastOnce = false;\n  var state;\n  var ownProps;\n  var stateProps;\n  var dispatchProps;\n  var mergedProps;\n\n  function handleFirstCall(firstState, firstOwnProps) {\n    state = firstState;\n    ownProps = firstOwnProps;\n    stateProps = mapStateToProps(state, ownProps);\n    dispatchProps = mapDispatchToProps(dispatch, ownProps);\n    mergedProps = mergeProps(stateProps, dispatchProps, ownProps);\n    hasRunAtLeastOnce = true;\n    return mergedProps;\n  }\n\n  function handleNewPropsAndNewState() {\n    stateProps = mapStateToProps(state, ownProps);\n    if (mapDispatchToProps.dependsOnOwnProps) dispatchProps = mapDispatchToProps(dispatch, ownProps);\n    mergedProps = mergeProps(stateProps, dispatchProps, ownProps);\n    return mergedProps;\n  }\n\n  function handleNewProps() {\n    if (mapStateToProps.dependsOnOwnProps) stateProps = mapStateToProps(state, ownProps);\n    if (mapDispatchToProps.dependsOnOwnProps) dispatchProps = mapDispatchToProps(dispatch, ownProps);\n    mergedProps = mergeProps(stateProps, dispatchProps, ownProps);\n    return mergedProps;\n  }\n\n  function handleNewState() {\n    var nextStateProps = mapStateToProps(state, ownProps);\n    var statePropsChanged = !areStatePropsEqual(nextStateProps, stateProps);\n    stateProps = nextStateProps;\n    if (statePropsChanged) mergedProps = mergeProps(stateProps, dispatchProps, ownProps);\n    return mergedProps;\n  }\n\n  function handleSubsequentCalls(nextState, nextOwnProps) {\n    var propsChanged = !areOwnPropsEqual(nextOwnProps, ownProps);\n    var stateChanged = !areStatesEqual(nextState, state);\n    state = nextState;\n    ownProps = nextOwnProps;\n    if (propsChanged && stateChanged) return handleNewPropsAndNewState();\n    if (propsChanged) return handleNewProps();\n    if (stateChanged) return handleNewState();\n    return mergedProps;\n  }\n\n  return function pureFinalPropsSelector(nextState, nextOwnProps) {\n    return hasRunAtLeastOnce ? handleSubsequentCalls(nextState, nextOwnProps) : handleFirstCall(nextState, nextOwnProps);\n  };\n} // TODO: Add more comments\n// If pure is true, the selector returned by selectorFactory will memoize its results,\n// allowing connectAdvanced's shouldComponentUpdate to return false if final\n// props have not changed. If false, the selector will always return a new\n// object and shouldComponentUpdate will always return true.\n\nfunction finalPropsSelectorFactory(dispatch, _ref2) {\n  var initMapStateToProps = _ref2.initMapStateToProps,\n      initMapDispatchToProps = _ref2.initMapDispatchToProps,\n      initMergeProps = _ref2.initMergeProps,\n      options = (0,objectWithoutPropertiesLoose/* default */.Z)(_ref2, [\"initMapStateToProps\", \"initMapDispatchToProps\", \"initMergeProps\"]);\n\n  var mapStateToProps = initMapStateToProps(dispatch, options);\n  var mapDispatchToProps = initMapDispatchToProps(dispatch, options);\n  var mergeProps = initMergeProps(dispatch, options);\n\n  if (false) {}\n\n  var selectorFactory = options.pure ? pureFinalPropsSelectorFactory : impureFinalPropsSelectorFactory;\n  return selectorFactory(mapStateToProps, mapDispatchToProps, mergeProps, dispatch, options);\n}\n;// CONCATENATED MODULE: ./node_modules/react-redux/es/connect/connect.js\n\n\n\n\n\n\n\n\n/*\n  connect is a facade over connectAdvanced. It turns its args into a compatible\n  selectorFactory, which has the signature:\n\n    (dispatch, options) => (nextState, nextOwnProps) => nextFinalProps\n  \n  connect passes its args to connectAdvanced as options, which will in turn pass them to\n  selectorFactory each time a Connect component instance is instantiated or hot reloaded.\n\n  selectorFactory returns a final props selector from its mapStateToProps,\n  mapStateToPropsFactories, mapDispatchToProps, mapDispatchToPropsFactories, mergeProps,\n  mergePropsFactories, and pure args.\n\n  The resulting final props selector is called by the Connect component instance whenever\n  it receives new props or store state.\n */\n\nfunction match(arg, factories, name) {\n  for (var i = factories.length - 1; i >= 0; i--) {\n    var result = factories[i](arg);\n    if (result) return result;\n  }\n\n  return function (dispatch, options) {\n    throw new Error(\"Invalid value of type \" + typeof arg + \" for \" + name + \" argument when connecting component \" + options.wrappedComponentName + \".\");\n  };\n}\n\nfunction strictEqual(a, b) {\n  return a === b;\n} // createConnect with default args builds the 'official' connect behavior. Calling it with\n// different options opens up some testing and extensibility scenarios\n\n\nfunction createConnect(_temp) {\n  var _ref = _temp === void 0 ? {} : _temp,\n      _ref$connectHOC = _ref.connectHOC,\n      connectHOC = _ref$connectHOC === void 0 ? connectAdvanced : _ref$connectHOC,\n      _ref$mapStateToPropsF = _ref.mapStateToPropsFactories,\n      mapStateToPropsFactories = _ref$mapStateToPropsF === void 0 ? mapStateToProps : _ref$mapStateToPropsF,\n      _ref$mapDispatchToPro = _ref.mapDispatchToPropsFactories,\n      mapDispatchToPropsFactories = _ref$mapDispatchToPro === void 0 ? mapDispatchToProps : _ref$mapDispatchToPro,\n      _ref$mergePropsFactor = _ref.mergePropsFactories,\n      mergePropsFactories = _ref$mergePropsFactor === void 0 ? mergeProps : _ref$mergePropsFactor,\n      _ref$selectorFactory = _ref.selectorFactory,\n      selectorFactory = _ref$selectorFactory === void 0 ? finalPropsSelectorFactory : _ref$selectorFactory;\n\n  return function connect(mapStateToProps, mapDispatchToProps, mergeProps, _ref2) {\n    if (_ref2 === void 0) {\n      _ref2 = {};\n    }\n\n    var _ref3 = _ref2,\n        _ref3$pure = _ref3.pure,\n        pure = _ref3$pure === void 0 ? true : _ref3$pure,\n        _ref3$areStatesEqual = _ref3.areStatesEqual,\n        areStatesEqual = _ref3$areStatesEqual === void 0 ? strictEqual : _ref3$areStatesEqual,\n        _ref3$areOwnPropsEqua = _ref3.areOwnPropsEqual,\n        areOwnPropsEqual = _ref3$areOwnPropsEqua === void 0 ? shallowEqual : _ref3$areOwnPropsEqua,\n        _ref3$areStatePropsEq = _ref3.areStatePropsEqual,\n        areStatePropsEqual = _ref3$areStatePropsEq === void 0 ? shallowEqual : _ref3$areStatePropsEq,\n        _ref3$areMergedPropsE = _ref3.areMergedPropsEqual,\n        areMergedPropsEqual = _ref3$areMergedPropsE === void 0 ? shallowEqual : _ref3$areMergedPropsE,\n        extraOptions = (0,objectWithoutPropertiesLoose/* default */.Z)(_ref3, [\"pure\", \"areStatesEqual\", \"areOwnPropsEqual\", \"areStatePropsEqual\", \"areMergedPropsEqual\"]);\n\n    var initMapStateToProps = match(mapStateToProps, mapStateToPropsFactories, 'mapStateToProps');\n    var initMapDispatchToProps = match(mapDispatchToProps, mapDispatchToPropsFactories, 'mapDispatchToProps');\n    var initMergeProps = match(mergeProps, mergePropsFactories, 'mergeProps');\n    return connectHOC(selectorFactory, (0,esm_extends/* default */.Z)({\n      // used in error messages\n      methodName: 'connect',\n      // used to compute Connect's displayName from the wrapped component's displayName.\n      getDisplayName: function getDisplayName(name) {\n        return \"Connect(\" + name + \")\";\n      },\n      // if mapStateToProps is falsy, the Connect component doesn't subscribe to store state changes\n      shouldHandleStateChanges: Boolean(mapStateToProps),\n      // passed through to selectorFactory\n      initMapStateToProps: initMapStateToProps,\n      initMapDispatchToProps: initMapDispatchToProps,\n      initMergeProps: initMergeProps,\n      pure: pure,\n      areStatesEqual: areStatesEqual,\n      areOwnPropsEqual: areOwnPropsEqual,\n      areStatePropsEqual: areStatePropsEqual,\n      areMergedPropsEqual: areMergedPropsEqual\n    }, extraOptions));\n  };\n}\n/* harmony default export */ const connect = (/*#__PURE__*/createConnect());\n;// CONCATENATED MODULE: ./node_modules/react-redux/es/hooks/useReduxContext.js\n\n\n/**\n * A hook to access the value of the `ReactReduxContext`. This is a low-level\n * hook that you should usually not need to call directly.\n *\n * @returns {any} the value of the `ReactReduxContext`\n *\n * @example\n *\n * import React from 'react'\n * import { useReduxContext } from 'react-redux'\n *\n * export const CounterComponent = ({ value }) => {\n *   const { store } = useReduxContext()\n *   return <div>{store.getState()}</div>\n * }\n */\n\nfunction useReduxContext() {\n  var contextValue = useContext(ReactReduxContext);\n\n  if (false) {}\n\n  return contextValue;\n}\n;// CONCATENATED MODULE: ./node_modules/react-redux/es/hooks/useStore.js\n\n\n\n/**\n * Hook factory, which creates a `useStore` hook bound to a given context.\n *\n * @param {React.Context} [context=ReactReduxContext] Context passed to your `<Provider>`.\n * @returns {Function} A `useStore` hook bound to the specified context.\n */\n\nfunction useStore_createStoreHook(context) {\n  if (context === void 0) {\n    context = ReactReduxContext;\n  }\n\n  var useReduxContext = context === ReactReduxContext ? useDefaultReduxContext : function () {\n    return useContext(context);\n  };\n  return function useStore() {\n    var _useReduxContext = useReduxContext(),\n        store = _useReduxContext.store;\n\n    return store;\n  };\n}\n/**\n * A hook to access the redux store.\n *\n * @returns {any} the redux store\n *\n * @example\n *\n * import React from 'react'\n * import { useStore } from 'react-redux'\n *\n * export const ExampleComponent = () => {\n *   const store = useStore()\n *   return <div>{store.getState()}</div>\n * }\n */\n\nvar useStore = /*#__PURE__*/(/* unused pure expression or super */ null && (useStore_createStoreHook()));\n;// CONCATENATED MODULE: ./node_modules/react-redux/es/hooks/useDispatch.js\n\n\n/**\n * Hook factory, which creates a `useDispatch` hook bound to a given context.\n *\n * @param {React.Context} [context=ReactReduxContext] Context passed to your `<Provider>`.\n * @returns {Function} A `useDispatch` hook bound to the specified context.\n */\n\nfunction createDispatchHook(context) {\n  if (context === void 0) {\n    context = ReactReduxContext;\n  }\n\n  var useStore = context === ReactReduxContext ? useDefaultStore : createStoreHook(context);\n  return function useDispatch() {\n    var store = useStore();\n    return store.dispatch;\n  };\n}\n/**\n * A hook to access the redux `dispatch` function.\n *\n * @returns {any|function} redux store's `dispatch` function\n *\n * @example\n *\n * import React, { useCallback } from 'react'\n * import { useDispatch } from 'react-redux'\n *\n * export const CounterComponent = ({ value }) => {\n *   const dispatch = useDispatch()\n *   const increaseCounter = useCallback(() => dispatch({ type: 'increase-counter' }), [])\n *   return (\n *     <div>\n *       <span>{value}</span>\n *       <button onClick={increaseCounter}>Increase counter</button>\n *     </div>\n *   )\n * }\n */\n\nvar useDispatch = /*#__PURE__*/(/* unused pure expression or super */ null && (createDispatchHook()));\n;// CONCATENATED MODULE: ./node_modules/react-redux/es/hooks/useSelector.js\n\n\n\n\n\n\nvar refEquality = function refEquality(a, b) {\n  return a === b;\n};\n\nfunction useSelectorWithStoreAndSubscription(selector, equalityFn, store, contextSub) {\n  var _useReducer = useReducer(function (s) {\n    return s + 1;\n  }, 0),\n      forceRender = _useReducer[1];\n\n  var subscription = useMemo(function () {\n    return new Subscription(store, contextSub);\n  }, [store, contextSub]);\n  var latestSubscriptionCallbackError = useRef();\n  var latestSelector = useRef();\n  var latestStoreState = useRef();\n  var latestSelectedState = useRef();\n  var storeState = store.getState();\n  var selectedState;\n\n  try {\n    if (selector !== latestSelector.current || storeState !== latestStoreState.current || latestSubscriptionCallbackError.current) {\n      selectedState = selector(storeState);\n    } else {\n      selectedState = latestSelectedState.current;\n    }\n  } catch (err) {\n    if (latestSubscriptionCallbackError.current) {\n      err.message += \"\\nThe error may be correlated with this previous error:\\n\" + latestSubscriptionCallbackError.current.stack + \"\\n\\n\";\n    }\n\n    throw err;\n  }\n\n  useIsomorphicLayoutEffect(function () {\n    latestSelector.current = selector;\n    latestStoreState.current = storeState;\n    latestSelectedState.current = selectedState;\n    latestSubscriptionCallbackError.current = undefined;\n  });\n  useIsomorphicLayoutEffect(function () {\n    function checkForUpdates() {\n      try {\n        var newSelectedState = latestSelector.current(store.getState());\n\n        if (equalityFn(newSelectedState, latestSelectedState.current)) {\n          return;\n        }\n\n        latestSelectedState.current = newSelectedState;\n      } catch (err) {\n        // we ignore all errors here, since when the component\n        // is re-rendered, the selectors are called again, and\n        // will throw again, if neither props nor store state\n        // changed\n        latestSubscriptionCallbackError.current = err;\n      }\n\n      forceRender();\n    }\n\n    subscription.onStateChange = checkForUpdates;\n    subscription.trySubscribe();\n    checkForUpdates();\n    return function () {\n      return subscription.tryUnsubscribe();\n    };\n  }, [store, subscription]);\n  return selectedState;\n}\n/**\n * Hook factory, which creates a `useSelector` hook bound to a given context.\n *\n * @param {React.Context} [context=ReactReduxContext] Context passed to your `<Provider>`.\n * @returns {Function} A `useSelector` hook bound to the specified context.\n */\n\n\nfunction createSelectorHook(context) {\n  if (context === void 0) {\n    context = ReactReduxContext;\n  }\n\n  var useReduxContext = context === ReactReduxContext ? useDefaultReduxContext : function () {\n    return useContext(context);\n  };\n  return function useSelector(selector, equalityFn) {\n    if (equalityFn === void 0) {\n      equalityFn = refEquality;\n    }\n\n    if (false) {}\n\n    var _useReduxContext = useReduxContext(),\n        store = _useReduxContext.store,\n        contextSub = _useReduxContext.subscription;\n\n    var selectedState = useSelectorWithStoreAndSubscription(selector, equalityFn, store, contextSub);\n    useDebugValue(selectedState);\n    return selectedState;\n  };\n}\n/**\n * A hook to access the redux store's state. This hook takes a selector function\n * as an argument. The selector is called with the store state.\n *\n * This hook takes an optional equality comparison function as the second parameter\n * that allows you to customize the way the selected state is compared to determine\n * whether the component needs to be re-rendered.\n *\n * @param {Function} selector the selector function\n * @param {Function=} equalityFn the function that will be used to determine equality\n *\n * @returns {any} the selected state\n *\n * @example\n *\n * import React from 'react'\n * import { useSelector } from 'react-redux'\n *\n * export const CounterComponent = () => {\n *   const counter = useSelector(state => state.counter)\n *   return <div>{counter}</div>\n * }\n */\n\nvar useSelector = /*#__PURE__*/(/* unused pure expression or super */ null && (createSelectorHook()));\n// EXTERNAL MODULE: ./node_modules/react-dom/index.js\nvar react_dom = __webpack_require__(935);\n;// CONCATENATED MODULE: ./node_modules/react-redux/es/utils/reactBatchedUpdates.js\n/* eslint-disable import/no-unresolved */\n\n;// CONCATENATED MODULE: ./node_modules/react-redux/es/index.js\n\n\n\n\n\n\n\n\n\n\nsetBatch(react_dom.unstable_batchedUpdates);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///703\n")},359:(__unused_webpack_module,exports)=>{"use strict";eval('var __webpack_unused_export__;\n/** @license React v16.13.1\n * react-is.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nvar b="function"===typeof Symbol&&Symbol.for,c=b?Symbol.for("react.element"):60103,d=b?Symbol.for("react.portal"):60106,e=b?Symbol.for("react.fragment"):60107,f=b?Symbol.for("react.strict_mode"):60108,g=b?Symbol.for("react.profiler"):60114,h=b?Symbol.for("react.provider"):60109,k=b?Symbol.for("react.context"):60110,l=b?Symbol.for("react.async_mode"):60111,m=b?Symbol.for("react.concurrent_mode"):60111,n=b?Symbol.for("react.forward_ref"):60112,p=b?Symbol.for("react.suspense"):60113,q=b?\nSymbol.for("react.suspense_list"):60120,r=b?Symbol.for("react.memo"):60115,t=b?Symbol.for("react.lazy"):60116,v=b?Symbol.for("react.block"):60121,w=b?Symbol.for("react.fundamental"):60117,x=b?Symbol.for("react.responder"):60118,y=b?Symbol.for("react.scope"):60119;\nfunction z(a){if("object"===typeof a&&null!==a){var u=a.$$typeof;switch(u){case c:switch(a=a.type,a){case l:case m:case e:case g:case f:case p:return a;default:switch(a=a&&a.$$typeof,a){case k:case n:case t:case r:case h:return a;default:return u}}case d:return u}}}function A(a){return z(a)===m}__webpack_unused_export__=l;__webpack_unused_export__=m;__webpack_unused_export__=k;__webpack_unused_export__=h;__webpack_unused_export__=c;__webpack_unused_export__=n;__webpack_unused_export__=e;__webpack_unused_export__=t;__webpack_unused_export__=r;__webpack_unused_export__=d;\n__webpack_unused_export__=g;__webpack_unused_export__=f;__webpack_unused_export__=p;__webpack_unused_export__=function(a){return A(a)||z(a)===l};__webpack_unused_export__=A;exports.isContextConsumer=function(a){return z(a)===k};__webpack_unused_export__=function(a){return z(a)===h};__webpack_unused_export__=function(a){return"object"===typeof a&&null!==a&&a.$$typeof===c};__webpack_unused_export__=function(a){return z(a)===n};__webpack_unused_export__=function(a){return z(a)===e};__webpack_unused_export__=function(a){return z(a)===t};\n__webpack_unused_export__=function(a){return z(a)===r};__webpack_unused_export__=function(a){return z(a)===d};__webpack_unused_export__=function(a){return z(a)===g};__webpack_unused_export__=function(a){return z(a)===f};__webpack_unused_export__=function(a){return z(a)===p};\n__webpack_unused_export__=function(a){return"string"===typeof a||"function"===typeof a||a===e||a===m||a===g||a===f||a===p||a===q||"object"===typeof a&&null!==a&&(a.$$typeof===t||a.$$typeof===r||a.$$typeof===h||a.$$typeof===k||a.$$typeof===n||a.$$typeof===w||a.$$typeof===x||a.$$typeof===y||a.$$typeof===v)};__webpack_unused_export__=z;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zdXBlci1jb21pYy1zbGljZXIvLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvbm9kZV9tb2R1bGVzL3JlYWN0LWlzL2Nqcy9yZWFjdC1pcy5wcm9kdWN0aW9uLm1pbi5qcz8wZDRjIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVhO0FBQ2I7QUFDQSxjQUFjLGtDQUFrQyxpQkFBaUIsVUFBVSwwQkFBMEIsbURBQW1ELGtDQUFrQyw0Q0FBNEMsa0JBQWtCLGtCQUFrQixjQUFjLGdCQUFnQix5QkFBaUIsR0FBRyx5QkFBc0IsR0FBRyx5QkFBdUIsR0FBRyx5QkFBdUIsR0FBRyx5QkFBZSxHQUFHLHlCQUFrQixHQUFHLHlCQUFnQixHQUFHLHlCQUFZLEdBQUcseUJBQVksR0FBRyx5QkFBYztBQUMvZSx5QkFBZ0IsR0FBRyx5QkFBa0IsR0FBRyx5QkFBZ0IsR0FBRyx5QkFBbUIsYUFBYSx1QkFBdUIseUJBQXdCLEdBQUcseUJBQXlCLGFBQWEsaUJBQWlCLHlCQUF5QixhQUFhLGlCQUFpQix5QkFBaUIsYUFBYSxxREFBcUQseUJBQW9CLGFBQWEsaUJBQWlCLHlCQUFrQixhQUFhLGlCQUFpQix5QkFBYyxhQUFhO0FBQzNjLHlCQUFjLGFBQWEsaUJBQWlCLHlCQUFnQixhQUFhLGlCQUFpQix5QkFBa0IsYUFBYSxpQkFBaUIseUJBQW9CLGFBQWEsaUJBQWlCLHlCQUFrQixhQUFhO0FBQzNOLHlCQUEwQixhQUFhLDZRQUE2USx5QkFBYyIsImZpbGUiOiIzNTkuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiogQGxpY2Vuc2UgUmVhY3QgdjE2LjEzLjFcbiAqIHJlYWN0LWlzLnByb2R1Y3Rpb24ubWluLmpzXG4gKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO3ZhciBiPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBTeW1ib2wmJlN5bWJvbC5mb3IsYz1iP1N5bWJvbC5mb3IoXCJyZWFjdC5lbGVtZW50XCIpOjYwMTAzLGQ9Yj9TeW1ib2wuZm9yKFwicmVhY3QucG9ydGFsXCIpOjYwMTA2LGU9Yj9TeW1ib2wuZm9yKFwicmVhY3QuZnJhZ21lbnRcIik6NjAxMDcsZj1iP1N5bWJvbC5mb3IoXCJyZWFjdC5zdHJpY3RfbW9kZVwiKTo2MDEwOCxnPWI/U3ltYm9sLmZvcihcInJlYWN0LnByb2ZpbGVyXCIpOjYwMTE0LGg9Yj9TeW1ib2wuZm9yKFwicmVhY3QucHJvdmlkZXJcIik6NjAxMDksaz1iP1N5bWJvbC5mb3IoXCJyZWFjdC5jb250ZXh0XCIpOjYwMTEwLGw9Yj9TeW1ib2wuZm9yKFwicmVhY3QuYXN5bmNfbW9kZVwiKTo2MDExMSxtPWI/U3ltYm9sLmZvcihcInJlYWN0LmNvbmN1cnJlbnRfbW9kZVwiKTo2MDExMSxuPWI/U3ltYm9sLmZvcihcInJlYWN0LmZvcndhcmRfcmVmXCIpOjYwMTEyLHA9Yj9TeW1ib2wuZm9yKFwicmVhY3Quc3VzcGVuc2VcIik6NjAxMTMscT1iP1xuU3ltYm9sLmZvcihcInJlYWN0LnN1c3BlbnNlX2xpc3RcIik6NjAxMjAscj1iP1N5bWJvbC5mb3IoXCJyZWFjdC5tZW1vXCIpOjYwMTE1LHQ9Yj9TeW1ib2wuZm9yKFwicmVhY3QubGF6eVwiKTo2MDExNix2PWI/U3ltYm9sLmZvcihcInJlYWN0LmJsb2NrXCIpOjYwMTIxLHc9Yj9TeW1ib2wuZm9yKFwicmVhY3QuZnVuZGFtZW50YWxcIik6NjAxMTcseD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5yZXNwb25kZXJcIik6NjAxMTgseT1iP1N5bWJvbC5mb3IoXCJyZWFjdC5zY29wZVwiKTo2MDExOTtcbmZ1bmN0aW9uIHooYSl7aWYoXCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSl7dmFyIHU9YS4kJHR5cGVvZjtzd2l0Y2godSl7Y2FzZSBjOnN3aXRjaChhPWEudHlwZSxhKXtjYXNlIGw6Y2FzZSBtOmNhc2UgZTpjYXNlIGc6Y2FzZSBmOmNhc2UgcDpyZXR1cm4gYTtkZWZhdWx0OnN3aXRjaChhPWEmJmEuJCR0eXBlb2YsYSl7Y2FzZSBrOmNhc2UgbjpjYXNlIHQ6Y2FzZSByOmNhc2UgaDpyZXR1cm4gYTtkZWZhdWx0OnJldHVybiB1fX1jYXNlIGQ6cmV0dXJuIHV9fX1mdW5jdGlvbiBBKGEpe3JldHVybiB6KGEpPT09bX1leHBvcnRzLkFzeW5jTW9kZT1sO2V4cG9ydHMuQ29uY3VycmVudE1vZGU9bTtleHBvcnRzLkNvbnRleHRDb25zdW1lcj1rO2V4cG9ydHMuQ29udGV4dFByb3ZpZGVyPWg7ZXhwb3J0cy5FbGVtZW50PWM7ZXhwb3J0cy5Gb3J3YXJkUmVmPW47ZXhwb3J0cy5GcmFnbWVudD1lO2V4cG9ydHMuTGF6eT10O2V4cG9ydHMuTWVtbz1yO2V4cG9ydHMuUG9ydGFsPWQ7XG5leHBvcnRzLlByb2ZpbGVyPWc7ZXhwb3J0cy5TdHJpY3RNb2RlPWY7ZXhwb3J0cy5TdXNwZW5zZT1wO2V4cG9ydHMuaXNBc3luY01vZGU9ZnVuY3Rpb24oYSl7cmV0dXJuIEEoYSl8fHooYSk9PT1sfTtleHBvcnRzLmlzQ29uY3VycmVudE1vZGU9QTtleHBvcnRzLmlzQ29udGV4dENvbnN1bWVyPWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09a307ZXhwb3J0cy5pc0NvbnRleHRQcm92aWRlcj1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PWh9O2V4cG9ydHMuaXNFbGVtZW50PWZ1bmN0aW9uKGEpe3JldHVyblwib2JqZWN0XCI9PT10eXBlb2YgYSYmbnVsbCE9PWEmJmEuJCR0eXBlb2Y9PT1jfTtleHBvcnRzLmlzRm9yd2FyZFJlZj1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PW59O2V4cG9ydHMuaXNGcmFnbWVudD1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PWV9O2V4cG9ydHMuaXNMYXp5PWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09dH07XG5leHBvcnRzLmlzTWVtbz1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PXJ9O2V4cG9ydHMuaXNQb3J0YWw9ZnVuY3Rpb24oYSl7cmV0dXJuIHooYSk9PT1kfTtleHBvcnRzLmlzUHJvZmlsZXI9ZnVuY3Rpb24oYSl7cmV0dXJuIHooYSk9PT1nfTtleHBvcnRzLmlzU3RyaWN0TW9kZT1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PWZ9O2V4cG9ydHMuaXNTdXNwZW5zZT1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PXB9O1xuZXhwb3J0cy5pc1ZhbGlkRWxlbWVudFR5cGU9ZnVuY3Rpb24oYSl7cmV0dXJuXCJzdHJpbmdcIj09PXR5cGVvZiBhfHxcImZ1bmN0aW9uXCI9PT10eXBlb2YgYXx8YT09PWV8fGE9PT1tfHxhPT09Z3x8YT09PWZ8fGE9PT1wfHxhPT09cXx8XCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSYmKGEuJCR0eXBlb2Y9PT10fHxhLiQkdHlwZW9mPT09cnx8YS4kJHR5cGVvZj09PWh8fGEuJCR0eXBlb2Y9PT1rfHxhLiQkdHlwZW9mPT09bnx8YS4kJHR5cGVvZj09PXd8fGEuJCR0eXBlb2Y9PT14fHxhLiQkdHlwZW9mPT09eXx8YS4kJHR5cGVvZj09PXYpfTtleHBvcnRzLnR5cGVPZj16O1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///359\n')},973:(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval("\n\nif (true) {\n  module.exports = __webpack_require__(359);\n} else {}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zdXBlci1jb21pYy1zbGljZXIvLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvbm9kZV9tb2R1bGVzL3JlYWN0LWlzL2luZGV4LmpzP2QyZmMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsSUFBSSxJQUFxQztBQUN6QyxFQUFFLHlDQUE0RDtBQUM5RCxDQUFDLE1BQU0sRUFFTiIsImZpbGUiOiI5NzMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtaXMucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtaXMuZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///973\n")},251:(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval('/** @license React v17.0.1\n * react-jsx-runtime.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n__webpack_require__(418);var f=__webpack_require__(294),g=60103;exports.Fragment=60107;if("function"===typeof Symbol&&Symbol.for){var h=Symbol.for;g=h("react.element");exports.Fragment=h("react.fragment")}var m=f.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,n=Object.prototype.hasOwnProperty,p={key:!0,ref:!0,__self:!0,__source:!0};\nfunction q(c,a,k){var b,d={},e=null,l=null;void 0!==k&&(e=""+k);void 0!==a.key&&(e=""+a.key);void 0!==a.ref&&(l=a.ref);for(b in a)n.call(a,b)&&!p.hasOwnProperty(b)&&(d[b]=a[b]);if(c&&c.defaultProps)for(b in a=c.defaultProps,a)void 0===d[b]&&(d[b]=a[b]);return{$$typeof:g,type:c,key:e,ref:l,props:d,_owner:m.current}}exports.jsx=q;exports.jsxs=q;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zdXBlci1jb21pYy1zbGljZXIvLi9ub2RlX21vZHVsZXMvcmVhY3QvY2pzL3JlYWN0LWpzeC1ydW50aW1lLnByb2R1Y3Rpb24ubWluLmpzP2QzMWQiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNhLG1CQUFPLENBQUMsR0FBZSxFQUFFLE1BQU0sbUJBQU8sQ0FBQyxHQUFPLFVBQVUsZ0JBQWdCLE9BQU8sMkNBQTJDLGlCQUFpQixxQkFBcUIsZ0JBQWdCLHFCQUFxQixrSEFBa0g7QUFDcFUsa0JBQWtCLFVBQVUsZUFBZSxxQkFBcUIsNkJBQTZCLDBCQUEwQiwwREFBMEQsNEVBQTRFLE9BQU8sd0RBQXdELFdBQVcsR0FBRyxZQUFZIiwiZmlsZSI6IjI1MS5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKiBAbGljZW5zZSBSZWFjdCB2MTcuMC4xXG4gKiByZWFjdC1qc3gtcnVudGltZS5wcm9kdWN0aW9uLm1pbi5qc1xuICpcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG4ndXNlIHN0cmljdCc7cmVxdWlyZShcIm9iamVjdC1hc3NpZ25cIik7dmFyIGY9cmVxdWlyZShcInJlYWN0XCIpLGc9NjAxMDM7ZXhwb3J0cy5GcmFnbWVudD02MDEwNztpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgU3ltYm9sJiZTeW1ib2wuZm9yKXt2YXIgaD1TeW1ib2wuZm9yO2c9aChcInJlYWN0LmVsZW1lbnRcIik7ZXhwb3J0cy5GcmFnbWVudD1oKFwicmVhY3QuZnJhZ21lbnRcIil9dmFyIG09Zi5fX1NFQ1JFVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9GSVJFRC5SZWFjdEN1cnJlbnRPd25lcixuPU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkscD17a2V5OiEwLHJlZjohMCxfX3NlbGY6ITAsX19zb3VyY2U6ITB9O1xuZnVuY3Rpb24gcShjLGEsayl7dmFyIGIsZD17fSxlPW51bGwsbD1udWxsO3ZvaWQgMCE9PWsmJihlPVwiXCIrayk7dm9pZCAwIT09YS5rZXkmJihlPVwiXCIrYS5rZXkpO3ZvaWQgMCE9PWEucmVmJiYobD1hLnJlZik7Zm9yKGIgaW4gYSluLmNhbGwoYSxiKSYmIXAuaGFzT3duUHJvcGVydHkoYikmJihkW2JdPWFbYl0pO2lmKGMmJmMuZGVmYXVsdFByb3BzKWZvcihiIGluIGE9Yy5kZWZhdWx0UHJvcHMsYSl2b2lkIDA9PT1kW2JdJiYoZFtiXT1hW2JdKTtyZXR1cm57JCR0eXBlb2Y6Zyx0eXBlOmMsa2V5OmUscmVmOmwscHJvcHM6ZCxfb3duZXI6bS5jdXJyZW50fX1leHBvcnRzLmpzeD1xO2V4cG9ydHMuanN4cz1xO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///251\n')},893:(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval("\n\nif (true) {\n  module.exports = __webpack_require__(251);\n} else {}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zdXBlci1jb21pYy1zbGljZXIvLi9ub2RlX21vZHVsZXMvcmVhY3QvanN4LXJ1bnRpbWUuanM/OWNhNSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBYTs7QUFFYixJQUFJLElBQXFDO0FBQ3pDLEVBQUUseUNBQXFFO0FBQ3ZFLENBQUMsTUFBTSxFQUVOIiwiZmlsZSI6Ijg5My5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1qc3gtcnVudGltZS5wcm9kdWN0aW9uLm1pbi5qcycpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1qc3gtcnVudGltZS5kZXZlbG9wbWVudC5qcycpO1xufVxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///893\n")}},0,[[352,382,868,712]]]);